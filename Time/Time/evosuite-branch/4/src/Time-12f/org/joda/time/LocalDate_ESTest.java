/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 19:09:52 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withEra(832);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 832 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) julianChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      LocalDate localDate1 = localDate0.withMonthOfYear(1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Date date0 = localDate0.toDate();
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Minutes minutes0 = Minutes.minutes(0);
      LocalDate localDate1 = localDate0.minus(minutes0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(10800000L, (Chronology) null);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertEquals((-57600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.withCenturyOfEra(0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1609));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Interval interval0 = localDate0.toInterval();
      assertEquals(1392451200000L, interval0.getEndMillis());
      assertEquals(1392364800000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertEquals(1392364800000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getDayOfWeek();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) strictChronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      boolean boolean0 = localDate1.isEqual(localDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1968).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.withDayOfMonth(3);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      int int0 = localDate0.getYearOfCentury();
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) strictChronology0);
      LocalDate localDate1 = localDate0.withYear(1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) julianChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      Chronology chronology0 = localDate_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      int int0 = localDate0.getDayOfYear();
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, 3, 2262);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withYearOfCentury(97);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((Object) zonedChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.ZonedChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      int int0 = localDate0.getWeekyear();
      assertEquals(2006, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = new DateTime(918518400000L);
      LocalDate localDate0 = dateTime0.toLocalDate();
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      int int0 = localDate0.getYearOfEra();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gregorianChronology0);
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3133L), (DateTimeZone) null);
      LocalTime localTime0 = new LocalTime();
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertEquals((-13118680L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      LocalDate localDate1 = localDate0.withDayOfWeek(1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("]QNuP|nj:ZxQ2-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"]QNuP|nj:ZxQ2-\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1506).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) gregorianChronology0);
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals((-57600000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      int int0 = localDate0.getEra();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      Months months0 = Months.NINE;
      LocalDate localDate1 = localDate0.plus(months0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.withWeekyear(3600000);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(10800000L, (Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(2250);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("wO})wRcBponhy!)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"wO})wRcBponhy!)\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) strictChronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((-12219292800000L), (Chronology) buddhistChronology0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      LocalDate localDate1 = localDate_Property0.addToCopy(1826);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1604), (-1604), (-1604));
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.plusMonths(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3133L), (DateTimeZone) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        localDate0.getField(1487, (Chronology) julianChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1487
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        localDate0.getValue((-450));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -450
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1506).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) strictChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1363);
      boolean boolean0 = localDate0.equals(partial0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 2);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) zonedChronology0);
      Date date0 = localDate0.toDate();
      assertEquals("Sat Feb 01 00:00:00 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.plusDays((-2147483644));
      LocalDate localDate2 = localDate1.withYearOfEra(292272992);
      Date date0 = localDate2.toDate();
      assertFalse(localDate2.equals((Object)localDate1));
      assertEquals("Thu Mar 26 14:25:51 GMT 292275057", date0.toString());
      assertFalse(localDate1.equals((Object)localDate2));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3033L));
      localDate0.hashCode();
      localDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      // Undeclared exception!
      try { 
        localDate0.isEqual(localTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1506).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must notcbe null", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      LocalTime localTime0 = LocalTime.now();
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1968).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTime((LocalTime) null, dateTimeZone0);
      assertEquals(73281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) strictChronology0);
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      TimeZone.setDefault(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Date date0 = localDate0.toDate();
      assertEquals("Fri Feb 14 00:00:00 PST 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1968).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      LocalDate localDate1 = localDate0.withFields(localDate0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 974);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      // Undeclared exception!
      try { 
        localDate0.withField((DateTimeFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, (-862));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1968).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 2);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, 67);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minutes' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1207));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LocalDate localDate0 = LocalDate.now((Chronology) zonedChronology0);
      LocalDate localDate1 = localDate0.withPeriodAdded((ReadablePeriod) null, 2821);
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDate localDate0 = dateTime0.toLocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      LocalDate localDate1 = localDate0.withPeriodAdded(mutablePeriod0, 0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate(5148, 0, 0, 0, (-2415), 5148);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      LocalDate localDate1 = localDate0.plusYears((-2415));
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.plusYears(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-3133L), (DateTimeZone) null);
      LocalDate localDate1 = localDate0.plusMonths(1487);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.plusWeeks(1826);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.plusWeeks(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.plusDays(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.minusYears(3600000);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate localDate1 = localDate0.minusMonths(5);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      LocalDate localDate1 = localDate0.minusMonths(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      LocalDate localDate1 = localDate0.minusWeeks(44);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate1 = localDate0.minusWeeks(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      LocalDate localDate1 = localDate0.minusDays(44);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusDays(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      // Undeclared exception!
      try { 
        localDate0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(10800000L, (Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1506).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        localDate0.toString("The DateTimeFieldType must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1968).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("The DateTimeFieldType must not be null", dateTimeFormatter0);
      String string0 = localDate0.toString((String) null);
      assertEquals("1970-01-01", string0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      Locale locale0 = Locale.PRC;
      try { 
        localDate0.toString("%4ee/R:?WL", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2795L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      Locale locale0 = Locale.ITALY;
      String string0 = localDate0.toString((String) null, locale0);
      assertEquals("1970-01-01", string0);
  }
}
