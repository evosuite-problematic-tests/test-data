/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 20:04:20 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("!Eyx}l?2", "Hl<T");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(982);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("!Eyx}l?2", "Hl<T");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      StringBuffer stringBuffer0 = new StringBuffer("!Eyx}l?2");
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 0);
      assertEquals("!Eyx}l?2Hl<THl<T", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(290);
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) charArrayWriter0, 821);
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendDays();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("q@NE90i_rd>W9)");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L, 2979L);
      Locale locale0 = Locale.GERMAN;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q=$r");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("deu", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      periodFormatterBuilder2.appendSeparator("xAelp=n'A^N5'");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Locale locale0 = new Locale("w?K75?&ej", "&(P\"`#,0m");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "y");
      MutablePeriod mutablePeriod0 = new MutablePeriod((-181), 2, 3604, 11);
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("y0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("q@NE90i_rd>W9)");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.GERMAN;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSeparator("5I}2mCx\"2|z>>");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      assertNotNull(periodFormatterBuilder_Separator0);
      
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "org.joda.time.datexaelp=n'a^n5'", 3, locale0);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      periodFormatterBuilder2.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder1.appendDays();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L, 2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Builder has created neither a printer nor a parser");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      periodFormatterBuilder1.appendWeeks();
      periodFormatterBuilder1.appendSeparator("xAelp=n'A^N5'");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      PeriodType periodType0 = PeriodType.weeks();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(6864, 480, periodType0, islamicChronology0);
      Locale locale0 = new Locale("w?K75?&ej", "&(P\"`#,0m");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "y");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("y", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("p(yA> R|U+lY50K;sc");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[9];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("2kv;5F", "org.joda.time.field.ZeroIsMaxDateTimeField", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("q@NE90i_rd>W9)");
      periodFormatterBuilder1.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      periodFormatterBuilder0.appendMillis3Digit();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.GERMAN;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(77, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendLiteral("Builder has created neither a printer nor a parser");
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.GERMAN;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "Builder has created neither a printer nor a parser", 0, locale0);
      assertEquals((-51), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("", "{: $h|");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("{: $h|");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("Cannot have two adjacent separators", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("org.joda.time.DateTime", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("p(yA,> R|U+lY50K;sc");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(".6U{;");
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("Builder has created neither a printer nor a parser");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      stringArray0[1] = " for ";
      stringArray0[2] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      stringArray0[3] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      stringArray0[5] = " for ";
      stringArray0[6] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      stringArray0[7] = "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix";
      stringArray0[8] = " for ";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(" for ", "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder0.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(".6U{;");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("Builder has created neither a printer nor a parser");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("kPen =?8tUe9", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore(" 10z/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("Prefix not followed by field");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("Prefix not followed by field");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertFalse(periodParser0.equals((Object)periodFormatterBuilder_Composite0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMonths();
      periodFormatterBuilder0.appendSeparator("xAelp=n'A^N5'");
      periodFormatterBuilder0.toParser();
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, (PeriodParser) null);
      periodFormatterBuilder0.append(periodFormatter0);
      PeriodFormatter periodFormatter1 = periodFormatterBuilder0.toFormatter();
      assertFalse(periodFormatter1.isParser());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("Builder has created neither a printer nor a parser", (-51));
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("No field to apply suffix to", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("or.joda.time.format.PeriodFormatterBuilder");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("-", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("AV-RI");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("ROA Wds_/,t.ody", 12);
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Maximum value exceeded for add");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("5y$CM+|/&6ed>3lXkP)", 7);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q@NE90i_rd>W9)");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("q@NE90i_rd>W9)", 4);
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("p(yA,> R|U+lY50K;sc", "p(yA,> R|U+lY50K;sc");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMonths();
      periodFormatterBuilder2.appendSuffix("p(yA,> R|U+lY50K;sc");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "p(yA,> R|U+lY50K;sc";
      stringArray0[1] = "p(yA,> R|U+lY50K;sc";
      stringArray0[2] = "p(yA,> R|U+lY50K;sc";
      stringArray0[3] = "p(yA,> R|U+lY50K;sc";
      stringArray0[4] = "p(yA,> R|U+lY50K;sc";
      stringArray0[5] = "p(yA,> R|U+lY50K;sc";
      stringArray0[6] = "p(yA,> R|U+lY50K;sc";
      stringArray0[7] = "p(yA,> R|U+lY50K;sc";
      stringArray0[8] = "p(yA,> R|U+lY50K;sc";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("p(yA,> R|U+lY50K;sc", "p(yA,> R|U+lY50K;sc", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("1:xJ?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q@NE90i_rd>W9)");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("5I}2mCx\"2|z>>", 8);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("asv");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("&|5$@=nW#]T #", 2);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.ime1fDrmat.PeriodFormatterBuildr");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("36dg", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("8=212hU~hVv>xnJ-", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("G%bIyE6c#Y(GPx)mU1d", "[Ze*.)=s/");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("xeZp[LV4S", "6vo{H");
      StringBuffer stringBuffer0 = new StringBuffer("");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
      assertEquals("xeZp[LV4S", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      StringWriter stringWriter0 = new StringWriter(0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) stringWriter0, 0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("4xBL^Xc", "^NS91`U<T`wTH2^^[Cc");
      MockFile mockFile0 = new MockFile("4xBL^Xc", "^NS91`U<T`wTH2^^[Cc");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockPrintWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("OF(IT/", "OF(IT/");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("OF(IT/", 0);
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("lT^6$o X^>'0<[b]_", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("=V[Ifj(/bk`6kwio", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Prefix not followed by field", "2kv;5F");
      int int0 = periodFormatterBuilder_PluralAffix0.scan("2kv;5F", 899);
      assertEquals((-900), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("org.joda.time.DateTimeUtils$SystemMillisProvider");
      periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder0.appendSuffix("org.joda.time.DateTimeUtils$SystemMillisProvider", "org.joda.time.DateTimeUtils$SystemMillisProvider");
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
      
      Locale locale0 = new Locale("xAelp=n'A^N5'", "&(P\"`#,0m");
      Days days0 = Days.MAX_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      int int0 = periodParser0.parseInto(mutablePeriod0, "&(P\"`#,0m", 7, locale0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "org.joda.time.MutableDateTime$Property");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("org.joda.time.chrono.GJDayOfWeekDateTimeField", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("xAelp=n'A^N5'", "xAelp=n'A^N5'");
      Locale locale0 = new Locale("xAelp=n'A^N5'", "&(P\"`#,0m");
      Days days0 = Days.MAX_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-8), (-570), 1, false, 5, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_FieldFormatter1.parseInto(mutablePeriod0, "&(P\"`#,0m", (-8), locale0);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.JodaTimePermission");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 43, true, 1, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) null, 0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      periodFormatterBuilder1.appendSeparator("Builder has created neither a printer nor a parser");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("5I}2mCx\"2|z>>");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "q@NE90i_rd>W9)", 4, locale0);
      assertEquals(6, int0);
      
      int int1 = periodFormatterBuilder_Separator0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 5, periodType0, islamicChronology0);
      String string0 = mutablePeriod0.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("(@u");
      periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder0.appendSeparator("xAelp=n'A^N5'");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      PeriodType periodType0 = PeriodType.weeks();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(6864, 480, periodType0, islamicChronology0);
      Locale locale0 = new Locale("w?K75?&ej", "&(P\"`#,0m");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "y");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("y(@u0", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(7);
      periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder1.appendSeparator("xAelp=n'A^N5'");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      PeriodType periodType0 = PeriodType.weeks();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(6864, 480, periodType0, islamicChronology0);
      Locale locale0 = new Locale("w?K75?&ej", "&(P\"`#,0m");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "y");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(8, stringBuffer0.length());
      assertEquals("y0000000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Builder has created neither a printer nor a parser");
      periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0);
      assertEquals("Builder has created neither a printer nor a parser2.979", stringBuffer0.toString());
      assertEquals(55, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("Builder has created neither a printer nor a parser");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(5, stringBuffer0.length());
      assertEquals("2.979", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.GERMAN;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(8, 48, (-10384350), false, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charsetEncoder0);
      periodFormatterBuilder_FieldFormatter0.printTo((Writer) outputStreamWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("q@NE90i_rd>W9)");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.GERMAN;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q=$r");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("de", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("5I}2mCx\"2|z>>");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "q@NE90i_rd>W9)", 4, locale0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5I}2mCx\"2|z>>");
      periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q@NE90i_rd>W9)");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2474, 4, (-8), true, 15, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "Builder has created neither a printer nor a parser", 2474, locale0);
      assertEquals((-2475), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("Builder has created neither a printer nor a parser");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "Asia/Shanghai", 15, locale0);
      assertEquals((-16), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("xAelp=n'A^N5'", "xAelp=n'A^N5'");
      Locale locale0 = new Locale("xAelp=n'A^N5'", "&(P\"`#,0m");
      Days days0 = Days.MAX_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.joda.time.DateTimeUtils$SystemMillisProvider";
      stringArray0[1] = "org.joda.time.DateTimeUtils$SystemMillisProvider";
      stringArray0[2] = "org.joda.time.DateTimeFieldType";
      stringArray0[3] = "&(P\"`#,0m";
      stringArray0[4] = "org.joda.time.DateTimeUtils$SystemMillisProvider";
      stringArray0[5] = "org.joda.time.DateTimeFieldType";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("&(P\"`#,0m", "xAelp=n'A^N5'", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(13, 4, 1693, true, (-155), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatter0);
      int int0 = periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "Unit duration field must be precise", 7, locale0);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("pMefix no");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pMefix no\" is malformed at \"Mefix no\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("q@NE90i_rd>W9)");
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(9223372036854775807L, 73, periodType0);
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "phefix no", 0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("5I}#`-Cx\";|z>>");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "-", 0, locale0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+7)F>2(VV$sRH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+7)F>2(VV$sRH\" is malformed at \")F>2(VV$sRH\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("+)F[>2(VxVHsRH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+)F[>2(VxVHsRH\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("5I}2mCx\"2|z>>");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "org.joda.time.datexaelp=n'a^n5'", 3, locale0);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder0.appendSeconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Builder has created neither a printer nor a parser");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-51), 4, 0, false, 50, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(mutablePeriod0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder0.appendDays();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Builder has created neither a printer nor a parser");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("USA", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendDays();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("q@NE90i_rd>W9)");
      periodFormatterBuilder0.appendDays();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L, 2979L);
      Locale locale0 = Locale.GERMAN;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q=$r");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("deu", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("org.joda.time.DateTimeUtils$SystemMillisProvider");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      PeriodType periodType0 = PeriodType.weeks();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(7, 7, periodType0, islamicChronology0);
      Locale locale0 = new Locale("xAelp=n'A^N5'", "&(P\"`#,0m");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.DateTimeUtils$SystemMillisProvider");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(97, stringBuffer0.length());
      assertEquals("org.joda.time.DateTimeUtils$SystemMillisProviderorg.joda.time.DateTimeUtils$SystemMillisProvider0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendDays();
      periodFormatterBuilder3.appendSeparator("Builder has created neither a printer nor a parser");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L, 2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Builder has created neither a printer nor a parser");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("US", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("xAelp=n'A^N5'", "y");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(21, 6864, (-157), false, 480, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodType periodType0 = PeriodType.weeks();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(6864, 480, periodType0, islamicChronology0);
      Locale locale0 = new Locale("w?K75?&ej", "&(P\"`#,0m");
      int int0 = periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 62, periodType0, islamicChronology0);
      String string0 = mutablePeriod0.toString();
      assertEquals("PT0.057S", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("q@NE90i_rd>W9)");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1884), (-1884), (-1884), false, 7, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 0, (-1884));
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("AR5Rf>gG");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1107, 5, 5, true, 5, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 5, periodType0, islamicChronology0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("org.joda.time.DateTimeUtils$SystemMillisProvider");
      periodFormatterBuilder0.appendWeeks();
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      Locale locale0 = new Locale("xAelp=n'A^N5'", "&(P\"`#,0m");
      Days days0 = Days.MAX_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      int int0 = periodParser0.parseInto(mutablePeriod0, "&(P\"`#,0m", 7, locale0);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-3114), (-3114), (-292269054), true, 45, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 45, (Chronology) islamicChronology0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 3, (-3114));
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("AR5Rf>gG");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1107, 5, 5, true, 5, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 62, periodType0, islamicChronology0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 4, 35);
      assertEquals(6, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodType periodType0 = PeriodType.minutes();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 0, periodType0, (Chronology) gregorianChronology0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, (-5276), (-5879));
      assertEquals(1, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[1];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("P^(Go%bz}rlinUy!d", (String) null, stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Literal0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("5I}2mCx\"2|z>>");
      periodFormatterBuilder1.appendDays();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      periodFormatterBuilder1.appendSeparatorIfFieldsAfter("5I}2mCx\"2|z>>");
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5I}2mCx\"2|z>>");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder0.appendSeconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(56, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder3.append(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(66, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gX5Q`l3:;kTlb?pO:/a";
      stringArray0[1] = "gX5Q`l3:;kTlb?pO:/a";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("gX5Q`l3:;kTlb?pO:/a", "gX5Q`l3:;kTlb?pO:/a", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Months months0 = Months.months(4361);
      Locale locale0 = new Locale("Values array must not be null", "gX5Q`l3:;kTlb?pO:/a");
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(months0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("5I}2mCx\"2|z>>");
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("");
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Builder has created neither a printer nor a parser");
      Locale locale0 = Locale.GERMAN;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("Builder has created neither a printer nor a parser2.979", stringBuffer0.toString());
      assertEquals(55, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder0.appendSeconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "q@NE90i_rd>W9)");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(70, stringBuffer0.length());
      assertEquals("q@NE90i_rd>W9)2.979Builder has created neither a printer nor a parser2", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder0.appendSeconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(59, stringBuffer0.length());
      assertEquals("2.979Builder has created neither a printer nor a parser2979", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-";
      stringArray0[1] = "h";
      stringArray0[2] = "-";
      stringArray0[3] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder";
      stringArray0[5] = "`Kx";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("h", "h", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((long) (-1), (Chronology) gregorianChronology0);
      Interval interval0 = yearMonth0.toInterval();
      Duration duration0 = interval0.toDuration();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("AR5Rf>gG");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1107, 5, 5, true, 5, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      Hours hours0 = Hours.EIGHT;
      Locale locale0 = Locale.UK;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AR5Rf>gG";
      stringArray0[1] = "uso Ji)7$$s\"ZYQqm";
      stringArray0[2] = "Builder has created neither a printer nor a parser";
      stringArray0[3] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      stringArray0[4] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      stringArray0[5] = "org.joda.time.format.PeriodFormatterBuilder$Separator";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("FaA$P/P.|", "org.joda.time.format.PeriodFormatterBuilder$Separator", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, true);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$Separator");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder_Separator1.printTo((StringBuffer) null, (ReadablePeriod) hours0, locale0);
      assertEquals("en_GB", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendSeparator("Builder has created neither a printer nor a parser");
      periodFormatterBuilder0.appendSeconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      periodFormatterBuilder1.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Builder has created neither a printer nor a parser");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("j#t<we1sumasvok", "9lf1mK#zwp1m\u0004,Lk(", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      MockFile mockFile0 = new MockFile("j#t<we1sumasvok", "l)RSdeQ\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Months months0 = Months.ONE;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("q@NE90i_rd>W9)");
      periodFormatterBuilder0.appendSeconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2979L);
      Locale locale0 = Locale.US;
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Builder has created neither a printer nor a parser");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3ng";
      stringArray0[1] = "3ng";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder", "org.joda.time.format.PeriodFormatterBuilder", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "3ng", (-1), (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L);
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "", 0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }
}
