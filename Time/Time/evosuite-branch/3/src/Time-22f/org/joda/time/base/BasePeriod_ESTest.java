/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 19:54:16 GMT 2019
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.GJChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasePeriod_ESTest extends BasePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Period period0 = new Period(dateTime0, duration0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(34L);
      mutablePeriod0.setValue(1, 1);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
      assertEquals(1, period0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = Period.seconds(451);
      DateMidnight dateMidnight0 = new DateMidnight((long) 451, (Chronology) null);
      Duration duration0 = period0.toDurationTo(dateMidnight0);
      assertEquals(7L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(34L);
      mutablePeriod0.setYears(1);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (-136L));
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Period period0 = new Period(0L, (PeriodType) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      Duration duration0 = period0.toDurationFrom(mutableDateTime0);
      assertEquals(0L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1027L, 1L);
      mutablePeriod0.addSeconds((-821));
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L);
      mutablePeriod0.add((-2682), 86400, 0, (-2682), 0, 86400, (-1158), 0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1808);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      Period period0 = new Period(mutableDateTime0, instant0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, dateTime0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) null);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, timeOfDay0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = null;
      try {
        period0 = new Period(yearMonth0, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalTime localTime0 = new LocalTime(3515L, (DateTimeZone) null);
      Years years0 = Years.MAX_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, localTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = new Period(localDateTime0, localDateTime0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(89, (-433), 89, 333, 333);
      YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, yearMonthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Period period0 = new Period(0L, (-3192L), (Chronology) null);
      PeriodType periodType0 = PeriodType.months();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Period period0 = new Period((Object) null);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0, gJChronology0);
      mutablePeriod0.setHours(0);
      assertEquals(2, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setYears(4217);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      // Undeclared exception!
      try { 
        mutablePeriod0.add((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0, gJChronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.addMonths(2360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(65535, 65535, 65535, 0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      mutablePeriod0.add(durationFieldType0, 0);
      assertEquals("weekyears", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, periodType0, gJChronology0);
      mutablePeriod0.mergePeriod((ReadablePeriod) null);
      assertEquals(2, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Period period0 = Period.hours(8);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.mergePeriod(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1027L, 1L);
      mutablePeriod0.add((ReadablePeriod) null);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(1L);
      Period period0 = new Period(monthDay0, monthDay0);
      Period period1 = period0.withWeeks((-516));
      Weeks weeks0 = period1.toStandardWeeks();
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, 2811L, periodType0);
      Hours hours0 = Hours.SIX;
      // Undeclared exception!
      try { 
        mutablePeriod0.add((ReadablePeriod) hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }
}
