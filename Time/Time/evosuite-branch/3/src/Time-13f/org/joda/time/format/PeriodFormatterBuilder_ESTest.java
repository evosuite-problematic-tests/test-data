/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 19:36:33 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("WQ)53+TmLyB=[!FC!]", "WQ)53+TmLyB=[!FC!]");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(8);
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("WQ)53+TmLyB=[!FC!]", "WQ)53+TmLyB=[!FC!]");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "xIi/9:0MrnY4");
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-1060));
      assertEquals("xIi/9:0MrnY4WQ)53+TmLyB=[!FC!]WQ)53+TmLyB=[!FC!]", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("OF", "OF");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3, 3, (-322568448), false, 3, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      Period period0 = new Period(3, (-322568448), 16, (-2138105989));
      Locale locale0 = Locale.GERMANY;
      periodFormatterBuilder_FieldFormatter1.printTo((Writer) charArrayWriter0, (ReadablePeriod) period0, locale0);
      assertEquals(9, charArrayWriter0.size());
      assertEquals("OF000OFOF", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendHours();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("rc|@dxpfds1xd(lc>e=", "", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, false);
      Hours hours0 = Hours.hours(227);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) hours0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("|f5AXj6aDM", "DayTime");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSeparator("DayTime", "DayTime");
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("0[yy+x/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0[yy+x/\" is malformed at \"[yy+x/\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(224);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroNever();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.KOREAN;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "S";
      stringArray0[2] = "";
      stringArray0[3] = "S";
      stringArray0[4] = "S";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "S";
      stringArray0[8] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("<:ly", "", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, false);
      Hours hours0 = Hours.ZERO;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) hours0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("org.joda.time.Partial");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder0.appendSeparator("org.joda.time.Partial", "org.joda.time.Partial");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Hours hours0 = Hours.hours(262);
      int int0 = periodPrinter0.calculatePrintedLength(hours0, (Locale) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("{l{1[#M+ttCg?7zc`");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(1076);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder1.appendPrefix("wiC2gIG#}Ebmo+}E/N");
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("yMt x#S%DSI*ShD");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("|f5AXj6aDM", "", stringArray0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("JWgvOL5yI 'lE6!>L");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) charArrayWriter0, (-927));
      assertEquals(17, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Magnitude of add amount is too large: ");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(6, 0, 0, true, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 3088, (-11), 10, (-447), 1007, 116, 10);
      Locale locale0 = new Locale("D=So?^&s\"[$:");
      int int0 = periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(82, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      periodFormatterBuilder0.append(periodFormatter0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("%]|{is>--K7x>;i/DBp");
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Literal must not be null";
      stringArray0[1] = "lt7l>KhM[%m%";
      stringArray0[2] = "Literal must not be null";
      stringArray0[3] = "Literal must not be null";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("w");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "Literal must not be null", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Literal0, true, true);
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Separator0);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("DayTime", "|f5AXj6aDM");
      periodFormatterBuilder1.appendPrefix("|f5AXj6aDM");
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("org.joda.ti_in:`p+zk|ok&qeurmatterbuilder$pluralaffix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.ti_in:`p+zk|ok&qeurmatt...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("qBf$a-ST&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, "seD={O.?Yp\"w<#@n}V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("V", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Cannot convert to ");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("9(kC", "Cannot convert to ", (String[]) null, (PeriodPrinter) null, periodFormatterBuilder_Literal0, true, false);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("Cannot convert to ", "^&-9NyU8*c~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("-&6MER`*[,9T(:+~");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("jNqoR$`,}h");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("", (String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DayTime";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("|f5AXj6aDM", "", stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparatorIfFieldsAfter("{l{1[#M+ttCg?7zc`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DayTime";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("|f5AXj6aDM", "", stringArray0);
      periodFormatterBuilder1.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("{l{1[#M+ttCg?7zc`");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DayTime";
      periodFormatterBuilder0.appendSeparator("|f5AXj6aDM", "", stringArray0);
      periodFormatterBuilder1.toPrinter();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("DayTime", "|f5AXj6aDM");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      periodFormatterBuilder2.appendPrefix("|f5AXj6aDM");
      periodFormatterBuilder2.appendMinutes();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("org.joda.ti_in:`p+zk|ok&qeurmatterbuilder$pluralaffix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.ti_in:`p+zk|ok&qeurmatt...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("M8?>");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("qBf$a-ST&", 1393);
      assertEquals((-1394), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("DayTime");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("{l{1[#M+ttCg?7zc`", 7);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$Literal");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("C/.[8|DI#, K|z0H)", 9);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("DayTime");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("{l{1[#'-M+ttCg?7zc`", 7);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<%(aGbTAmQblen(MA|s");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("org.joda.time.base.BaseInterval", 8);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.base.basepartial");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("xIi/9:0MrnY4", 3);
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.base.BasePartial");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(" ABe)HK?220>Xr-\" B", 9);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.base.BasePartial");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(" ABe)HK?223>Xr-\"IB", 9);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("DayTime");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("|sUKLSF4!T:T", 7);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("<%(aGbTAmQblen(MA|s");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(">mEemW(f7j[qJ@L~", 8);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("DayTime");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("C/.[8|DI#u, K|z0H)", 4);
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.base.basepartial");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("xIi/9:0MrnY4", 4);
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("h", "h");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(899, (-1043), (-1043), false, 6, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1708L, periodType0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Tz6HmrfOXQiBR &^>";
      stringArray0[1] = "org.joda.time.format.PeriodFormatter";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "M&M7<(/lKo=7SA";
      stringArray0[5] = "M&M7<(/lKo=7SA";
      stringArray0[6] = "Tz6HmrfOXQiBR &^>";
      stringArray0[7] = "{";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("M&M7<(/lKo=7SA", "Tz6HmrfOXQiBR &^>", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, true);
      StringBuffer stringBuffer0 = new StringBuffer(81);
      Locale locale0 = Locale.forLanguageTag("Tz6HmrfOXQiBR &^>");
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("h", "h");
      File file0 = MockFile.createTempFile("o%OtozHLr~=", "d");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("weekyears", "Y9&:AeL");
      int int0 = periodFormatterBuilder_PluralAffix0.parse("weekyears", 17971875);
      assertEquals((-17971876), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("DayTime", "|f5AXj6aDM");
      periodFormatterBuilder0.appendDays();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("|f5AXj6aDM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"|f5AXj6aDM\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Qh0Ka6yN%[aoh", "org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("Qh0Ka6yN%[aoh", 0);
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.Partial", "");
      int int0 = periodFormatterBuilder_PluralAffix0.scan("", 56);
      assertEquals((-57), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", "1rVf*qWXJ('/|G'");
      int int0 = periodFormatterBuilder_PluralAffix0.scan("1rVf*qWXJ('/|G'", (-2753));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("r^->?b|iG4sm", (-2536));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix((PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1469, 1469, 1469, true, 1469, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(weeks0, (-935), locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(262, (-1394), 262, 2, 2, (-1410), (-905), (-905));
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isPrinter());
      
      String string0 = mutablePeriod0.toString(periodFormatter0);
      assertEquals("-905.905", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1191L), (-1191L));
      String string0 = mutablePeriod0.toString();
      assertEquals("PT0S", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1250L), (-1084L));
      String string0 = mutablePeriod0.toString();
      assertEquals("PT0.166S", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1250L), (-1084L));
      mutablePeriod0.setPeriod((-1084L), (-1250L));
      String string0 = mutablePeriod0.toString();
      assertEquals("PT-0.166S", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.printZeroAlways();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("org.joda.time.Partial");
      periodFormatterBuilder1.appendMinutes();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(262, (-1394), 262, 1, 1, (-1410), 1, 1);
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "~F=", 262, (Locale) null);
      assertEquals((-263), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("DayTime", "|f5AXj6aDM");
      periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder0.appendYears();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("org.joda.ti_in:`p+zk|ok&qeurmatterbuilder$pluralaffix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.ti_in:`p+zk|ok&qeurmatt...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Weeks.parseWeeks("pwg.joda.time.format.periodformatterbuilder$simpleaffix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pwg.joda.time.format.periodformat...\" is malformed at \"wg.joda.time.format.periodformat...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Rc|@Dxpfds");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-5064), (-5064), false, 1197, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        Period.parse("Rc|@Dxpfds", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Rc|@Dxpfds\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1963), 55, 292272708, false, 45, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("'", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"'\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[9];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 292272708, false, 8, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("+", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[9];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-9), (-9), 292272708, true, 8, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("+", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("0[yy+x/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0[yy+x/\" is malformed at \"[yy+x/\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("DayTime", "|f5AXj6aDM");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      periodFormatterBuilder2.appendMinutes();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("0[yy+x/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0[yy+x/\" is malformed at \"[yy+x/\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(262, 56, 262, 1, 1, (-1410), (-905), (-905));
      mutablePeriod0.setPeriod((ReadableInstant) null, (ReadableInstant) null);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodFormatterBuilder_Literal0);
      String string0 = mutablePeriod0.toString(periodFormatter0);
      assertEquals("000", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, 0L, periodType0);
      String string0 = mutablePeriod0.toString();
      assertEquals("P0D", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("DayTime", "|f5AXj6aDM");
      periodFormatterBuilder0.appendMinutes();
      periodFormatterBuilder0.appendYears();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("0[yy+x/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0[yy+x/\" is malformed at \"[yy+x/\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.Partial", "");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3029, 2973, 3029, false, 2973, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.setFieldValue((ReadWritablePeriod) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Rc|@Dxpfds");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, 1197, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.setFieldValue((ReadWritablePeriod) null, 2, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Rc|@Dxpfds");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, 1197, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.setFieldValue((ReadWritablePeriod) null, 3, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix((PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-180), 4, (-2800), true, 45, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.setFieldValue((ReadWritablePeriod) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Rc|@Dxpfds");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, 1197, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue((ReadWritablePeriod) null, 8, 5);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DayTime";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("C/.[8|DI#, K|z0H)", "DayTime", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) null, "|f5AXj6aDM", (-1), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("a");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.format.PeriodFormatterBuilder$Composite", (String) null, (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Rc|@Dxpfds");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, 1197, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Rc|@Dxpfds", "Rc|@Dxpfds", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.ENGLISH;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_in:`p+zk|oK&qEU";
      stringArray0[1] = "s?7";
      stringArray0[2] = "s?7";
      stringArray0[3] = "org.joda.time.chrono.EthiopicChronology";
      stringArray0[4] = "s?7";
      stringArray0[5] = "org.joda.time.chrono.EthiopicChronology";
      stringArray0[6] = "s?7";
      stringArray0[7] = "g+*a=HqHAQq)4yJ";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("org.joda.time.chrono.EthiopicChronology", "_in:`p+zk|oK&qEU", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(mutablePeriod0, (-100), locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "rc|@dxpfds1xd(lc>e=";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("rc|@dxpfds1xd(lc>e=", "", stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, true, false);
      Hours hours0 = Hours.hours(262);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) hours0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendSeparatorIfFieldsBefore("org.joda.time.Partial");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(262, (-1394), 262, 1, 1, (-1410), 1, 1);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isPrinter());
      
      String string0 = mutablePeriod0.toString(periodFormatter0);
      assertEquals("1org.joda.time.Partial", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("org.joda.time.Partial", "org.joda.time.Partial");
      periodFormatterBuilder2.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      Hours hours0 = Hours.hours(262);
      int int0 = periodPrinter0.calculatePrintedLength(hours0, (Locale) null);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("M8?>");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(224, (-1394), 28181250, false, 4192, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_CompositeAffix0);
      Locale locale0 = Locale.CHINA;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "M8?>";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("dxwh9!1i", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatter0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((Chronology) gregorianChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Duration duration0 = minutes0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(period0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("org.joda.time.Partial");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Hours hours0 = Hours.hours(262);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.Partial");
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) hours0, (Locale) null);
      assertEquals(21, stringBuffer0.length());
      assertEquals("org.joda.time.Partial", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.Partial", "org.joda.time.Partial");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(262, 57, 262, 1, 1, 1, 57, 57);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodFormatterBuilder_Literal0);
      String string0 = mutablePeriod0.toString(periodFormatter0);
      assertEquals("57", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix((PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-180), 4, (-2800), true, 45, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("cd,", "cd,", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Duration duration0 = new Duration(4279L);
      Period period0 = new Period(duration0, (ReadableInstant) null);
      Minutes minutes0 = period0.toStandardMinutes();
      Locale locale0 = Locale.JAPAN;
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) minutes0, locale0);
      assertEquals(3, stringBuffer0.length());
      assertEquals("cd,", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("org.joda.time.Partial", "org.joda.time.Partial");
      periodFormatterBuilder2.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder3.toPrinter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(262, 57, 262, 24, 24, 24, 57, 57);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodFormatterBuilder_Literal0);
      String string0 = mutablePeriod0.toString(periodFormatter0);
      assertEquals("57org.joda.time.Partial262262", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DayTime";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("C/.[8|DI#, K|z0H)", "DayTime", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "DayTime");
      Years years0 = Years.ZERO;
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) years0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[9];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 292272708, false, 8, periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("", periodFormatter0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("zoBu|`?*ip<D d!|q", "zoBu|`?*ip<D d!|q", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("org.joda.time.Partial", "org.joda.time.Partial");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Hours hours0 = Hours.hours(262);
      periodPrinter0.printTo((Writer) charArrayWriter0, (ReadablePeriod) hours0, (Locale) null);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("0", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("s", "s");
      StringWriter stringWriter0 = new StringWriter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 3088, (-11), 10, (-447), 3088, 116, 10);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "D=So?^&s\"[$:";
      stringArray0[1] = "D=So?^&s\"[$:";
      stringArray0[2] = "s";
      stringArray0[3] = "D=So?^&s\"[$:";
      stringArray0[4] = "No ormatter supplied";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("s", "No ormatter supplied", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3088, (-11), 3088, false, 45, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.GERMANY;
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("116No ormatter supplied116", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toParser();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("s", "s");
      StringWriter stringWriter0 = new StringWriter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 3088, (-11), 10, (-447), 3088, 116, 10);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "D=So?^&s\"[$:";
      stringArray0[1] = "D=So?^&s\"[$:";
      stringArray0[2] = "s";
      stringArray0[3] = "D=So?^&s\"[$:";
      stringArray0[4] = "No ormatter supplied";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("s", "No ormatter supplied", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3088, (-11), 3088, false, 45, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.GERMANY;
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("116010s116010", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "JWgvOL5yI 'lE6!>L";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("84}HqK=W'4scS_");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("JWgvOL5yI 'lE6!>L", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MockFile mockFile0 = new MockFile("dNO9{[Oq", "Xq,r'n");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Weeks weeks0 = Weeks.ONE;
      Hours hours0 = weeks0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      Locale locale0 = Locale.JAPAN;
      periodFormatterBuilder_Separator1.printTo((Writer) mockFileWriter0, (ReadablePeriod) seconds0, locale0);
      assertEquals("JP", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("s", "s");
      StringWriter stringWriter0 = new StringWriter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 10, (-11), 10, (-447), 10, 116, 10);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "D=So?^&s\"C:";
      stringArray0[1] = "D=So?^&s\"C:";
      stringArray0[2] = "s";
      stringArray0[3] = "D=So?^&s\"C:";
      stringArray0[4] = "No formatter supplied";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("s", "No formatter supplied", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, true);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, (-11), 1, false, 45, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_FieldFormatter0);
      Locale locale0 = Locale.GERMANY;
      periodFormatterBuilder_Separator1.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("010s010", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("C/.[8|DI#, K|z0H)", "DayTime", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) null, "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", (-1), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DayTime";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("C/.[8|DI#, K|z0H)", "DayTime", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      int int0 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) null, "DayTime", (-1), locale0);
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("DayTime", "DayTime");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendYears();
      periodFormatterBuilder1.appendSeparator("DayTime", "DayTime");
      periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("0[yy+x/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0[yy+x/\" is malformed at \"[yy+x/\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("DayTime", "|f5AXj6aDM");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      periodFormatterBuilder1.appendSeparatorIfFieldsAfter("org.joda.time.format.PeriodFormatterBuilder");
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("0[yy+x/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0[yy+x/\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) copticChronology0);
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", 1, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(set0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Literal must not be null";
      stringArray0[1] = "lt7l>KhM[%m%";
      stringArray0[2] = "Literal must not be null";
      stringArray0[3] = "Literal must not be null";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("w");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "Literal must not be null", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Literal0, true, true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Separator0);
      periodFormatterBuilder0.append(periodFormatter0);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotSame(periodParser0, periodFormatterBuilder_Composite0);
  }
}
