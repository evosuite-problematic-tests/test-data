/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 13:14:15 GMT 2018
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 49, true, 41);
      StringBuffer stringBuffer0 = new StringBuffer("");
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null, 1);
      Locale locale0 = Locale.FRENCH;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (-1651L), (Chronology) julianChronology0, 2130, (DateTimeZone) null, locale0);
      assertEquals("00000000000000000000000000000000000000015", stringBuffer0.toString());
      assertEquals(41, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendWeekyear(48, 292271022);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder2.toPrinter();
      MockFile mockFile0 = new MockFile("GJChronology[+02:00]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      dateTimeFormatterBuilder_Composite0.printTo((Writer) mockPrintWriter0, 408L, (Chronology) buddhistChronology0, 0, dateTimeZone0, (Locale) null);
      assertEquals(292271024, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(292271024, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("o@r", "'Gg@w\"9A^J]@", false, 1000, 1000);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) bufferedWriter0, (ReadablePartial) null, locale0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("w4k ~h'E!k@d)", "w4k ~h'E!k@d)", false, 46, 46);
      StringBuffer stringBuffer0 = new StringBuffer(46);
      Locale locale0 = Locale.JAPANESE;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Instant.parse("9ZSv!{PUHhq#Ixj;V]&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9ZSv!{PUHhq#Ixj;V]&\" is malformed at \"ZSv!{PUHhq#Ixj;V]&\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 40);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      dateTimeFormatterBuilder1.append(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("Long.MIN_VALUE cannot be negated", true);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockFileWriter0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(4010, 4010);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_UnpaddedNumber0, (DateTimeParser) dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(1902);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(236, 41);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("2s\"J+D&A&FBa@d5'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTimeZoneName();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSecondOfDay((-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(1360);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("WBP{<F<\"f3`|_", "WBP{<F<\"f3`|_", false, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendYear(8, 8);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder2.toParser();
      assertEquals(28, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(28, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYearOfCentury(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(1126);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1622), (Map<String, DateTimeZone>) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo((StringBuffer) null, (ReadablePartial) localDate0, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-378), hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer("US/Indiana-Starke");
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Locale locale0 = Locale.CANADA_FRENCH;
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (-2493L), (Chronology) copticChronology0, (-378), (DateTimeZone) null, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(55, hashMap0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) stringWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(7593750, hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7593750);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2225);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) outputStreamWriter0, (long) 2225, (Chronology) ethiopicChronology0, (-853), dateTimeZone0, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('+');
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      Locale locale0 = Locale.KOREAN;
      dateTimeFormatterBuilder_CharacterLiteral0.printTo(stringBuffer0, (-1877L), (Chronology) lenientChronology0, 3606, dateTimeZone0, locale0);
      assertEquals("+", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('M');
      StringBuffer stringBuffer0 = new StringBuffer(1446);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(99, 354, (-1965), (-378), 99);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Locale locale0 = new Locale("Minutes");
      dateTimeFormatterBuilder_CharacterLiteral0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals("M", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('b');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".U`zK'!");
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = new Locale("k5=|9N=K9N#kQr)", "Magnitude of add amount is too large: ");
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals("k5=|9n=k9n#kqr)_MAGNITUDE OF ADD AMOUNT IS TOO LARGE: ", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.joda.time.format.DateTimeFormatterBuilder", "Pw$ciB.657HSFBd");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('\"');
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("y\"_neQa");
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockFileWriter0, (-177L), (Chronology) iSOChronology0, 10, dateTimeZone0, locale0);
      assertEquals("+03:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("ROCt be null");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      LocalDate localDate0 = LocalDate.now();
      Locale locale0 = Locale.JAPAN;
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
      assertEquals(12, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("E/E");
      MockFileWriter mockFileWriter0 = new MockFileWriter("E/E", false);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Locale locale0 = Locale.FRENCH;
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) mockFileWriter0, 0L, (Chronology) buddhistChronology0, 0, (DateTimeZone) null, locale0);
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("+,6QW~Ed^;V|qoh", true);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Partial partial0 = new Partial(julianChronology0);
      Locale locale0 = Locale.forLanguageTag("Invalid format: \"");
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) mockFileWriter0, (ReadablePartial) partial0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("%gRO,nooC");
      StringBuffer stringBuffer0 = new StringBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.ITALY;
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, 15778476000L, (Chronology) buddhistChronology0, 1, dateTimeZone0, locale0);
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("ACT");
      dateTimeFormatterBuilder1.appendTwoDigitYear(0, true);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder0.toParser();
      assertEquals(5, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(7, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 4270, false);
      StringBuffer stringBuffer0 = new StringBuffer(4270);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) 4270, (Chronology) iSOChronology0, 0, dateTimeZone0, locale0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("24", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = new Locale("7j*h?V-d", "7j*h?V-d", "7j*h?V-d");
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      dateTimeFormatterBuilder1.appendEraText();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder1.toParser();
      dateTimeFormatterBuilder_Composite0.printTo((Writer) stringWriter0, (ReadablePartial) null, locale0);
      assertEquals("\uFFFD\uFFFD", stringWriter0.toString());
      assertEquals(40, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Locale locale0 = new Locale("7j*h?V-d", "7j*h?V-d", "7j*h?V-d");
      Integer integer0 = new Integer(642);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000000000000L, gregorianChronology0, locale0, integer0, 560);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockPrintWriter0, (long) 642, (Chronology) gregorianChronology0, 642, dateTimeZone0, locale0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale locale0 = new Locale("7j*h?V-d", "7j*h?V-d", "7j*h?V-d");
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      dateTimeFormatterBuilder1.appendEraText();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder0.toParser();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "7j*h?V-d");
      dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
      assertEquals(11, stringBuffer0.length());
      assertEquals("7j*h?V-d\uFFFD\uFFFD", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction((DateTimeFieldType) null, (-133), 3627);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, 0L, (Chronology) buddhistChronology0, 1, dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1468871722), (-1468871722));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2298);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) charArrayWriter0, (long) (-1468871722), (Chronology) ethiopicChronology0, 2033, (DateTimeZone) null, locale0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals((-1468871722), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 120);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toParser();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, false);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TextField0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2422), true);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parsers supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, true);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, dateTimeParserArray0);
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("");
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("%");
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, 99, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal((DateTimeFieldType) null, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal((DateTimeFieldType) null, (-599), 4544);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-292269054), 106);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("ky0Aj:Pc!qE}-.~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 57);
      dateTimeFormatterBuilder1.toFormatter();
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, 2986);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFraction((DateTimeFieldType) null, 5, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfHour((-436), (-436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfMinute(0, (-4679));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[9];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[5] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[6] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[7] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertTrue(boolean0);
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, 18);
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("CKou", true);
      DateTimeFormatterBuilder.printUnknownString(mockFileWriter0, 2233);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('M');
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Locale locale0 = new Locale("Minutes");
      Integer integer0 = new Integer(494);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1290L, iSOChronology0, locale0, integer0, 494);
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "&9m4tDH_;", 53);
      assertEquals((-54), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse("93-wl{|ly");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"93-wl{|ly\" is malformed at \"-wl{|ly\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Integer integer0 = new Integer((-2147483646));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, (Chronology) null, (Locale) null, integer0, (-260));
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1842, true);
      int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "US/Indiana-StarkeUniversal^b", 10);
      assertEquals(1842, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse("+.)9%%=W9{/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+.)9%%=W9{/\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
      YearMonth yearMonth0 = new YearMonth(1747L);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((StringBuffer) null, (ReadablePartial) yearMonth0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-1324), true);
      MonthDay monthDay0 = MonthDay.now();
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((StringBuffer) null, (ReadablePartial) localDate0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.US;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 301, true);
      StringWriter stringWriter0 = new StringWriter(1740);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) buddhistChronology0);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) stringWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals("\uFFFD", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 6, false);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) null, (ReadablePartial) localDateTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-260), false);
      StringBuffer stringBuffer0 = new StringBuffer("r_m\u0007f/.M?{I5tlL");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(697);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, (Locale) null);
      assertEquals((-260), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals("r_m\u0007f/.M?{I5tlL", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (byte) (-112), false, (byte) (-112));
      StringBuffer stringBuffer0 = new StringBuffer();
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.UK;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals("12", stringBuffer0.toString());
      assertEquals((-112), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2298);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1468871722), false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals((-1468871722), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, true);
      Locale locale0 = Locale.US;
      StringWriter stringWriter0 = new StringWriter(1740);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) buddhistChronology0);
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) stringWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals("1", stringWriter0.toString());
      assertEquals(1, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-2439), true);
      Locale locale0 = Locale.KOREA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(393L, ethiopicChronology0, locale0, (Integer) 1, (-53));
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "US/MountainUniversal^b", (-2439));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-260), false);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(697);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-260), (Chronology) null, (Locale) null, (Integer) yearMonth0.YEAR, (-260));
      int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "US/Indiana-StarkeUniversal^b", (-260));
      assertEquals(518, int0);
      assertEquals((-260), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-260), true);
      Integer integer0 = new Integer(23);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, (Chronology) null, (Locale) null, integer0, (-260));
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "Singaporencomplete parser array", 18);
      assertEquals((-19), int0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2447), false);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale0 = Locale.GERMAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2589L, buddhistChronology0, locale0, (Integer) 1, (-2447));
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "93dgl{|ly", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12730650, "Illegal number of digits: ");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1800000L, islamicChronology0, (Locale) null, (Integer) islamicChronology0.AH, 1);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-12730651), false);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "Illegal number of digits: ", 12730650);
      assertEquals((-12730651), int0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 229, true);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto((DateTimeParserBucket) null, "No parsers supplied", 1062);
      assertEquals((-1063), int0);
      assertEquals(4, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-260), true);
      Integer integer0 = new Integer(23);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, (Chronology) null, (Locale) null, integer0, (-260));
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Indiana-StarkeUniversal^b", 10);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-260), true);
      Integer integer0 = new Integer((-2147483646));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, (Chronology) null, (Locale) null, integer0, (-260));
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "Vt.y$&Vk^z8w1s@6", 10);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-260), false);
      Integer integer0 = new Integer((-2147483646));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, (Chronology) null, (Locale) null, integer0, (-260));
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "Singaporencomplete parser array", 18);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      assertEquals((-19), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-260), false);
      Integer integer0 = new Integer((-2147483646));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, (Chronology) null, (Locale) null, integer0, (-260));
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Indiana-StarkeUniversal^b", 1);
      assertEquals((-2), int0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Locale locale0 = Locale.forLanguageTag("3!|/3@_&k.3Ik");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2147483648L), copticChronology0, locale0, (Integer) copticChronology0.AM, 1);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1), false);
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "(6*h%_<", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Locale locale0 = new Locale("7j*h?V-d", "7j*h?V-d", "7j*h?V-d");
      Integer integer0 = new Integer(642);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000000000000L, gregorianChronology0, locale0, integer0, 560);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      dateTimeFormatterBuilder0.appendTwoDigitYear(326565);
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder0.toParser();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "7j*h?V-d");
      dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (long) (-1732597379), (Chronology) gregorianChronology0, (-1732597379), dateTimeZone0, locale0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("7j*h?V-dPM69", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 50, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      Locale locale0 = Locale.FRANCE;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1150L, (Chronology) buddhistChronology0, 1, dateTimeZone0, locale0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("\uFFFD\uFFFD", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 51, false);
      File file0 = MockFile.createTempFile("org.joda.time.format.DateTimeFormatterBuilder$FixedNumber", "America/Phoenix");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      Locale locale0 = Locale.JAPANESE;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (-3622L), (Chronology) gregorianChronology0, 51, (DateTimeZone) null, locale0);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 369, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale0 = Locale.JAPAN;
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) pipedWriter0, (long) 369, (Chronology) buddhistChronology0, 369, (DateTimeZone) null, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 13, false);
      StringWriter stringWriter0 = new StringWriter(13);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("41", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 51, false);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(24L);
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("\uFFFD\uFFFD", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2298);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2395, false);
      MonthDay monthDay0 = new MonthDay((DateTimeZone) null);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) charArrayWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("02", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2298);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2395, false);
      MonthDay monthDay0 = new MonthDay((Chronology) ethiopicChronology0);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) charArrayWriter0, (ReadablePartial) monthDay0, locale0);
      assertEquals(2, charArrayWriter0.size());
      assertEquals("\uFFFD\uFFFD", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.DateTimeZone.Provider", "US/Samoat be null", false, 93, 93);
      assertEquals(35, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 292271022, 93);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 4544, false);
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[8];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_TextField0;
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      dateTimeParserArray0[5] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
      dateTimeParserArray0[6] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      StringWriter stringWriter0 = new StringWriter(1873);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      YearMonth yearMonth0 = new YearMonth(0L);
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
      assertEquals("\uFFFD", stringBuffer0.toString());
      assertEquals("\uFFFD", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WBP{<F<\"f3`|_");
      DateTime dateTime0 = new DateTime((Chronology) null);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WBP{<F<\"f3`|_");
      DateTime dateTime0 = new DateTime((Chronology) null);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12730650, "Illegal number of digits: ");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1800000L, islamicChronology0, (Locale) null, (Integer) islamicChronology0.AH, 1);
      int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "Illegal number of digits: ", 12730650);
      assertEquals((-12730651), int0);
      assertEquals("+03:32", dateTimeZone0.getID());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("\": ", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\": \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      // Undeclared exception!
      try { 
        LocalDateTime.parse("\": ", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\": \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4544, 4544);
      MockFileWriter mockFileWriter0 = new MockFileWriter("E/E", false);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (Writer) mockFileWriter0, (long) 0, (Chronology) iSOChronology0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 292271022, 93);
      StringBuffer stringBuffer0 = new StringBuffer();
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-719), 28);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("+4$eV1;{2KbqIwLP?H.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) outputStreamWriter0, 894L, (Chronology) iSOChronology0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 65, 690562340);
      StringWriter stringWriter0 = new StringWriter(88);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 65, dateTimeZone0);
      Duration duration0 = Duration.standardHours(578L);
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 88);
      Locale locale0 = Locale.CHINA;
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) stringWriter0, (ReadablePartial) localDateTime1, locale0);
      assertEquals("00000075231", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      File file0 = MockFile.createTempFile("org.joda.time.format.DateTimeFormatterBuilder$FixedNumber", "America/Phoenix");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 51, 221);
      dateTimeFormatterBuilder_Fraction0.iMinDigits = 5;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, 1L, (Chronology) gregorianChronology0);
      assertEquals("00821372", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 13, 93);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFileWriter mockFileWriter0 = new MockFileWriter("US/Samoat be null", false);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, (long) 690562340, (Chronology) julianChronology0);
      assertEquals(13, stringBuffer0.length());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      File file0 = MockFile.createTempFile("org.joda.time.format.DateTimeFormatterBuilder$FixedNumber", "America/Phoenix");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 51, 221);
      dateTimeFormatterBuilder_Fraction0.iMinDigits = 5;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, 1L, (Chronology) gregorianChronology0);
      assertEquals("000000", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-603), (-221071870));
      PipedReader pipedReader0 = new PipedReader();
      dateTimeFormatterBuilder_Fraction0.iMaxDigits = 1;
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 43, (Chronology) copticChronology0);
      assertEquals(1, stringBuffer0.length());
      assertEquals("3", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 2);
      StringBuffer stringBuffer0 = new StringBuffer(57);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) null, 1079L, (Chronology) copticChronology0);
      assertEquals("08", stringBuffer0.toString());
      assertEquals(2, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 86400000, 4);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "y0d#n^a#=`cbf`$");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) outputStreamWriter0, (-882L), (Chronology) julianChronology0);
      assertEquals("y0d#n^a#=`cbf`$0000", stringBuffer0.toString());
      assertEquals(4, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      File file0 = MockFile.createTempFile("org.joda.time.format.DateTimeFormatterBuilder$FixedNumber", "America/Phoenix");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 51, 5);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, 1L, (Chronology) gregorianChronology0);
      assertEquals("00821", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1468871722), (-1468871722));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2033, ethiopicChronology0, locale0, (Integer) 1, 1);
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "uO3A", (-572));
      assertEquals(571, int0);
      assertEquals((-1468871722), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1108L), copticChronology0, locale0, (Integer) 1, 1);
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "+.)9%%=W9{/", 5);
      assertEquals((-6), int0);
      assertEquals(1, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Integer integer0 = new Integer(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(60000L, gJChronology0, (Locale) null, integer0, 1427);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 44, 12730637);
      int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "-4tci`5F'Kp", 1);
      assertEquals(2, int0);
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("NoMinutes", "NoMinutes", false, 60000, 65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", true, 1620, 1620);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Locale locale0 = Locale.PRC;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 1, 12);
      StringBuffer stringBuffer0 = new StringBuffer("Zuluncomplete parser array");
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1895L), (Chronology) iSOChronology0, 1341, (DateTimeZone) null, locale0);
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals("Zuluncomplete parser array", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("FlI %`-[c3", "FlI %`-[c3", false, 25650000, 25650000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      StringBuffer stringBuffer0 = new StringBuffer(2615625);
      dateTimeFormatter0.printTo(stringBuffer0, 318L);
      assertEquals(10, stringBuffer0.length());
      assertEquals("-080000000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/Eastern", "INSTANCE", true, 20, 65533);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(65533);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("US/Aleutian", "US/Aleutian", "6tk5N'x");
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 20, (Chronology) julianChronology0, 44, dateTimeZone0, locale0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("+00:00:00.044", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", "org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", false, 256, 256);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", false);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Locale locale0 = Locale.ITALY;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 256, (Chronology) buddhistChronology0, 60000, (DateTimeZone) null, locale0);
      assertEquals(62, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("FlI %`-[c3", "FlI %`-[c3", false, 25650000, 25650000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      StringWriter stringWriter0 = new StringWriter(85);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      dateTimeFormatter0.printTo((Writer) mockPrintWriter0, (long) 708);
      assertEquals("-080000000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("/i6nT", "i)[", true, 1, 1596);
      File file0 = MockFile.createTempFile("i)[", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter0, (-604L), (Chronology) copticChronology0, 1596, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(5, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Locale locale0 = Locale.PRC;
      Integer integer0 = new Integer((-4276));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, integer0, 1);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 1, 12);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "ncomplete parse", 1);
      assertEquals(1, int0);
      assertEquals(0, (int)dateTimeParserBucket0.getOffsetInteger());
      assertEquals(4, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.DateTimeZone.Provider", "US/Samoat be null", false, 93, 93);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = Integer.valueOf(690562340);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2147483648L), julianChronology0, locale0, integer0, 2147439167);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "org.joda.time.DateTimeZone.Provider", 13);
      assertEquals(35, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("FlI %`-[c3", "FlI %`-[c3", false, 25650000, 25650000);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateMidnight.parse("FlI %`-[c3", dateTimeFormatter0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.DateTimeZone.Provider", "US/Samoat be null", true, 93, 93);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Integer integer0 = Integer.valueOf(690562340);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2147483648L), julianChronology0, locale0, integer0, 2147439167);
      int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "org.joda.time.DateTimeZone.Provider", 292271022);
      assertEquals((-292271023), int0);
      assertEquals(35, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2147483646), "US/Indiana-StarkeUniversal^b");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-k6:31\" is malformed at \"k6:31\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-292270987), "$tHQ Dgav#");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-81:11\" is malformed at \"81:11\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("-18:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 40);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      boolean boolean0 = dateTimeFormatterBuilder2.canBuildPrinter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) null, (-2358L), (Chronology) buddhistChronology0, 31, dateTimeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(5);
      dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      TimeZone timeZone0 = TimeZone.getTimeZone("earOfEr");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      hashMap0.put("earOfEr", dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      Locale locale0 = Locale.FRENCH;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(393L, ethiopicChronology0, locale0, (Integer) 1, 8);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(20587500, hashMap0);
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "US/Central", 1);
      assertEquals((-2), int0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, 86400000L, (Chronology) ethiopicChronology0, 2260, (DateTimeZone) null, locale0);
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, 20L, (Chronology) copticChronology0, 645, dateTimeZone0, locale0);
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2298);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) charArrayWriter0, 60000L, (Chronology) ethiopicChronology0, 2033, (DateTimeZone) null, locale0);
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("US/Samoat be null", false);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(512);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) mockFileWriter0, 31536000000L, (Chronology) buddhistChronology0, 819, dateTimeZone0, locale0);
      assertEquals("+00:00:00.512", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10000L, copticChronology0, locale0, (Integer) 1, 1596);
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "Incomplete parser array", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
      Locale locale0 = Locale.FRENCH;
      Integer integer0 = new Integer(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2101L), gJChronology0, locale0, integer0, 1615);
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "US/Pacific-New", 0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, 100000000000000000L, (Chronology) ethiopicChronology0, (-1030), (DateTimeZone) null, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("US/Samoat be null", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(512);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (long) (-14), (Chronology) julianChronology0, 512, dateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Locale locale0 = new Locale("7j*h?V-d", "7j*h?V-d", "7j*h?V-d");
      Integer integer0 = new Integer(642);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000000000000L, gregorianChronology0, locale0, integer0, 560);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      dateTimeFormatterBuilder1.appendEraText();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder0.toParser();
      dateTimeFormatterBuilder_Composite0.printTo((Writer) stringWriter0, (long) 560, (Chronology) gregorianChronology0, 59, dateTimeZone0, locale0);
      assertEquals("AMAD", stringWriter0.toString());
      assertEquals(40, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer(2954);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2954);
      LocalDate localDate0 = new LocalDate((-8L), dateTimeZone0);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("WETncomplete parser array");
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (ReadablePartial) localTime0, (Locale) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Integer integer0 = new Integer(0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-218L), (Chronology) null, locale0, integer0, 292278993);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, "Rq;DI9zeX+8&do9q|", 292278993);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("J]xJ(-.g", "", true, 13, 13);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Locale locale0 = Locale.GERMANY;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(441L, gregorianChronology0, locale0, (Integer) null, 13);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "", 3251);
      assertEquals(3251, int0);
      assertEquals(13, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-364), true, (-364));
      assertEquals((-364), dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(43);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Locale locale0 = Locale.ITALY;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(32, strictChronology0, locale0, (Integer) buddhistChronology0.BE, 43);
      int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "org.joda.time.chrono.StrictChronology", (-1902));
      assertEquals(0, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      assertEquals(1901, int0);
  }
}
