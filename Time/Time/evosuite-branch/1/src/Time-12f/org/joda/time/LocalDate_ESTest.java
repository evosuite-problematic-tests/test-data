/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 12:54:15 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-694L));
      // Undeclared exception!
      try { 
        localDate0.withEra(2886);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2886 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      String string0 = localDate0.toString((String) null);
      assertEquals("2014-02-14", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1000L, (Chronology) null);
      // Undeclared exception!
      try { 
        localDate0.withDayOfYear((-243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -243 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.withMonthOfYear((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-694L));
      Date date0 = localDate0.toDate();
      assertEquals("Wed Dec 31 00:00:00 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertEquals(1392364800000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withYearOfEra(2);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withCenturyOfEra(2691);
      boolean boolean0 = localDate1.equals(localDate0);
      assertFalse(boolean0);
      assertFalse(localDate0.equals((Object)localDate1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Interval interval0 = localDate0.toInterval();
      assertEquals(1392364800000L, interval0.getStartMillis());
      assertEquals(1392451200000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(2629746000L);
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392402546000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertEquals(1392364800000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4865L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getDayOfWeek();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3168);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) zonedChronology0);
      GregorianCalendar gregorianCalendar0 = dateMidnight0.toGregorianCalendar();
      LocalDate localDate0 = LocalDate.fromCalendarFields(gregorianCalendar0);
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("The DateTimeFieldType must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The DateTimeFieldType must not b...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withDayOfMonth((-1206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1206 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withYear((-1152));
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      int int0 = localDate0.getYearOfCentury();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(31556952000L, (Chronology) iSOChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getDayOfYear();
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy((-114));
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getWeekyear();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getYearOfEra();
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withDayOfWeek(5);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(1392364800000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(344, (-1), 344, 0, 750);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      int int0 = localDate0.getEra();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = dateTime0.toLocalDate();
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      LocalDate localDate1 = localDate0.plus(years0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      LocalDate localDate1 = localDate0.withWeekyear(40);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(islamicChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.IslamicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-2037L), (DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = dateTime0.toLocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertEquals(3, localDate1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = new LocalDate(339L, dateTimeZone0);
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1408L));
      LocalDate.Property localDate_Property0 = localDate0.era();
      Chronology chronology0 = localDate_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-694L));
      LocalDate.Property localDate_Property0 = localDate0.year();
      LocalDate localDate1 = localDate_Property0.addToCopy((-2990));
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) julianChronology0);
      DateTime dateTime0 = localDate0.toDateTime((LocalTime) null);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3159), (-3159), (-3159));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      String string0 = localDate0.toString(")");
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = new LocalDate(339L, dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.getField((-2456));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2456
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Object) null, buddhistChronology0);
      // Undeclared exception!
      try { 
        localDate0.getValue(5150);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 5150
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-350));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
      boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Seconds seconds0 = Seconds.MAX_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((-254L), 3163L, periodType0, julianChronology0);
      LocalDate localDate1 = localDate0.withPeriodAdded(period0, 1299);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      boolean boolean0 = localDate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      Date date0 = localDate0.toDate();
      assertEquals("Wed Apr 13 00:00:00 GMT 1435", date0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      localDate0.hashCode();
      localDate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1000L));
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) partial0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      MockDate mockDate0 = new MockDate(0, 256, 0, 0, 0, 0);
      LocalDate localDate1 = LocalDate.fromDateFields(mockDate0);
      boolean boolean0 = localDate1.isBefore(localDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate1 = localDate0.minusMonths((-64));
      int int0 = localDate1.compareTo((ReadablePartial) localDate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1408L));
      MockDate mockDate0 = new MockDate((-4094), (-4094), (-4094), 926, 1023);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime((LocalTime) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-114));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      LocalTime localTime0 = new LocalTime((Chronology) islamicChronology0);
      LocalDate localDate1 = localDate0.withFields(localTime0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) null);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 819);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(63158400000L);
      // Undeclared exception!
      try { 
        localDate0.withField((DateTimeFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 2939);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      LocalDate localDate0 = new LocalDate((-1989L), (Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millis' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate(344, (-1), 344, 0, 750);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.minus((ReadablePeriod) null);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4865L, (DateTimeZone) null);
      Period period0 = Period.days((-22));
      LocalDate localDate1 = localDate0.withPeriodAdded(period0, 0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      LocalDate localDate1 = localDate0.plusYears(1359);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(31556952000L, (Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.plusYears(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) copticChronology0);
      LocalDate localDate1 = localDate0.plusMonths(1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.plusMonths(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.plusWeeks(2691);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-136), 3, 3);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      LocalDate localDate0 = monthDay0.toLocalDate((-136));
      LocalDate localDate1 = localDate0.plusWeeks(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.plusDays(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusYears(2014);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.minusYears(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusMonths(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusWeeks(2691);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-350));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDate localDate1 = localDate0.minusWeeks(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusDays(4900);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusDays(0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L, (Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        localDate0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(281L, (Chronology) copticChronology0);
      LocalDate localDate0 = dateTime0.toLocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3159), (-3159), (-3159));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      Locale locale0 = Locale.JAPAN;
      try { 
        localDate0.toString("YXn M~kfaMI(bD", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Locale locale0 = Locale.CANADA;
      String string0 = localDate0.toString((String) null, locale0);
      assertEquals("2014-02-14", string0);
  }
}
