/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 10:27:09 GMT 2018
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Builder has created neither a printer nor a parser");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, false, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser", (String[]) null, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter1, true, true);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.calculatePrintedLength(months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("fk\"+B_Q/TwiZ", "vS");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 372);
      assertEquals(4, stringBuffer0.length());
      assertEquals("vSvS", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Builder has created neither a printer nor a parser");
      StringWriter stringWriter0 = new StringWriter(4);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, false, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser", (String[]) null, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter1, true, true);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(":L");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "uRUxc", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Days days0 = Days.days(0);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) days0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("3`ol]T2w}}dc$o~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3`ol]T2w}}dc$o~\" is malformed at \"`ol]T2w}}dc$o~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendYears();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("Vc'NIWd8T!:}#{v<");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Years years0 = Years.ZERO;
      Locale locale0 = Locale.ITALY;
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength(years0, locale0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMinutes();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("3`ol]T2w}}dc$o~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3`ol]T2w}}dc$o~\" is malformed at \"`ol]T2w}}dc$o~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("k");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("?B^tUN(R145H4@");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("3`ol]T2w}}dc$o~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3`ol]T2w}}dc$o~\" is malformed at \"`ol]T2w}}dc$o~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder1.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore("k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-10));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.format.PeriodFormatterBuilder$Composite");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("3`ol]T2w}}dc$o~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3`ol]T2w}}dc$o~\" is malformed at \"`ol]T2w}}dc$o~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[5];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("No field to apply suffix to");
      Period period0 = Period.days(57);
      Locale locale0 = Locale.ENGLISH;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      StringBuffer stringBuffer0 = new StringBuffer("");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("4;m9JFN");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, "V $");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("Literal must not be null", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("", "");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("*yvCt*q-?@SqLyl)o");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("?B^tUN(R145H4@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("", "P@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("cBT<_~7", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",Yk]C6n";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("AH", "AH", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("", "T");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("Months", "Months");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("org.joda.time.format.PeriodFormatterBuilder$Separator", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      periodFormatterBuilder2.appendMinutes();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("k");
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("", "");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("", "(:,}L:.m");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "(:,}L:.m";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "(:,}L:.m";
      stringArray0[6] = "(:,}L:.m";
      stringArray0[7] = "(:,}L:.m";
      stringArray0[8] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("(:,}L:.m", "", stringArray0, (PeriodPrinter) null, (PeriodParser) null, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("7II2}dx");
      periodFormatterBuilder1.toPrinter();
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Range duration field must be precise");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      int int0 = periodFormatterBuilder_CompositeAffix0.parse("Range duration field must be precise", 100);
      assertEquals((-101), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("Rph$", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Cannot have two adjacent separators");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("4aSv+a", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("wYm~", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No formatter supplied");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(",~L~j", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("/L%o~18");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("zRO+wU+Y1C", 9);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("N26=XQ;w53ruy9");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("N26=XQ;w53ruy9", 9);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("/L%o~18");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("60K", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("y");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(";7Z6fJV Ez7>:VI\r", 1);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("fsOO?4^?-8)u+");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("fsOO?4^?-8)u+", 9);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("N26=XQ;w53ruy9");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("N26=XQ;w53ruy9", 14);
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("/L%o~18", "vsECq=Sjt{61tT");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("/L%o~18", "/L%o~18");
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
      assertEquals("/L%o~18", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("/L%o~18", "vsECq=Sjt{61tT");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Rs#");
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Pw4AF5O8Z{xY.#t", "Pw4AF5O8Z{xY.#t");
      int int0 = periodFormatterBuilder_PluralAffix0.parse("Pw4AF5O8Z{xY.#t", 0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("Prefix not followed by field", 76);
      assertEquals((-77), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Rf2l4>HIQz+c,7<.7R", "cItCnoU_L]9P");
      int int0 = periodFormatterBuilder_PluralAffix0.scan("Rf2l4>HIQz+c,7<.7R", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("/L%o~18", "/L%o~18");
      int int0 = periodFormatterBuilder_PluralAffix0.scan("gXZMN]?7}M@kYCo[B5K", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("W", "system");
      int int0 = periodFormatterBuilder_PluralAffix0.scan("pwju{,<n?p1e4?", (-3118));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1342, (-2093064), (-2054), true, 3, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = Locale.GERMAN;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", (-2054), locale0);
      assertEquals(2053, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("No field to apply suffix to", (-612));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(629, 0, 778, true, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      Period period0 = Period.days('q');
      Locale locale0 = Locale.ENGLISH;
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(period0, 0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Years years0 = Years.ZERO;
      Locale locale0 = Locale.ITALY;
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength(years0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertNotNull(periodPrinter0);
      
      Days days0 = Days.days(0);
      Locale locale0 = Locale.GERMAN;
      int int0 = periodPrinter0.calculatePrintedLength(days0, locale0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Days days0 = Days.days(0);
      Locale locale0 = Locale.GERMAN;
      int int0 = periodPrinter0.calculatePrintedLength(days0, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMillis((-1045));
      String string0 = period1.toString((PeriodFormatter) null);
      assertEquals("PT-1.045S", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "uRUxc", (String[]) null, periodPrinter0, periodFormatterBuilder_Literal0, false, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      Days days0 = Days.days(0);
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) days0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.forma#.PeriodFormattertuilder$FieldFormatter", "org.joda.time.forma#.PeriodFormattertuilder$FieldFormatter");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      StringWriter stringWriter0 = new StringWriter(0);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(48, 0, 0, false, 48, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Days days0 = Days.days(0);
      Locale locale0 = Locale.GERMAN;
      StringWriter stringWriter0 = new StringWriter();
      periodPrinter0.printTo((Writer) stringWriter0, (ReadablePeriod) days0, locale0);
      assertEquals("0.000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder0.appendHours();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("pcju{,<n?p1e4?", periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pcju{,<n?p1e4?\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 0, 0, false, (-1), periodFormatterBuilder_FieldFormatterArray0, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("F4VfQ<o!JLZYHN6hjn", "F4VfQ<o!JLZYHN6hjn", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("F4VfQ<o!JLZYHN6hjn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("system", "");
      Locale locale0 = new Locale("D$/1E`O2E{7udm");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3, 3, 3, false, 3860, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 3);
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "4;m9JFN", 3, locale0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      periodFormatterBuilder1.appendSeconds();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Period period0 = new Period(4294967295L, 4294967295L);
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(period0, 18, (Locale) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      StringWriter stringWriter0 = new StringWriter(4);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(48, 4, 4, false, 48, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      periodFormatterBuilder1.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toParser();
      Period period0 = Period.weeks((-5));
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("Vc'NIWd8T!:}#{v<-5", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      periodFormatterBuilder0.printZeroIfSupported();
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      Period period0 = new Period(4294967295L, 4294967295L);
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("Vc'NIWd8T!:}#{v<0", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder1.appendSeparatorIfFieldsBefore("k");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      periodFormatterBuilder2.appendMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Period period0 = new Period(4294967295L, 4294967295L);
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("Vc'NIWd8T!:}#{v<", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(629, 0, (-621), false, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      Period period0 = Period.days(0);
      Locale locale0 = Locale.ENGLISH;
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(period0, 629, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      periodFormatterBuilder1.appendMillis();
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Period period0 = new Period(4294967295L, 4294967295L);
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(17, stringBuffer0.length());
      assertEquals("Vc'NIWd8T!:}#{v<0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder0.appendYears();
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Years years0 = Years.ZERO;
      Locale locale0 = Locale.ITALY;
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength(years0, locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder1.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSeparatorIfFieldsBefore("k");
      periodFormatterBuilder1.appendMillis();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      Period period0 = new Period(4294967295L, 4294967295L);
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("Vc'NIWd8T!:}#{v<", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      periodFormatterBuilder1.printZeroRarelyFirst();
      periodFormatterBuilder0.appendYears();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Period period0 = new Period(4294967295L, 4294967295L);
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals(34, stringBuffer0.length());
      assertEquals("Vc'NIWd8T!:}#{v<0Vc'NIWd8T!:}#{v<0", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(629, 0, (-621), false, 0, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      Days days0 = Days.SIX;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 0, 11);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("3`ol]T2w}}dc$o~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3`ol]T2w}}dc$o~\" is malformed at \"`ol]T2w}}dc$o~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Literal", ".bMvU");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-843), (-491), (-491), false, 284, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 11, (PeriodType) null, (Chronology) julianChronology0);
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, 4, 11);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("system", "yH");
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = new Locale("D$/1E`O2E{7udm");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3, 3, 57, false, 3860, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 3);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4;m9JFN";
      stringArray0[1] = "5OYr!TBR]K";
      stringArray0[2] = "millis";
      stringArray0[3] = "D$/1E`O2E{7udm";
      stringArray0[4] = "xj RiHP}uMpYg%u";
      stringArray0[5] = "system";
      stringArray0[6] = "w";
      stringArray0[7] = "w";
      stringArray0[8] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("millis", "w", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_FieldFormatter0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_Literal0);
      int int0 = periodFormatterBuilder_Separator1.parseInto(mutablePeriod0, "millis", 795, locale0);
      assertEquals((-796), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1436), 1435, (-1405), false, (-1108), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", (String) null, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("d8QV{|C^g,jR_G+2", "UuI_mj", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      Days days0 = Days.ZERO;
      Locale locale0 = Locale.CANADA;
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(days0, 0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Builder has created neither a printer nor a parser");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, false, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.CHINA;
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength(months0, locale0);
      assertEquals(258, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Range duration field must be precise");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2665, 1891, 948, false, (-34505881), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(".?FTW?R2;3F4agDs_", "", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_Composite0);
      Weeks weeks0 = Weeks.weeks(1891);
      Locale locale0 = Locale.ITALIAN;
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(weeks0, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("No printer or parser supplied");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No printer or parser supplied", "No printer or parser supplied", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(1023L, 1023L, periodType0);
      Locale locale0 = Locale.ITALIAN;
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(period0, locale0);
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("Vc'NIWd8T!:}#{v<");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toParser();
      Period period0 = new Period(4294967295L, 4294967295L);
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("Vc'NIWd8T!:}#{v<0Vc'NIWd8T!:}#{v<", stringBuffer0.toString());
      assertEquals(33, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Vc'NIWd8T!:}#{v<";
      stringArray0[1] = "_Z~d!R$h/nc/+yznJ";
      stringArray0[2] = "Vc'NIWd8T!:}#{v<";
      stringArray0[3] = "Vc'NIWd8T!:}#{v<";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      stringArray0[4] = "Vc'NIWd8T!:}#{v<";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("Vc'NIWd8T!:}#{v<", "Vc'NIWd8T!:}#{v<", stringArray0);
      periodFormatterBuilder2.appendMinutes();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toParser();
      Period period0 = new Period((-5), (-5), (-5), (-5));
      StringBuffer stringBuffer0 = new StringBuffer("Vc'NIWd8T!:}#{v<");
      Locale locale0 = Locale.US;
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertEquals("Vc'NIWd8T!:}#{v<-005Vc'NIWd8T!:}#{v<-5-5.005", stringBuffer0.toString());
      assertEquals(44, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toParser();
      Period period0 = Period.days(0);
      Locale locale0 = Locale.ENGLISH;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "No field to apply suffix to";
      stringArray0[1] = "7";
      stringArray0[2] = "No field to apply suffix to";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("7", "", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Builder has created neither a printer nor a parser");
      StringWriter stringWriter0 = new StringWriter(4);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, false, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Builder has created neither a printer nor a parser", "Builder has created neither a printer nor a parser", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.CHINA;
      periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) months0, locale0);
      assertEquals("Builder has created neither a printer nor a parser0000Builder has created neither a printer nor a parserBuilder has created neither a printer nor a parserBuilder has created neither a printer nor a parser0000Builder has created neither a printer nor a parser", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.forma#.PeriodFormattertuilder$FieldFormatter", "org.joda.time.forma#.PeriodFormattertuilder$FieldFormatter");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      StringWriter stringWriter0 = new StringWriter(0);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(48, 0, 0, false, 48, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) months0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("No printer or parser supplied");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No printer or parser supplied", "No printer or parser supplied", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(1023L, 1023L, periodType0);
      Locale locale0 = Locale.ITALIAN;
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("No printer or parser suppliedNo printer or parser supplied", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(629, 57, 778, true, 57, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      Locale locale0 = Locale.ENGLISH;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t^m*::#&2<m";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "No field to apply suffix to";
      stringArray0[4] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("t^m*::#&2<m", "No field to apply suffix to", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      MutablePeriod mutablePeriod0 = new MutablePeriod(1223, 0, 57, (-25), 57, 579, 0, 0);
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "Q", (-25), locale0);
      assertEquals((-25), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      stringArray0[1] = "";
      stringArray0[2] = "pcju{,<n?p1e4?";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("pcju{,<n?p1e4?", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "", (-974), (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = new Locale("D$/1E`O2E{7udm");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4;m9JFN";
      stringArray0[1] = "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("o93AsHb:6g^nyXyDT", "yh rihp}umpyg%u", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", (-1), locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("W");
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("3`ol]T2w}}dc$o~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3`ol]T2w}}dc$o~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodType periodType0 = PeriodType.days();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-566L), (-566L), periodType0, gregorianChronology0);
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "T'R>pe^+yw**1hOOM>", 1, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      periodFormatterBuilder1.appendMillis();
      periodFormatterBuilder1.appendMillis3Digit();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("3`ol]T2w}}dc$o~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3`ol]T2w}}dc$o~\" is malformed at \"`ol]T2w}}dc$o~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("SFgAAW6IZjpN(");
      linkedList0.add((Object) periodFormatterBuilder_Literal0);
      linkedList0.add((Object) periodFormatterBuilder0);
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      periodFormatterBuilder1.append(periodFormatter0);
      PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
      assertNotNull(periodParser0);
  }
}
