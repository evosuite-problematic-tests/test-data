/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 10:41:13 GMT 2018
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0, "", "`r$YGdy/%mrBk`K\"2''");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), int0);
      assertEquals("`r$YGdy/%mrBk`K\"2''", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1863.0164), (-1.0));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(simpleHistogramBin0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-585));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week(60, 60);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0, "", "org.jfree.data.xy.XYIntervalDataItem");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("org.jfree.data.xy.XYIntervalDataItem", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "Time", "Time");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1975, 595);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      Date date0 = second0.getEnd();
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      Day day0 = new Day(date0);
      timePeriodValues0.add((TimePeriod) day0, (Number) 59);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      MockDate mockDate0 = new MockDate(3554, 3554, 59);
      Day day0 = new Day(mockDate0, second0.DEFAULT_TIME_ZONE);
      Hour hour0 = new Hour(0, day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfreedatatime.TimePerodValues", "org.jfreedatatime.TimePerodValues", "");
      Hour hour0 = new Hour();
      timePeriodValues0.add((TimePeriod) hour0, (-1.0));
      timePeriodValues0.delete(2234, 675);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "Argument 'd' outside valid range.", "Argument 'd' outside valid range.");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfreedatatimG.TiC#Pe_odValues", "org.jfreedatatimG.TiC#Pe_odValues", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1861, 1861);
      MockDate mockDate0 = new MockDate(675, 675, 0, 29, 1);
      Quarter quarter0 = new Quarter(mockDate0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction("", (-2046));
      boolean boolean0 = timePeriodValues0.equals(styledEditorKit_AlignmentAction0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertFalse(boolean0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1544), 0, 181, 0, (-3302));
      Quarter quarter0 = new Quarter(mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "", "m'MtP!\"P`A/");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues("");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("m'MtP!\"P`A/", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfreedatatime.TimePerodValues", "org.jfreedatatime.TimePerodValues", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 1);
      timePeriodValues1.setDomainDescription("");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfreedatatime.TimePerodValues", "org.jfreedatatime.TimePerodValues", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1, 1);
      timePeriodValues1.setRangeDescription("org.jfreedatatime.TimePerodValues");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("org.jfreedatatime.TimePerodValues", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("org.jfreedatatimG.TiC#Pe_odValues", "org.jfreedatatimG.TiC#Pe_odValues", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1861, 1861);
      MockDate mockDate0 = new MockDate(675, 675, 0, 29, 1);
      Quarter quarter0 = new Quarter(mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 0);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(1, timePeriodValues1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      Object object0 = timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(object0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0, "", "");
      timePeriodValues0.hashCode();
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
  }
}
