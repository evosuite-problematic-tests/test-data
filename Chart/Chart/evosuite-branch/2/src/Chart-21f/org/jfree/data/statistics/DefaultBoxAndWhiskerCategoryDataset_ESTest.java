/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 11:37:57 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.Range;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultBoxAndWhiskerCategoryDataset_ESTest extends DefaultBoxAndWhiskerCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(simpleTimePeriod0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex((Comparable) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getRowKey((-45));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getColumnKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeUpperBound(false);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Object object0 = defaultBoxAndWhiskerCategoryDataset0.clone();
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(object0);
      assertNotSame(object0, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Day day0 = new Day();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) day0, (Comparable) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (Infinity) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (List) arrayList0);
      Second second0 = new Second();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) second0, (Comparable) second0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) double0, (Number) 0, (Number) 59, (Number) 59, (Number) double0, (Number) double0, (Number) double0, (Number) 0, (List) arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) second0, (Comparable) double0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) second0, (Comparable) second0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) day0, (Comparable) week0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(53, number0, (Number) null, week0.LAST_WEEK_IN_YEAR, (Number) null, number0, (Number) null, (Number) null, stack0);
      SerialDate serialDate0 = SerialDate.createInstance(47);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) serialDate0, (Comparable) serialDate0);
      assertEquals(1900, serialDate0.getYYYY());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 4923.8, 1.5, 1.7976931348623157E308, 1.50666765076237, 1.5, 1.7976931348623157E308, (List) linkedList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) mockDate0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((double) 0, 1.5, 0.0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) mockDate0, (Comparable) day0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 0.0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (List) arrayList0);
      Second second0 = new Second();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue(0, 0);
      assertEquals((-748.2002300103517), number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) day0, (Comparable) week0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) double0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) day0, (Comparable) double0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, (double) 0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) day0, (Comparable) week0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getValue(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMedianValue(1, 1);
      assertEquals((-750.0), number0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getValue((Comparable) day0, (Comparable) day0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, (double) 0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) mockDate0, (Comparable) day0);
      assertEquals(1.5, number0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, (double) 0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value(1, 1);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) mockDate0, (Comparable) week0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Double double0 = new Double((-750.0));
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) double0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ3Value(1, 2);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ3Value(1, 1);
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) mockDate0, (Comparable) week0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) mockDate0, (Comparable) day0);
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue(0, 1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-750.0), (-750.0), (-750.0), (-750.0), (-750.0), (-750.0), (-750.0), (-750.0), (List) arrayList0);
      Second second0 = new Second();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue(0, 0);
      assertEquals((-750.0), number0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 0.0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) day0, (Comparable) day0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 4923.8, 1.5, 1.7976931348623157E308, 1.50666765076237, 1.5, 1.7976931348623157E308, (List) linkedList0);
      Day day0 = new Day();
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) day0, (Comparable) week0);
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), 1.5, (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue(1, 1);
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) day0, (Comparable) week0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) double0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) day0, (Comparable) double0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 4923.8, 1.5, 1.7976931348623157E308, 1.50666765076237, 1.5, 1.7976931348623157E308, (List) linkedList0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) mockDate0, (Comparable) day0);
      assertEquals(1.50666765076237, number0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, (double) 0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 0.0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier(0, 0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 0.0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) day0, (Comparable) day0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier(0, 1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier(0, 0);
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) mockDate0, (Comparable) week0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 0.0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) mockDate0, (Comparable) day0);
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, 0.0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers(0, 1);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, 1.5, (double) 0, 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers(1, 1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-750L));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) (-750L), (double) (-750L), (double) (-750L), 1.7976931348623157E308, (double) 0, 1.7976931348623157E308, 0.0, 1.7976931348623157E308, (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers((Comparable) mockDate0, (Comparable) week0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (-748.2002300103517), (List) arrayList0);
      Second second0 = new Second();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers((Comparable) second0, (Comparable) second0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Short short0 = new Short((short)1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(short0, short0, short0, short0, short0, (Number) null, short0, short0, arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) short0, (Comparable) short0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(short0, short0, (Number) null, (Number) null, short0, short0, (Number) null, short0, arrayList0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) short0, (Comparable) short0);
      assertEquals(1, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (List) stack0);
      Day day0 = new Day();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((double) 0, (double) 0, (double) 0, (double) 0, (double) 0, (double) 0, 1.5, (double) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) day0);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) day0, (Comparable) week0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) mockDate0, (Comparable) day0);
      assertNotSame(boxAndWhiskerItem1, boxAndWhiskerItem0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-30), (-30), (-30));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      Float float0 = new Float((-1002.423499641));
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) float0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) mockDate0, (Comparable) float0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((double) (-30), (double) (-30), (double) (-30), (double) (-30), (double) (-30), (double) (-30), (double) (-30), (double) (-30), (List) stack0);
      Day day0 = new Day();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) mockDate0, (Comparable) day0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) mockDate0, (Comparable) day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Float float0 = new Float((-1002.423499641));
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(float0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
  }
}
