/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 07:12:20 GMT 2019
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.time.chrono.ChronoLocalDate;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.KeyedObjects2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultBoxAndWhiskerCategoryDataset_ESTest extends DefaultBoxAndWhiskerCategoryDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Millisecond millisecond0 = new Millisecond();
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(millisecond0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getRowKey((-2632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getValue((Comparable) second0, (Comparable) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (Fri Feb 14 20:21:21 GMT 2014) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getValue(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getColumnKey((-792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      double double0 = defaultBoxAndWhiskerCategoryDataset0.getRangeUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Object object0 = defaultBoxAndWhiskerCategoryDataset0.clone();
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(object0);
      assertNotSame(object0, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (List) linkedList0);
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) minute0, (Comparable) minute0);
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) double0, (Comparable) double0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      LinkedList<Dialog.ModalityType> linkedList0 = new LinkedList<Dialog.ModalityType>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) linkedList0);
      MockDate mockDate0 = new MockDate(1, 1, 92, 1, (-1), 1);
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      Hour hour0 = new Hour(mockDate0, zoneInfo0);
      Minute minute0 = new Minute(92, hour0);
      Day day0 = minute0.getDay();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) integer0, (Comparable) day0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((-347.3), (-347.3), (-347.3), (-347.3), (-347.3), (-347.3), (-347.3), (-347.3), (List) linkedList1);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) minute0, (Comparable) minute0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) minute0, (Comparable) minute0);
      assertEquals(2, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, vector0);
      Year year0 = new Year();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) year0, (Comparable) year0);
      assertEquals(2014L, year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<KeyedObjects2D> vector0 = new Vector<KeyedObjects2D>();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 214.598820377, (-1.0), 2653.9861710425535, (-3043.8718402289), 214.598820377);
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2401), 2653.9861710425535, 3679.982962242975, 0L, (-294.2907953));
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("jR 3es( cqvkdjjL", oHLCDataItemArray0);
      Number number0 = defaultOHLCDataset0.getOpen((-2401), 2);
      Float float0 = new Float((-1.0));
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number0, number0, float0, vector0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) oHLCDataItemArray0[1], (Comparable) oHLCDataItem0);
      Year year0 = new Year();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((-3249.45586057), (-3249.45586057), (-3249.45586057), (-1819.41647), 0.0, (-1164.5314922906), (-4860.1213), 0.0, (List) vector0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem1, (Comparable) year0, (Comparable) "jR 3es( cqvkdjjL");
      assertEquals(2014L, year0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) double0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue(0, 1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue(0, 0);
      assertEquals((-322.729613), number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) regularTimePeriod0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) double0, (Comparable) fixedMillisecond0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) fixedMillisecond0);
      Double double1 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) double0, (Comparable) fixedMillisecond0);
      assertEquals((-322.729613), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) regularTimePeriod0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMedianValue(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) fixedMillisecond0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMedianValue(0, 0);
      assertEquals((-322.729613), number0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2654.2066, (-322.729613), 2654.2066, (-322.729613), 2654.2066, 2654.2066, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) minute0, (Comparable) minute0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) regularTimePeriod0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 59, (Number) 0, (Number) 59, (Number) 0, (Number) 59, (Number) 59, (Number) 0, (Number) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      Integer integer0 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMedianValue((Comparable) second0, (Comparable) second0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) integer0, (Comparable) integer0);
      Integer integer1 = (Integer)defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) second0.FIRST_SECOND_IN_MINUTE, (Comparable) second0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 59, (Number) 0, (Number) 59, (Number) 0, (Number) 59, (Number) 59, (Number) 0, (Number) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0.LAST_SECOND_IN_MINUTE, (Comparable) second0.FIRST_SECOND_IN_MINUTE);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value(0, 1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Vector<KeyedObjects2D> vector0 = new Vector<KeyedObjects2D>();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate(0L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 214.598820377, (-1.0), 2653.9861710425535, (-3043.8718402289), 214.598820377);
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2401), 2653.9861710425535, 3679.982962242975, 0L, (-294.2907953));
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("jR 3es( cqvkdjjL", oHLCDataItemArray0);
      Number number0 = defaultOHLCDataset0.getOpen((-2401), 2);
      Float float0 = new Float((-1.0));
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(number0, number0, number0, number0, number0, number0, number0, float0, vector0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) oHLCDataItemArray0[1], (Comparable) oHLCDataItem0);
      Number number1 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value(0, 0);
      assertEquals((-2401.0), number1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) double0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) minute0, (Comparable) double0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 59, (Number) 0, (Number) 59, (Number) 0, (Number) 59, (Number) 59, (Number) 0, (Number) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ1Value((Comparable) second0, (Comparable) second0);
      assertEquals(59, number0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) regularTimePeriod0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ3Value(1, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) fixedMillisecond0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ3Value(0, 0);
      assertEquals((-322.729613), number0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) fixedMillisecond0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getQ3Value((Comparable) double0, (Comparable) minute0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (List) linkedList0);
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue(0, 0);
      assertEquals((-322.73), number0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2654.2066, (-322.729613), 2654.2066, (-322.729613), 2654.2066, 2654.2066, (List) linkedList0);
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((Comparable) minute0, (Comparable) minute0);
      assertEquals(2654.2066, number0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 59, (Number) 0, (Number) 59, (Number) 0, (Number) 59, (Number) 59, (Number) 0, (Number) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      defaultBoxAndWhiskerCategoryDataset0.add((BoxAndWhiskerItem) null, (Comparable) second0, (Comparable) second0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue(0, 0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 59, (Number) 0, (Number) 59, (Number) 0, (Number) 59, (Number) 59, (Number) 0, (Number) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue(0, 0);
      assertEquals(59, number0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) minute0, (Comparable) minute0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) fixedMillisecond0);
      Double double1 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) double0, (Comparable) minute0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) fixedMillisecond0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxRegularValue((Comparable) double0, (Comparable) fixedMillisecond0);
      assertEquals((-322.73), number0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 59, (Number) 0, (Number) 59, (Number) 0, (Number) 59, (Number) 59, (Number) 0, (Number) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0.LAST_SECOND_IN_MINUTE, (Comparable) second0.FIRST_SECOND_IN_MINUTE);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier(0, 1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMinOutlier(0, 0);
      assertEquals(2653.9861710425535, number0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (-347.2554058565794), (List) linkedList0);
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) minute0, (Comparable) minute0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) double0);
      Double double1 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) double0, (Comparable) minute0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, (-322.729613), 2653.9861710425535, 2653.9861710425535, (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) regularTimePeriod0, (Comparable) fixedMillisecond0);
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) regularTimePeriod0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier(0, 1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) 59, (Number) 0, (Number) 59, (Number) 0, (Number) 59, (Number) 59, (Number) 0, (Number) 0, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier(0, 0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (-348.82579854756705), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMinOutlier((Comparable) minute0, (Comparable) minute0);
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) double0, (Comparable) double0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) fixedMillisecond0);
      Double double1 = (Double)defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) double0, (Comparable) fixedMillisecond0);
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      Number number0 = defaultBoxAndWhiskerCategoryDataset0.getMaxOutlier((Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      assertEquals((-322.729613), number0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (-322.73), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      Minute minute0 = new Minute();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) minute0, (Comparable) minute0);
      Double double0 = new Double(0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) fixedMillisecond0);
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers(0, 1);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (-322.729613), (List) linkedList0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Second second0 = new Second();
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, (double) 0, (-689.569), 0.0, 0.0, (double) (-113), (-1.0), (List) vector0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) second0, (Comparable) second0);
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getOutliers((Comparable) second0, (Comparable) second0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 59, (double) 59, (double) 0, (double) 0, (double) 59, (double) 59, (double) 67, (double) 67, (List) stack0);
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(boxAndWhiskerItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      boolean boolean0 = defaultBoxAndWhiskerCategoryDataset0.equals(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
  }
}
