/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 10:11:37 GMT 2018
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.BatchUpdateException;
import java.sql.SQLRecoverableException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.IsNot;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.MockitoDebugger;
import org.mockito.internal.verification.api.VerificationMode;
import org.mockito.stubbing.Answer;
import org.mockito.stubbing.ClonesArguments;
import org.mockito.stubbing.Stubber;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Mockito_ESTest extends Mockito_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Mockito.mock(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stubber stubber0 = Mockito.doNothing();
      assertNotNull(stubber0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VerificationMode verificationMode0 = Mockito.only();
      assertNotNull(verificationMode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.when("|/ReR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        Mockito.verifyZeroInteractions(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.reset((Matcher<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.MockitoCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stubber stubber0 = Mockito.doCallRealMethod();
      assertNotNull(stubber0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Mockito.mock(class0, "J@YyOqP4R=R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockitoDebugger mockitoDebugger0 = Mockito.debug();
      assertNotNull(mockitoDebugger0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VerificationMode verificationMode0 = Mockito.never();
      assertNotNull(verificationMode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.inOrder((Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.spy("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClonesArguments clonesArguments0 = new ClonesArguments();
      // Undeclared exception!
      try { 
        Mockito.mock(class0, (Answer) clonesArguments0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Mockito mockito0 = new Mockito();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Answer<Object> answer0 = Mockito.CALLS_REAL_METHODS;
      Stubber stubber0 = Mockito.doAnswer(answer0);
      assertNotNull(stubber0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.atMost((-479));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matcher<Object> matcher0 = IsNot.not((Object) null);
      CombinableMatcher<Integer> combinableMatcher0 = new CombinableMatcher<Integer>(matcher0);
      // Undeclared exception!
      try { 
        Mockito.stubVoid((Matcher<Integer>) combinableMatcher0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(41);
      // Undeclared exception!
      try { 
        Mockito.stub(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Mockito.verifyNoMoreInteractions(objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VerificationMode verificationMode0 = Mockito.atLeastOnce();
      assertNotNull(verificationMode0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VerificationMode verificationMode0 = Mockito.atLeast(0);
      assertNotNull(verificationMode0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stubber stubber0 = Mockito.doReturn((Object) null);
      assertNotNull(stubber0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.verify((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Mockito.validateMockitoUsage();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.mockito.Mockito", "", intArray0, sQLRecoverableException0);
      Stubber stubber0 = Mockito.doThrow(batchUpdateException0);
      assertNotNull(stubber0);
  }
}
