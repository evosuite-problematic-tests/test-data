/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 18:47:39 GMT 2019
 */

package org.mockito.internal.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.creation.MethodInterceptorFilter;
import org.mockito.internal.creation.MockSettingsImpl;
import org.mockito.internal.util.MockCreationValidator;
import org.mockito.internal.util.MockUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MockUtil_ESTest extends MockUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
      MockUtil mockUtil0 = new MockUtil();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        mockUtil0.createMock(class0, mockSettingsImpl0);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
         //
         verifyException("org.mockito.cglib.proxy.Enhancer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockCreationValidator mockCreationValidator0 = new MockCreationValidator();
      MockUtil mockUtil0 = new MockUtil(mockCreationValidator0);
      // Undeclared exception!
      try { 
        mockUtil0.getMockName(mockCreationValidator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockCreationValidator mockCreationValidator0 = new MockCreationValidator();
      MockUtil mockUtil0 = new MockUtil(mockCreationValidator0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mockUtil0.resetMock(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
      MockSettingsImpl mockSettingsImpl1 = (MockSettingsImpl)mockSettingsImpl0.serializable();
      MockUtil mockUtil0 = new MockUtil();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        mockUtil0.createMock(class0, mockSettingsImpl1);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
         //
         verifyException("org.mockito.cglib.proxy.Enhancer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
      MockSettingsImpl mockSettingsImpl1 = (MockSettingsImpl)mockSettingsImpl0.serializable();
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 8);
      Class<Annotation> class0 = Annotation.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = classArray0[0];
      classArray0[3] = class0;
      classArray0[4] = classArray0[0];
      classArray0[5] = classArray0[3];
      classArray0[6] = classArray0[5];
      classArray0[7] = classArray0[5];
      mockSettingsImpl1.extraInterfaces(classArray0);
      MockUtil mockUtil0 = new MockUtil();
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        mockUtil0.createMock(class1, mockSettingsImpl1);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
         //
         verifyException("org.mockito.cglib.proxy.Enhancer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockUtil mockUtil0 = new MockUtil();
      MockSettingsImpl mockSettingsImpl0 = new MockSettingsImpl();
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 3);
      Class<Annotation> class0 = Annotation.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      classArray0[2] = classArray0[1];
      mockSettingsImpl0.extraInterfaces(classArray0);
      Class<MethodInterceptorFilter> class1 = MethodInterceptorFilter.class;
      // Undeclared exception!
      try { 
        mockUtil0.createMock(class1, mockSettingsImpl0);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected non-static field org.mockito.cglib.proxy.Enhancer.serialVersionUID
         //
         verifyException("org.mockito.cglib.proxy.Enhancer", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockUtil mockUtil0 = new MockUtil();
      // Undeclared exception!
      try { 
        mockUtil0.getMockHandler((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockUtil mockUtil0 = new MockUtil();
      boolean boolean0 = mockUtil0.isMock((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockUtil mockUtil0 = new MockUtil();
      Integer integer0 = Integer.valueOf(1304);
      boolean boolean0 = mockUtil0.isMock(integer0);
      assertFalse(boolean0);
  }
}
