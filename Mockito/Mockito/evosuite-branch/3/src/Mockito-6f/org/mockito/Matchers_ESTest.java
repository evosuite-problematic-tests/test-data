/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 17:45:41 GMT 2019
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.SelfDescribing;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.beans.HasPropertyWithValue;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AnyOf;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNot;
import org.junit.runner.RunWith;
import org.mockito.Matchers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matchers_ESTest extends Matchers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(1947.1);
      Matcher<Double> matcher0 = IsEqual.equalTo(double0);
      IsNot<Double> isNot0 = new IsNot<Double>(matcher0);
      HasPropertyWithValue<Float> hasPropertyWithValue0 = new HasPropertyWithValue<Float>("", isNot0);
      float float0 = Matchers.floatThat(hasPropertyWithValue0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SelfDescribing selfDescribing0 = Matchers.argThat((Matcher<SelfDescribing>) null);
      assertNull(selfDescribing0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      Set<String> set0 = Matchers.anySetOf(class0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = Matchers.isNotNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char char0 = Matchers.eq('#');
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Matchers.booleanThat((Matcher<Boolean>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(1316.4934735020563);
      Matcher<Double> matcher0 = IsNot.not(double0);
      double double1 = Matchers.doubleThat(matcher0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = Matchers.isNotNull(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Matchers.eq((-301));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matcher<Integer> matcher0 = HasProperty.hasProperty("");
      int int0 = Matchers.intThat(matcher0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte byte0 = Matchers.byteThat((Matcher<Byte>) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Long> vector0 = new Vector<Long>();
      Matcher<Long> matcher0 = IsIn.isIn((Collection<Long>) vector0);
      long long0 = Matchers.longThat(matcher0);
      assertFalse(vector0.contains(long0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Double> class1 = Double.class;
      Map<Character, Double> map0 = Matchers.anyMapOf(class0, class1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = Matchers.isNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char char0 = Matchers.anyChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Float float0 = Matchers.any(class0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = Matchers.endsWith("w+j[/~9");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Collection<Byte> collection0 = Matchers.anyCollectionOf(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = Matchers.contains("5|wbp");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Matchers.startsWith("\"^IKz8K9}1GN`8q}Ln");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Matchers.anyString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short short0 = Matchers.eq((short) (-4745));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double double0 = new Double(1.0);
      String[] stringArray0 = new String[0];
      Object object0 = Matchers.refEq((Object) double0, stringArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = Matchers.anyVararg();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matcher<Short> matcher0 = Is.is((Short) null);
      AnyOf<Short> anyOf0 = AnyOf.anyOf(matcher0, (Matcher<? super Short>) matcher0);
      short short0 = Matchers.shortThat(anyOf0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = Matchers.anyObject();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = Matchers.eq((byte)116);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = Matchers.anyInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = Matchers.isA(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Matcher<Character> matcher0 = IsIn.isIn(characterArray0);
      char char0 = Matchers.charThat(matcher0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte byte0 = Matchers.anyByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = Matchers.same(short0);
      assertTrue(short1.equals((Object)short0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = Matchers.matches("vV[W2}S&MmHHf*:f");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float float0 = Matchers.eq((float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Long> linkedList1 = Matchers.eq(linkedList0);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = Matchers.anyLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = Matchers.eq((-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      short short0 = Matchers.anyShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = Matchers.anyBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float float0 = Matchers.anyFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = Matchers.anyDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = Matchers.eq((-2175L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Short> list0 = Matchers.anyListOf(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Byte byte0 = Matchers.any();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = Matchers.isNull(class0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Matchers matchers0 = new Matchers();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = Matchers.eq(true);
      assertFalse(boolean0);
  }
}
