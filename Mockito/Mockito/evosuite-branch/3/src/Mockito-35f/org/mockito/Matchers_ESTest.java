/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 19:00:53 GMT 2019
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.hamcrest.beans.HasProperty;
import org.hamcrest.collection.IsIn;
import org.hamcrest.core.AllOf;
import org.hamcrest.core.CombinableMatcher;
import org.hamcrest.core.Is;
import org.hamcrest.core.IsAnything;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;
import org.hamcrest.number.OrderingComparison;
import org.junit.runner.RunWith;
import org.mockito.Matchers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matchers_ESTest extends Matchers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matcher<Float> matcher0 = HasProperty.hasProperty("org.mockito.Matchers");
      float float0 = Matchers.floatThat(matcher0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IsAnything<Object> isAnything0 = new IsAnything<Object>();
      Object object0 = Matchers.argThat((Matcher<Object>) isAnything0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = Matchers.isNotNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<RoundingMode> class0 = RoundingMode.class;
      Set<RoundingMode> set0 = Matchers.anySetOf(class0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char char0 = Matchers.eq('F');
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Matcher<Boolean> matcher0 = OrderingComparison.lessThanOrEqualTo(boolean0);
      boolean boolean1 = Matchers.booleanThat(matcher0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(654.26259);
      IsEqual<Double> isEqual0 = new IsEqual<Double>(double0);
      double double1 = Matchers.doubleThat(isEqual0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = Matchers.eq((-3902));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Matcher<Integer> matcher0 = Is.isA(class0);
      int int0 = Matchers.intThat(matcher0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Matcher<Byte> matcher0 = OrderingComparison.greaterThanOrEqualTo(byte0);
      CombinableMatcher<Byte> combinableMatcher0 = new CombinableMatcher<Byte>(matcher0);
      byte byte1 = Matchers.byteThat(combinableMatcher0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Matcher<Long> matcher0 = Is.isA(class0);
      long long0 = Matchers.longThat(matcher0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = Matchers.isNull();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char char0 = Matchers.anyChar();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Matchers.any(class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = Matchers.endsWith("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Collection<Boolean> collection0 = Matchers.anyCollectionOf(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = Matchers.contains("ld\"c.L+=()");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Collection collection0 = Matchers.anyCollection();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Map map0 = Matchers.anyMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Matchers.startsWith(";}.4@\"*K]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Matchers.anyString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short short0 = Matchers.eq((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[4];
      Long long1 = Matchers.refEq(long0, stringArray0);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Double double0 = Matchers.anyVararg();
      // Undeclared exception!
      try { 
        Matchers.same(double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.Matchers", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IsNull<Object> isNull0 = new IsNull<Object>();
      Matcher<Short> matcher0 = AllOf.allOf((Matcher<? super Short>) isNull0, (Matcher<? super Short>) isNull0, (Matcher<? super Short>) isNull0, (Matcher<? super Short>) isNull0);
      short short0 = Matchers.shortThat(matcher0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte byte0 = Matchers.eq((byte) (-87));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = Matchers.anyInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = Matchers.isA(class0);
      assertEquals((short)0, (short)short0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<Character> stack0 = new Stack<Character>();
      IsIn<Character> isIn0 = new IsIn<Character>(stack0);
      char char0 = Matchers.charThat(isIn0);
      assertFalse(stack0.contains(char0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = Matchers.anyByte();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = Matchers.matches("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float float0 = Matchers.eq(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = Matchers.eq("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = Matchers.anyLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = Matchers.eq(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      short short0 = Matchers.anyShort();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = Matchers.anyBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float float0 = Matchers.anyFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = Matchers.anyDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = Matchers.eq(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Set set0 = Matchers.anySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      List<Boolean> list0 = Matchers.anyListOf(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      List list0 = Matchers.anyList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Long long0 = Matchers.any();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Matchers matchers0 = new Matchers();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = Matchers.eq(false);
      assertFalse(boolean0);
  }
}
