* EvoSuite 1.0.6
* Going to generate test cases for class: com.google.javascript.jscomp.parsing.IRFactory
* Starting client
* Connecting to master process on port 19758
* Analyzing classpath: 
  - /tmp/run_evosuite.pl_231405_1546678057/build/classes
  - /tmp/run_evosuite.pl_231405_1546678057/lib/args4j.jar
  - /tmp/run_evosuite.pl_231405_1546678057/lib/guava.jar
  - /tmp/run_evosuite.pl_231405_1546678057/lib/json.jar
  - /tmp/run_evosuite.pl_231405_1546678057/lib/jsr305.jar
  - /tmp/run_evosuite.pl_231405_1546678057/lib/protobuf-java.jar
  - /tmp/run_evosuite.pl_231405_1546678057/build/lib/rhino.jar
  - /tmp/run_evosuite.pl_231405_1546678057/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.parsing.IRFactory
* Test criterion:
  - Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 564
* Using seed 4000
* Starting evolution
[MASTER] 00:47:51.188 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 00:47:58.140 [logback-2] ERROR FunctionalMockStatement - IAE on <public abstract boolean com.google.javascript.rhino.head.ast.NodeVisitor.visit(com.google.javascript.rhino.head.ast.AstNode)> when called with [[]]
[MASTER] 00:47:58.242 [logback-2] ERROR FunctionalMockStatement - Cannot use Mockito on interface java.util.function.Consumer due to IAE: 
Misplaced or misused argument matcher detected here:

-> at org.evosuite.testcase.fm.MethodDescriptor.executeMatcher(MethodDescriptor.java:245)

You cannot use argument matchers outside of verification or stubbing.
Examples of correct usage of argument matchers:
    when(mock.get(anyInt())).thenReturn(null);
    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());
    verify(mock).someMethod(contains("foo"))

This message may appear after an NullPointerException if the last matcher is returning an object 
like any() but the stubbed method signature expect a primitive argument, in this case,
use primitive alternatives.
    when(mock.get(any())); // bad use, will raise NPE
    when(mock.get(anyInt())); // correct usage use

Also, this error might show up because you use argument matchers with methods that cannot be mocked.
Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().
Mocking methods declared on non-public parent classes is not supported.

[MASTER] 00:47:58.307 [logback-2] ERROR FunctionalMockStatement - IAE on <public abstract boolean com.google.javascript.rhino.head.ast.NodeVisitor.visit(com.google.javascript.rhino.head.ast.AstNode)> when called with [[]]
[MASTER] 00:47:58.304 [logback-1] WARN  TestUsageChecker - class com.google.javascript.rhino.head.ContextFactory$1GlobalSetterImpl looks like an anonymous class, ignoring it (although reflection says false) GlobalSetterImpl
[MASTER] 00:48:10.872 [logback-2] ERROR FunctionalMockStatement - IAE on <public abstract boolean com.google.javascript.rhino.head.ast.NodeVisitor.visit(com.google.javascript.rhino.head.ast.AstNode)> when called with [[]]
[MASTER] 00:48:40.635 [logback-2] ERROR FunctionalMockStatement - IAE on <public abstract boolean com.google.javascript.rhino.head.ast.NodeVisitor.visit(com.google.javascript.rhino.head.ast.AstNode)> when called with [[]]
[MASTER] 00:48:44.994 [logback-2] ERROR FunctionalMockStatement - IAE on <public abstract boolean com.google.javascript.rhino.head.ast.NodeVisitor.visit(com.google.javascript.rhino.head.ast.AstNode)> when called with [[]]
[MASTER] 00:48:45.000 [logback-2] ERROR FunctionalMockStatement - Cannot use Mockito on interface com.google.javascript.rhino.head.ast.NodeVisitor due to IAE: 
Misplaced or misused argument matcher detected here:

-> at org.evosuite.testcase.fm.MethodDescriptor.executeMatcher(MethodDescriptor.java:245)

You cannot use argument matchers outside of verification or stubbing.
Examples of correct usage of argument matchers:
    when(mock.get(anyInt())).thenReturn(null);
    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());
    verify(mock).someMethod(contains("foo"))

This message may appear after an NullPointerException if the last matcher is returning an object 
like any() but the stubbed method signature expect a primitive argument, in this case,
use primitive alternatives.
    when(mock.get(any())); // bad use, will raise NPE
    when(mock.get(anyInt())); // correct usage use

Also, this error might show up because you use argument matchers with methods that cannot be mocked.
Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().
Mocking methods declared on non-public parent classes is not supported.

* Search finished after 101s and 1048 generations, 480057 statements, best individual has fitness: 309.3270745307527
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 45%
* Total number of goals: 564
* Number of covered goals: 253
* Generated 29 tests with total length 264
* Resulting test suite's coverage: 45%
* Generating assertions
* Resulting test suite's mutation score: 3%
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 12
* Writing JUnit test case 'IRFactory_ESTest' to evosuite-branch
* Done!

* Computation finished
