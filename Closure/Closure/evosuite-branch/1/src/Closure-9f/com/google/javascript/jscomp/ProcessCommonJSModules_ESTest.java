/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 06:57:19 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "KyF3W;T");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "require", "require");
      processCommonJSModules0.process(node0, node0);
      processCommonJSModules0.process(node0, node0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "KyF3W;T");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "KyF3W;T");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module.exports", "");
      processCommonJSModules0.process(node0, node0);
      assertEquals(0, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "../");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./", "vOBqdhHoLB4");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("checkControlStructures", "checkControlStructures");
      assertEquals("module$checkControlStructures", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../com.google.javascript.jscomp.ProcessCommonJSModules$1", "../com.google.javascript.jscomp.ProcessCommonJSModules$1");
      assertEquals("module$..$..$com.google.javascript.jscomp.ProcessCommonJSModules$1", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module$checkControlStructures", false);
      SourceFile sourceFile0 = SourceFile.fromFile("^]d'U'N:ds<bm!'");
      Node node0 = compiler0.parse(sourceFile0);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
