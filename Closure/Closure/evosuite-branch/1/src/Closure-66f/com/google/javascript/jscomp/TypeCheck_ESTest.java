/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 09:06:29 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(35, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("JSC_BAD_TYPE_FOR_BIT_OPERATION", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TypeCheck typeCheck0 = null;
      try {
        typeCheck0 = new TypeCheck((AbstractCompiler) null, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("sTJ/[gSWu}$", "sTJ/[gSWu}$");
      Node node1 = new Node(2, node0, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, (ScopeCreator) null, checkLevel0, compilerOptions0.checkMethods);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("f slg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("f slg", "f slg");
      Node node1 = new Node(48, node0, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.processForTesting((Node) null, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("s/[gSWu$", "s/[gSWu$");
      Node node1 = new Node(2, node0, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("sTJ/[gSWu}$", "sTJ/[gSWu}$");
      Node node1 = new Node(17, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TPE_FOR_BIT_OPER6TIO@");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TPE_FOR_BIT_OPER6TIO@", "JSC_BAD_TPE_FOR_BIT_OPER6TIO@");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(105, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        typeCheck0.shouldTraverse(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("f slg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("f slg", "f slg");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      node0.addSuppression(objectType0.NOT_A_CLASS);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(4, node0, node0, node0, 0, (-2));
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("JSC_BAD_TYPE_FOR_BIT_OPERATION", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("f slg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("f slg", "f slg");
      Node node0 = Node.newString(5, "f slg");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(6, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("JSC_BAD_TYPE_FOR_BIT_OPERATION", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(8, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("JSC_BAD_TYPE_FOR_BIT_OPERATION", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(9, "@XZ<+::r&0/l#LZd", 6, 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(12, node0, node0, node0, node0, 23, 24);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("JSC_BAD_TYPE_FOR_BIT_OPERATION", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node0 = Node.newString(14, "0SC_BAD_TYPE_FOR_BIT_OPERATIO", 36, 49);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("f slg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("f slg", "f slg");
      Node node0 = new Node(15, 6, 7);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node1 = new Node(16, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("sTJ/[gSWu}$", "sTJ/[gSWu}$");
      Node node1 = new Node(17, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.processForTesting(node0, node0);
      typeCheck0.check(node1, false);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(18, node0, 25, 43);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = new Node(19);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(20, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("JSC_BAD_TYPE_FOR_BIT_OPERATION", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(23, "@XZ<+::r&0/l#LZd", 6, 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("mCg.no.paren.arg", "mCg.no.paren.arg");
      Node node1 = new Node(28, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(29, "@XZ<+::r&0/l#LZd", 6, 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node0 = new Node(30, 0, 22);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("9v=HlH=zHg6iM");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("9v=HlH=zHg6iM", "9v=HlH=zHg6iM");
      Node node1 = new Node(31, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("752");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("752", "752");
      Node node1 = new Node(32, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("752", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(34, node0, node0, node0, 5, 31);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node0 = new Node(41, 12, 16);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.no.paren.arg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(42, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      node0.setType(43);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node0 = Node.newString(45, "uhOmc", 48, 2);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node1 = new Node(46, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("JSC_BAD_TYPE_FOR_BIT_OPERATION", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Node node0 = Node.newString(47, "uL$-hOmc");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(31, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("f slg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("f slg", "f slg");
      Node node1 = new Node(48, node0, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node1 = new Node(50, node0, 24, 41);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node1);
      assertEquals("msg.no.paren.arg", nodeTraversal0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.no.paren.arg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(60, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(64, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TPE_FOR_BIT_OPER6TIO@");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TPE_FOR_BIT_OPER6TIO@", "JSC_BAD_TPE_FOR_BIT_OPER6TIO@");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0, (SyntacticScopeCreator.RedeclarationHandler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(95, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(99, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(100, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(112, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.no.paren.arg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(114, "msg.no.paren.arg", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.no.paren.arg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(115, "msg.no.paren.arg", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.no.paren.arg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(119, "@XZ<+::r&0/l#LZd", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.traverse(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.no.paren.arg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      Node node0 = Node.newString(129, "msg.no.paren.arg", (-1531), 12);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("s/[gSWu$", "s/[gSWu$");
      Node node1 = new Node(2, node0, node0, node0, node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.processForTesting(node0, node0);
      typeCheck0.check(node1, true);
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      node0.setType(27);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TPE_FOR_BIT_OPER6TIO@");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("JSC_BAD_TPE_FOR_BIT_OPER6TIO@", "JSC_BAD_TPE_FOR_BIT_OPER6TIO@");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0, (SyntacticScopeCreator.RedeclarationHandler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("msg.no.paren.arg");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("msg.no.paren.arg", "msg.no.paren.arg");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.reportMissingProperties(false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      nodeTraversal0.traverse(node0);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSC_BAD_TYPE_FOR_BIT_OPERATION");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("JSC_BAD_TYPE_FOR_BIT_OPERATION", "JSC_BAD_TYPE_FOR_BIT_OPERATION");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }
}
