/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 07:29:36 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(26, " Start ", 26, 26);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 27, (-30));
      Node node1 = new Node(27, node0, node0, node0, 16, 29);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(28, "com.google.javascript.jscomp.TypedScopeCreat3r$FirytOrderFunctionAnalyzer");
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("m})~!js5R]FU{Lwx", 122, 45);
      Node node1 = new Node(32, node0, 37, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(122, "m})~!js5R]FU{Lwx", 66, 66);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      jSTypeArray0[0] = jSType0;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isDefaultCase());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 14, (-30));
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(14, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      jSTypeArray0[0] = jSType0;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(48, "Not declared as a type name");
      Node node2 = new Node(15, node0, node1, 2, 4095);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(16, nodeArray0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node1);
      peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node1.hasOneChild());
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString((-30), "<O");
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(22, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(22, node3.getType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(8298);
      nodeArray0[0] = node0;
      Node node1 = new Node(25, nodeArray0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node2.getChildCount());
      assertSame(node1, node3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(31, nodeArray0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node1);
      peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node2.getChildCount());
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 34, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(34, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[2];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      jSTypeArray0[0] = jSType0;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = Node.newString(48, "Not declared as a type name");
      Node node2 = new Node(35, node1, node0, node0, 51, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.isGetElem());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(78, 78, 78);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = new Node(30);
      Node node2 = new Node(36, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isTrue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((-1622.6633247), 39, 770);
      nodeArray0[0] = node0;
      Node node1 = new Node((-1000));
      nodeArray0[1] = node1;
      Node node2 = new Node(39, nodeArray0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("qVBC*dc+O", 70, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(40, node1, node0, 16, 40);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 42, (-30));
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(42, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qmBC*dc+O", 43, 43);
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(43, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isThis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 44, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(44, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDelProp());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(45, node0, 1, 35);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      node1.addChildBefore(node2, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      Node node1 = new Node(46, node0, node0, node0, node0, (-2165), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      node1.addChildBefore(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      jSTypeArray0[0] = jSType0;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(37, 52, 36);
      Node node2 = new Node(47, node0, node1, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 14, 1);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(48, node0, node1, 12, 50);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(36, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString((-30), "qVBC*dc+O", 14, 14);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(14, node0, node1, node1, 16, 29);
      node2.setType(51);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("qVBC*dc+O", 52, 52);
      Node node1 = new Node(31, 30, 38);
      Node node2 = new Node(52, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[2];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      jSTypeArray0[0] = jSType0;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.setType(53);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isSetterDef());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("qVBC*dc+O", 54, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(54, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("VBC*dc+O", 55, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(55, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isTrue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(56, nodeArray0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node1);
      peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.hasOneChild());
      assertTrue(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((-1622.6633247), 57, 770);
      nodeArray0[0] = node0;
      Node node1 = new Node((-1000));
      nodeArray0[1] = node1;
      Node node2 = new Node(57, nodeArray0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isDelProp());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(58, nodeArray0);
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isDelProp());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 59, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(59, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("\"eval\" cannot be used in Caja");
      Node node1 = Node.newString("JSC_UNMATCHED_START_MARKER", 38, 64);
      Node node2 = new Node(60, node0, node0, node0, node1, 36, 2023);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isNull());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(62);
      nodeArray0[0] = node0;
      Node node1 = new Node(62, nodeArray0);
      node1.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isNot());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("VBC*dc+O", 63, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(63, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isComma());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(64, nodeArray0);
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isNull());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 67, 67);
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(67, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(54, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 68, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(68, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 69, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(69, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isWith());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("qVBC*dc+O", 70, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(70, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(71, nodeArray0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node1);
      peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node2.getChildCount());
      assertTrue(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(72, nodeArray0);
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isNE());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(73);
      nodeArray0[0] = node0;
      Node node1 = new Node(73, nodeArray0);
      node1.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNull(node2.getSourceFileName());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(74);
      nodeArray0[0] = node0;
      Node node1 = new Node(74, nodeArray0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node1.addChildrenToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 75, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(75, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVar());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qBC*dc+", 76, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(76, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVdC*Nc+O", 77, 77);
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(77, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node(78, 78, 78);
      Node node1 = new Node(78, node0, node0, node0, node0, (-2165), 46);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      Node node4 = new Node(30);
      node3.addChildBefore(node4, node0);
      Node node5 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node5.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      Node node1 = new Node(79, node0, node0, node0, node0, (-2165), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      node1.addChildBefore(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isAssign());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 80, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(80, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("", 81, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(81, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(84, (-30), (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(84, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(85);
      nodeArray0[0] = node0;
      Node node1 = new Node(85, nodeArray0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node1.addChildrenToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(86, node0, node0, node0, node0, (-2165), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      node1.addChildBefore(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("qVBC*dc+O", 88, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(88, node0, node1, node1, 16, 29);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 89, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(89, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(65565, node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(92);
      nodeArray0[0] = node0;
      Node node1 = new Node(92, nodeArray0);
      node1.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(93);
      nodeArray0[0] = node0;
      Node node1 = new Node(93, nodeArray0);
      node1.addChildrenToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(94, 94, 94);
      Node node1 = new Node(94, node0, node0, node0, node0, (-2165), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      node1.addChildBefore(node1, node0);
      // Undeclared exception!
      peepholeFoldConstants0.optimizeSubtree(node1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 98, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(98, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVoid());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 99, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(99, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 148, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(148, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(9, "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(10, "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(13, "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(17, "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(18, "");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isInc());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(19, "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("E^Mskb*DYQXhFX:");
      nodeArray0[0] = node0;
      Node node1 = new Node(20, nodeArray0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(21, "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(23, "com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 24, (-30));
      Node node1 = new Node(24, node0, node0, node0, 16, 29);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(37, 52, 36);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 14, (-30));
      Node node1 = new Node(38, node0, 44, 42);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isGetElem());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(41, "Named type with empty name component", 48, 30);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[2];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      jSTypeArray0[0] = jSType0;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(49, node0, node0, node0, node0, 1, 16);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(50, 54, 16);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isVar());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(42, "9kf0M((yYSuG8", 1686, 61);
      Node node1 = new Node(61, node0, node0, node0, 31, 37);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.isNot());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(66, nodeArray0, 66, 66);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isLabelName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(82, "com.google.javascript.jscomp.TypedScopeCreat3r$FirytOrderFunctionAnalyzer");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(87, "Named type with empty name component", 1, 0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = new Node(90, 90, 90);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString(91, "com.google.javascript.jscomp.TypedScopeCreat3r$FirytOrderFunctionAnalyzer");
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString("m})~!js5R]FU{Lwx", 122, 66);
      Node node1 = new Node(96, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(97, "beD4cKCy<", 97, 97);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node0 = Node.newString(32, "S3");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isTry());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(75);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node1 = Node.newString(32, "S");
      node1.addChildToFront(node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(objectType0);
      jSTypeArray0[0] = jSType0;
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) objectType0, (List<JSType>) linkedList0);
      jSTypeArray0[1] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(29, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertFalse(node2.isParamList());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = new Node(52, (-30), (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(52, node0, node1, node1, 16, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 52, (-30));
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(52, node0, node1, node1, 16, 29);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(86, node0, node0, node0, node0, (-2159), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      node1.addChildAfter(node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(86, node0, node0, node0, node0, (-2173), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      node1.addChildBefore(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals((-1), node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(95, 95, 95);
      Node node1 = new Node(95, node0, node0, node0, node0, (-2165), 46);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node3 = new Node(30);
      node1.addChildBefore(node3, node0);
      node2.addChildrenToFront(node2);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(95, node4.getType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(95, 95, 95);
      Node node1 = new Node(95, node0, node0, node0, node0, (-2165), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node2 = new Node(30);
      node1.addChildBefore(node2, node0);
      node2.addChildrenToFront(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(100, node0, node0, node0, node0, (-2173), 46);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node3 = new Node(36, node2, node2, node2, node2, 35, 54);
      node1.addChildBefore(node3, node0);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node4);
      assertEquals((-1), node4.getLineno());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 14, (-30));
      Node node1 = new Node(4, 53, 52);
      Node node2 = new Node(12, node0, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, node3.getType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 14, (-30));
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(14, node0, node1, node1, 16, 29);
      node0.setType(42);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 34, 79);
      Node node1 = Node.newNumber(100.0);
      Node node2 = new Node(16, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isName());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(true);
      Node node0 = Node.newString("qVBC*dc+O", 14, (-30));
      Node node1 = Node.newString("qVBC*dc+O");
      Node node2 = new Node(12, node0, node0, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      Node node1 = new Node(86, node0, node0, node0, node0, (-2165), 46);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants(false);
      Node node2 = new Node(30);
      node1.addChildBefore(node2, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.DECR_FLAG);
  }
}
