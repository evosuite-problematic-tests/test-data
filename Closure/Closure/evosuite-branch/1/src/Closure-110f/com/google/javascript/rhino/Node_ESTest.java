/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 10:50:56 GMT 2018
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.siblings();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber(32.0, 33, 33);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      assertEquals(135201, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      node0.putProp(0, node0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber((-366.5));
      node0.addSuppression("new child has existing sibling");
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(0, 3387, 65535);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append(")\"p;xh^7x7#n52nT");
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(")\"p;xh^7x7#n52nT", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node_FileLevelJsDocBuilder0.append("");
      assertEquals(13877247, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString("2?>2C");
      node0.setQuotedString();
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(2, "NULL_TYPE", 2, (-6));
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(2, node0.getType());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(0, 0, 1846);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.setThrows();
      assertEquals(4087, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertEquals(0, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(4095, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertEquals(0, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertEquals(0, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      node0.setChangeTime((-1786));
      int int0 = node0.getChangeTime();
      assertEquals((-1786), int0);
      assertEquals(40, node0.getType());
      assertEquals(308, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(262144);
      node0.setChangeTime(147);
      node0.putBooleanProp(262144, true);
      node0.setChangeTime(0);
      assertEquals((-1), node0.getLineno());
      assertEquals(262144, node0.getType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber(32.0, 33, 33);
      node0.setDouble(214.3761722476);
      assertEquals(39, node0.getType());
      assertEquals(135201, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber(32.0, 33, 33);
      node0.setWasEmptyNode(false);
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString(4602, "*{v");
      node0.getInputId();
      assertEquals(4602, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      boolean boolean0 = node0.isSyntheticBlock();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      Node node1 = new Node((-2692), node0, node0, node0, node0, 30, 43);
      boolean boolean0 = node1.hasChildren();
      assertEquals(122923, node1.getSourcePosition());
      assertEquals((-2692), node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(2564, 163, 163);
      node0.setSourceEncodedPosition(26);
      assertEquals(26, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(boolean0);
      assertEquals(321, node0.getType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(0, 0, 1846);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertEquals(0, node0.getType());
      assertFalse(boolean0);
      assertEquals(1846, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(34, "W)xL$Vznm9");
      node0.setIsSyntheticBlock(false);
      assertEquals(34, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(0, 0, 1846);
      Node node1 = new Node(0, node0, node0, node0, 46, 51);
      Node node2 = new Node(0, node1, 38, 0);
      assertEquals(0, node0.getChildCount());
      
      node2.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(188467, node1.getSourcePosition());
      assertEquals(155648, node2.getSourcePosition());
      assertEquals(1846, node0.getSourcePosition());
      assertEquals(0, node2.getType());
      assertEquals(0, node1.getType());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(".");
      node0.setType(100);
      assertTrue(node0.isOr());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      Node node1 = new Node(53, node0, 1073741824, 4);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString(131, "(rWPrrG$dtA.X1x", 114, 114);
      Node node1 = node0.srcrefTree(node0);
      assertEquals(467058, node1.getSourcePosition());
      assertEquals(131, node1.getType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString((-5305), "", 4361, 1219);
      node0.wasEmptyNode();
      assertEquals((-5305), node0.getType());
      assertEquals(17863875, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(50, "W)xL$Vznm9", 50, 50);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertEquals(50, node0.getType());
      assertFalse(boolean0);
      assertEquals(204850, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(1048576, "com.google.common.base.Predicates$InPredicate", 1048576, 1048576);
      node0.getDirectives();
      assertEquals(1048576, node0.getType());
      assertEquals(4095, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      int int0 = node0.getSourcePosition();
      assertEquals((-1), int0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber((-3368.950126));
      int int0 = node0.getLength();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      node0.setCharno(50);
      assertEquals(50, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString(".");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node0.setDirectives(treeSet0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(5867.5715);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0, 0, 0);
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(nodeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber((double) 85, 85, 0);
      node0.setSourceFileForTesting("{ ");
      Node node1 = node0.copyInformationFrom(node0);
      assertEquals(39, node1.getType());
      assertEquals(348160, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newString(1024, "");
      boolean boolean0 = node0.isLocalResultCall();
      assertEquals(1024, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber(32.0, 33, 33);
      Node node1 = node0.srcref(node0);
      assertEquals(135201, node1.getSourcePosition());
      assertEquals(39, node1.getType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      int int0 = node0.getSourceOffset();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      node0.addSuppression(" : ");
      try { 
        node0.setDouble(2.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Vyjx@W[C^ [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      node0.putProp(48, node0);
      try { 
        node0.setString("%'|xKH`Fh)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1595.38102878 [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber(1894.0965894826234, 41, 41);
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      node0.putProp(30, jSTypeNative0);
      node0.toString(true, true, true);
      assertEquals(167977, node0.getSourcePosition());
      assertTrue(node0.isNumber());
      assertEquals(41, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1700), (-1700));
      node0.setOptionalArg(true);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(147, 147, (-3506));
      node0.putBooleanProp(49, true);
      assertTrue(node0.isGetterDef());
      
      node0.toString(true, true, false);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      node0.putProp(50, node0);
      try { 
        node0.setString("%'|xKH`Fh)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1595.38102878 [free_call: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE", 0, 0);
      node0.setSourceFileForTesting("com.google.javascript.rhino.jstypeNu(berType");
      node0.toString();
      assertTrue(node0.isString());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newNumber((-219.9628879293), (-2647), (-2647));
      node0.setLength((byte)34);
      node0.toStringTree();
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(")(H2_R:r:V}TQX", 98, 98);
      InputId inputId0 = new InputId("Ud");
      node0.setInputId(inputId0);
      try { 
        node0.setDouble(31);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING )(H2_R:r:V}TQX 98 [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber(1894.0965894826234, 41, 41);
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      node0.putProp((byte)54, jSTypeNative0);
      node0.toString(true, true, true);
      assertEquals(41, node0.getLineno());
      assertEquals(167977, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      node0.putIntProp(55, 53);
      try { 
        node0.setString("%'|xKH`Fh)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1595.38102878 [inferred: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime((-1065));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.checkTreeEquals(node1);
      assertEquals((-1), node1.getLineno());
      assertEquals(3, node1.getChildCount());
      assertEquals(83, node1.getType());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.UnionType", 21, 297);
      node0.putIntProp(57, 3321);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING com.google.javascript.rhino.jstype.UnionType 21 [reflected_object: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      node0.putProp(0, node0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 0
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node1 = Node.newNumber((double) 55);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertNotNull(node_NodeMismatch0);
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber((-119.0), 256, (-1650));
      Node node1 = Node.newNumber(0.0);
      node0.addChildToFront(node1);
      boolean boolean0 = node0.isEquivalentToTyped(node0);
      assertEquals(1, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, 305, (-314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      node0.setString("W)xL$Vznm9");
      assertEquals(40, node0.getType());
      assertEquals(145099, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE");
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      Node node1 = Node.newNumber((double) 32, (-513), 57);
      boolean boolean0 = node0.isEquivalentToTyped(node1);
      assertEquals(321, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isNumber());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE", 0, 0);
      Node node1 = Node.newString("!w{>](q'Il");
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertEquals(0, node1.getChildCount());
      assertNotNull(node_NodeMismatch0);
      assertEquals(40, node1.getType());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(696);
      Node node1 = new Node(0, node0, node0, 32, 50);
      Node node2 = null;
      try {
        node2 = new Node(77, node0, 46, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(8, (-3194), 8);
      Node node1 = new Node(16, node0);
      Node node2 = null;
      try {
        node2 = new Node(0, node0, node1, 52, (-934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(54, 54, 54);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(4, nodeArray0, 55, 33);
      Node node2 = null;
      try {
        node2 = new Node(56, node1, node0, 36, 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(0, (-1666), 6);
      Node node1 = new Node(2169, node0);
      Node node2 = null;
      try {
        node2 = new Node(0, node0, node1, node0, 37, (-2360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(3299, 6235634, 29);
      Node node1 = new Node((-1726), node0);
      Node node2 = null;
      try {
        node2 = new Node(3299, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(2807, 2807, 2807);
      Node node1 = new Node(2807, node0, 32, 1);
      Node node2 = null;
      try {
        node2 = new Node(2807, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString(4194304, "]sw<^`4LR-~", 4194304, (-1000));
      Node node1 = new Node(47, node0, node0, 4095, 0);
      Node node2 = null;
      try {
        node2 = new Node(0, node0, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(0, 0, 27591);
      Node node1 = new Node(519, node0, node0, node0, 57, 306);
      Node node2 = null;
      try {
        node2 = new Node(27591, node1, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("free_call", 0, 0);
      Node node1 = new Node((-1944), node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(54, node1, node1, node1, node0, 51, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(309, (-3274), (-2435));
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(50, nodeArray0, 8, 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) (-1783));
      nodeArray0[0] = node0;
      Node node1 = new Node(2652, node0, node0, 19, 0);
      Node node2 = null;
      try {
        node2 = new Node((-1783), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(0, 3387, 65535);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(39, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      node0.hasChildren();
      assertEquals(308, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, 0, 0);
      Node node1 = new Node(31, node0, node0, 51, 2);
      Node node2 = node1.removeChildren();
      node0.addChildToBack(node2);
      node0.addChildrenToBack(node1);
      node2.getChildBefore(node1);
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE", 0, 0);
      Node node1 = new Node((-1944), node0, node0, node0, node0);
      Node node2 = new Node(46);
      node1.addChildToFront(node2);
      // Undeclared exception!
      try { 
        node1.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newNumber((-366.5));
      Node node1 = node0.getChildAtIndex((-387));
      assertNull(node1);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878, (-3150), (-3150));
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      Node node1 = new Node(0, node0, node0, node0, node0, 8, 56);
      int int0 = node1.getIndexOfChild(node1);
      assertEquals(308, node0.getSourcePosition());
      assertEquals(0, node1.getType());
      assertEquals(32824, node1.getSourcePosition());
      assertTrue(node0.isString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      Node node1 = new Node(0, node0, node0, node0, node0, 8, 56);
      int int0 = node1.getIndexOfChild(node0);
      assertEquals(32824, node1.getSourcePosition());
      assertEquals(0, node1.getType());
      assertEquals(308, node0.getSourcePosition());
      assertEquals(0, int0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.addChildrenToFront(node0);
      assertEquals(4, node1.getChildCount());
      
      node0.getLastSibling();
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(" ]DABV_", 2401, 2401);
      Node node1 = new Node(2401, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString((-1073), "W{ &&?jne", (-1073), (-722));
      Node node1 = new Node(49, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.addChildrenToFront(node0);
      assertEquals(1, node0.getChildCount());
      
      node0.detachChildren();
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE", 0, 0);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((-1230.89862292), 16777216, 16777216);
      Node node1 = new Node((-3152), node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      Node node1 = Node.newNumber((double) 57);
      node0.addChildrenToBack(node0);
      node0.replaceChild(node0, node1);
      node0.addChildBefore(node0, node1);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1070, nodeArray0, 310, 1070);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(39, "l", 49, 49);
      Node node1 = new Node(49, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, 0, 0);
      Node node1 = new Node(31, node0, node0, 51, 2);
      Node node2 = node1.removeChildren();
      node0.addChildToBack(node2);
      node0.addChildrenToBack(node1);
      node2.removeChild(node0);
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, 0, 0);
      Node node1 = new Node(31, node0, node0, 51, 2);
      Node node2 = node1.removeChildren();
      node0.addChildToBack(node2);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(1824, 1824, 1824);
      Node node1 = new Node(1824, node0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(147, 147, (-3506));
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString(2931, "!w{>](q'Il");
      Node node1 = new Node(36, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("", 0, 558);
      Node node1 = new Node(46, node0);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString(50, "W)xL$Vznm9", 50, 50);
      Node node1 = node0.clonePropsFrom(node0);
      assertEquals(50, node1.getType());
      assertEquals(204850, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setVarArgs(true);
      boolean boolean0 = node0.isVarArgs();
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("", 21, 297);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(21);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 21
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber(32.0);
      Node node1 = new Node(39, node0, node0, node0, node0, 1029, 1);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("", 31, 31);
      Node node1 = new Node(38, node0, 38, 29);
      // Undeclared exception!
      try { 
        node1.setString("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = node0.toString(false, true, false);
      assertEquals("NUMBER 0.0", string0);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(4);
      String string0 = node0.toString(false, false, true);
      assertEquals("RETURN", string0);
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isReturn());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0, 0, 0);
      node0.setSourceFileForTesting("");
      String string0 = node0.getSourceFileName();
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getSourceFileName();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString(3922, "directives", 3922, 3922);
      node0.setSourceFileForTesting("com.google.javascript.rhino.jstype.RecordType");
      node0.isFromExterns();
      assertEquals(3922, node0.getType());
      assertEquals(16068434, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(8199, (-148), 57);
      node0.isFromExterns();
      assertEquals(8199, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(2, "NULL_TYPE", 2, (-6));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      int int0 = node0.getSourceOffset();
      assertEquals((-1), node0.getLineno());
      assertEquals(2, node0.getType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString(34, "W)xL$Vznm9");
      node0.setLineno(34);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("NULL_TYPE", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      int int0 = node0.getSourceOffset();
      assertEquals(34, node0.getLineno());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      Node node1 = new Node((-2692), node0, node0, node0, node0, 30, 43);
      node1.setLineno(12288);
      assertEquals(12288, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      Node node1 = new Node(53, node0, 1073741824, 4);
      node1.setSourceEncodedPositionForTree((-570));
      assertEquals(1048575, node0.getLineno());
      assertFalse(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(898);
      Node node1 = new Node(898, node0, node0);
      node1.children();
      assertEquals(898, node0.getType());
      assertEquals(898, node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(262144);
      node0.children();
      assertEquals((-1), node0.getLineno());
      assertEquals(262144, node0.getType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString(44, "OcI`ETvz");
      // Undeclared exception!
      try { 
        node0.getAncestor((-2420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString(1739, "W)xL$Vznm9", 1739, 1739);
      Node node1 = node0.getAncestor(754);
      assertEquals(7124683, node0.getSourcePosition());
      assertEquals(1739, node0.getType());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("@.M=kz={y?j8LleHo", 0, 0);
      Node node1 = node0.getAncestor(0);
      assertTrue(node1.isString());
      assertNotNull(node1);
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString((-683), "{<F<\"f3`|_Rv", (-683), (-868));
      node0.hasOneChild();
      assertEquals((-683), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString("", 0, 558);
      Node node1 = new Node(46, node0);
      boolean boolean0 = node1.hasOneChild();
      assertEquals(40, node0.getType());
      assertEquals(46, node1.getType());
      assertEquals(558, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseVoidType();
      jSTypeArray0[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.hasOneChild();
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertTrue(node0.isString());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2882);
      Node node1 = new Node(2882, node0, node0, node0, node0, 12, 50);
      boolean boolean0 = node1.hasMoreThanOneChild();
      assertEquals(2882, node1.getType());
      assertEquals(39, node0.getType());
      assertEquals(49202, node1.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      Node node1 = new Node(0, 4, 46);
      Node node2 = new Node(53, node0, 52, 4);
      node2.addChildrenToFront(node1);
      boolean boolean0 = node2.hasMoreThanOneChild();
      assertEquals(2, node2.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(0, node0, node0, node0);
      boolean boolean0 = node1.hasChild(node0);
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertEquals(0, node1.getType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(0, node0, node0, node0);
      boolean boolean0 = node1.hasChild(node1);
      assertFalse(boolean0);
      assertEquals(0, node1.getType());
      assertEquals(40, node0.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      String string0 = node0.checkTreeEquals(node0);
      assertEquals(39, node0.getType());
      assertNull(string0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber(1894.0965894826234, 41, 41);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      Node node1 = new Node(35, node0, node0, 35, 4612);
      assertTrue(node1.hasOneChild());
      
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
      assertEquals(145099, node0.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertTrue(node0.isString());
      assertEquals(147455, node1.getSourcePosition());
      assertNull(node_NodeMismatch0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      Node node1 = new Node(53, node0, 1073741824, 4);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(53, node1.getType());
      assertNull(node_NodeMismatch0);
      assertEquals(1, node1.getChildCount());
      assertEquals(321, node0.getType());
      assertEquals(4, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(1875, "inferred");
      Node node1 = new Node(1875, 50, 56);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1875
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      Node node1 = node0.cloneNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType[] templateTypeArray0 = new TemplateType[1];
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      templateTypeArray0[0] = templateType0;
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf(templateTypeArray0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseUnknownType();
      node1.setJSType(jSType0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      assertNotNull(node_NodeMismatch0);
      assertEquals(0, node1.getChildCount());
      assertEquals(321, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(1739, "W)xL$Vznm9", 1739, 1739);
      Node node1 = new Node(53, node0, node0, 53, 4612);
      boolean boolean0 = node1.isEquivalentToShallow(node1);
      assertTrue(boolean0);
      assertEquals(53, node1.getType());
      assertEquals(1739, node0.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(221183, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertEquals(7124683, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = node0.getQualifiedName();
      assertEquals(39, node0.getType());
      assertNull(string0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isQualifiedName();
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = node0.isQualifiedName();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      node0.isUnscopedQualifiedName();
      assertEquals(145099, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString(50, "W)xL$Vznm9", 50, 50);
      node0.type = 38;
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertTrue(node0.isName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(2564, 163, 163);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString(1048576, "com.google.common.base.Predicates$InPredicate", 1048576, 1048576);
      Node node1 = new Node(55, node0, node0, node0, 12, 55);
      assertEquals(49207, node1.getSourcePosition());
      assertEquals(55, node1.getType());
      
      Node node2 = node0.detachFromParent();
      assertEquals(4095, node2.getSourcePosition());
      assertEquals(1048576, node2.getType());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString(4602, "*{v");
      Node node1 = node0.removeFirstChild();
      assertEquals(4602, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString(32, "", 345, 902);
      Node node1 = new Node(345, node0, 4095, 1395);
      Node node2 = node1.removeFirstChild();
      assertNotNull(node2);
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      node0.detachChildren();
      assertEquals(145099, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber((-219.9628879293), (-2647), (-2647));
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.addChildrenToFront(node0);
      node1.removeChildAfter(node0);
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      jSTypeArray0[0] = jSType1;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildToFront(node0);
      node0.removeChildAfter(node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE", 0, 0);
      Node node1 = new Node((-1944), node0, node0, node0, node0);
      Node node2 = new Node(46);
      node1.addChildToFront(node2);
      node1.cloneTree();
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      Node node1 = new Node(53, node0, 1073741824, 4);
      node1.copyInformationFromForTree(node0);
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 1083, 2125);
      Node node1 = new Node(1083, node0, (-480), 798);
      assertEquals((-1), node1.getCharno());
      
      nodeArray0[0] = node1;
      Node node2 = nodeArray0[0].useSourceInfoFromForTree(node0);
      assertEquals(4438093, node2.getSourcePosition());
      assertFalse(node2.isThis());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(41);
      node0.setSourceFileForTesting("jGmZRJsmV%1)s)\"38V");
      Node node1 = node0.useSourceInfoIfMissingFromForTree(node0);
      assertTrue(node1.isNull());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString(205, "2^");
      Node node1 = new Node(205, node0, 31, 52);
      nodeArray0[0] = node1;
      nodeArray0[0].useSourceInfoIfMissingFromForTree(node1);
      assertEquals(31, node0.getLineno());
      assertEquals(52, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2071), nodeArray0, (-2071), (-2071));
      node0.addSuppression("Not declared as a constructor");
      node0.addSuppression((String) null);
      assertEquals((-2071), node0.getType());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2457);
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertFalse(boolean0);
      assertEquals(2457, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber(1894.0965894826234, 41, 41);
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertTrue(node0.isNumber());
      assertEquals(167977, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      Node node1 = new Node(26, node0, 77, 50);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      node_NodeMismatch0.equals(node1);
      assertEquals(315442, node1.getSourcePosition());
      assertTrue(node0.isString());
      assertTrue(node1.isNot());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      boolean boolean0 = node0.isAdd();
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString(50, "W)xL$Vznm9", 50, 50);
      node0.isAnd();
      assertEquals(50, node0.getType());
      assertEquals(204850, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isArrayLit();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      boolean boolean0 = node0.isAssign();
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString(1739, "W)xL$Vznm9", 1739, 1739);
      boolean boolean0 = node0.isAssignAdd();
      assertFalse(boolean0);
      assertEquals(7124683, node0.getSourcePosition());
      assertEquals(1739, node0.getType());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(")(H2_R:r:V}TQX", 98, 98);
      node0.isBlock();
      assertEquals(401506, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = new Node(8199, (-148), 57);
      boolean boolean0 = node0.isBreak();
      assertEquals(8199, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.UnionType", 21, 297);
      node0.isCall();
      assertEquals(40, node0.getType());
      assertEquals(86313, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isCase();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2461);
      boolean boolean0 = node0.isCast();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(0, 0, 46);
      Node node1 = new Node(155, node0, node0, 51, 40);
      boolean boolean0 = node1.isCast();
      assertEquals(0, node0.getType());
      assertTrue(boolean0);
      assertEquals(208936, node1.getSourcePosition());
      assertEquals(46, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(90, nodeArray0, 90, 126);
      node0.isCatch();
      assertEquals(90, node0.getType());
      assertEquals(368766, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      boolean boolean0 = node0.isComma();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString(85, "!w{>](q'Il", 85, 32);
      boolean boolean0 = node0.isComma();
      assertEquals(348192, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isContinue();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.UnionType", 21, 297);
      node0.isDebugger();
      assertEquals(86313, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.UnionType", 21, 297);
      boolean boolean0 = node0.isDec();
      assertEquals(86313, node0.getSourcePosition());
      assertFalse(boolean0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      boolean boolean0 = node0.isDefaultCase();
      assertFalse(boolean0);
      assertEquals(145099, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      boolean boolean0 = node0.isDelProp();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2071), nodeArray0, (-2071), (-2071));
      Node node1 = new Node(31, node0, node0, 51, 2);
      boolean boolean0 = node1.isDelProp();
      assertEquals(208898, node1.getSourcePosition());
      assertTrue(boolean0);
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals((-2071), node0.getType());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      boolean boolean0 = node0.isDo();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newNumber(1894.0965894826234, 41, 41);
      node0.isEmpty();
      assertEquals(39, node0.getType());
      assertEquals(167977, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      boolean boolean0 = node0.isExprResult();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(3922, "directives", 3922, 3922);
      boolean boolean0 = node0.isFalse();
      assertFalse(boolean0);
      assertEquals(16068434, node0.getSourcePosition());
      assertEquals(3922, node0.getType());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isFor();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber(Double.POSITIVE_INFINITY);
      boolean boolean0 = node0.isGetterDef();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isGetElem();
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString(35, "W)xL$Vznm9");
      boolean boolean0 = node0.isGetElem();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      node0.isGetProp();
      assertEquals(308, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      boolean boolean0 = node0.isHook();
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isIf();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      boolean boolean0 = node0.isIn();
      assertEquals(145099, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isInc();
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      node0.isInstanceOf();
      assertEquals(145099, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(321, "");
      node0.isLabel();
      assertEquals(321, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      node0.isLabelName();
      assertEquals(40, node0.getType());
      assertEquals(308, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      boolean boolean0 = node0.isName();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(38, 0, 16);
      boolean boolean0 = node0.isName();
      assertTrue(boolean0);
      assertEquals(16, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("W)xL$Vznm9", 35, 1739);
      node0.isNE();
      assertEquals(145099, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      boolean boolean0 = node0.isNew();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE");
      boolean boolean0 = node0.isNot();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("", (int) (byte)29, (int) (byte)3);
      Node node1 = new Node(26, node0, node0, node0);
      boolean boolean0 = node1.isNot();
      assertEquals(118787, node0.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE");
      boolean boolean0 = node0.isNull();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      boolean boolean0 = node0.isNumber();
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878, (-3150), (-3150));
      boolean boolean0 = node0.isNumber();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString("Z}O}$Gdnm", 0, 308);
      node0.isObjectLit();
      assertEquals(40, node0.getType());
      assertEquals(308, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(1595.38102878);
      boolean boolean0 = node0.isOr();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", 1083, 2125);
      boolean boolean0 = node0.isParamList();
      assertEquals(4438093, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      boolean boolean0 = node1.isParamList();
      assertEquals((-1), node1.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isRegExp();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE", 0, 0);
      boolean boolean0 = node0.isReturn();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(jSType0);
      jSTypeArray0[0] = jSType1;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isScript();
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isSetterDef();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString(1024, "");
      boolean boolean0 = node0.isString();
      assertEquals(1024, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE", 0, 0);
      boolean boolean0 = node0.isString();
      assertTrue(boolean0);
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isStringKey();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(2564, 163, 163);
      node0.isSwitch();
      assertEquals(2564, node0.getType());
      assertEquals(667811, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(102, (-1996), 119);
      boolean boolean0 = node0.isThis();
      assertEquals(102, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(147, 147, (-3506));
      boolean boolean0 = node0.isThrow();
      assertEquals(147, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString(30, "");
      node0.isTrue();
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNew());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString("NULL_TYPE");
      boolean boolean0 = node0.isTry();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isTypeOf();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString(32, "");
      boolean boolean0 = node0.isTypeOf();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString(".");
      boolean boolean0 = node0.isVar();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isVoid();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("Vyjx@W[C^");
      boolean boolean0 = node0.isWhile();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newNumber((-219.9628879293), (-2647), (-2647));
      node0.isWith();
      assertTrue(node0.isNumber());
  }
}
