/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 10:21:07 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(0, "", 0, 0);
      Node node1 = new Node(26, node0, node0, 8, 51);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(32, node0, node0, node0, node0, 2, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(34, ":UKT2vV2wU?vu", 34, 34);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(36, node0, node0, node0, node0, 80, 113);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(113, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(37, node0, node0, node0, node0, 26, 113);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(37, node2.getType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("checkRegExp", 0, 0);
      Node node1 = Node.newString(27, "checkRegExp", 40, 41);
      Node node2 = new Node(31, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(10, node0, node0, node0, node1, 12, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(":agFYI_5iKO'eIS", 0, 0);
      Node node1 = Node.newString(":agFYI_5iKO'eIS");
      Node node2 = new Node(11, node0, node1, 35, 24);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(11, node3.getType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(0, 0, 0);
      Node node1 = Node.newString(":agFYI_5iKO'eIS");
      Node node2 = new Node(12, node0, node1, 35, 24);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(":agFYI_5iKO'eIS", 0, 0);
      Node node1 = Node.newString(":agFYI_5iKO'eIS");
      Node node2 = new Node(13, node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(14, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(113, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newNumber(1429.3225462902267);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(15, node1, node0, node0, 9, 33);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(16, node0, node0, node0, node1, 80, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 27);
      Node node2 = new Node(17, node0, node0, node0, node1, 80, 1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(18, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(19, node0, node1, 40, 12);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(20, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(20, node3.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((-1895.876));
      Node node2 = new Node(21, node0, node0, node0, node1, 80, 17);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(22, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(33, 7, 6);
      Node node2 = new Node(23, node0, node0, node1, 48, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(24, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(25, node0, node0, node0, node1, 12, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(28, node0, node0, node0, node1, 60, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(30, node0, node0, node0, node1, 12, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(":agFYI_5iKO'eIS", 0, 0);
      Node node1 = Node.newString(":agFYI_5iKO'eIS");
      Node node2 = new Node(33, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 35, 29);
      Node node2 = new Node(35, node0, node0, node0, node1, 80, (-3));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 16, 29);
      Node node2 = new Node(36, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(80, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(38, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 25, 29);
      Node node2 = new Node(39, node0, node0, node0, node1, 80, (-2));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(40, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(41, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, node3.getType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(42, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(80, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 86, 29);
      Node node2 = new Node(43, node1, node0, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(44, node0, node0, node0, node1, 12, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(113, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber(1431.4872069434455);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(45, node1, node1, node0, 13, 14);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(34, ":UKT2vV2wU?vu", 34, 34);
      Node node1 = new Node(26);
      Node node2 = new Node(47, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 51, 29);
      Node node2 = new Node(48, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(113, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(0, ":UKT2vV2wU?vu", 0, 0);
      Node node1 = Node.newString(19, ":UKT2vV2wU?vu");
      Node node2 = new Node(49, node1, node1, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 2, 29);
      Node node2 = new Node(50, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 49, 29);
      Node node2 = new Node(51, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.functio.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(52, node0, node0, node0, node1, 80, 81);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(80, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 54, 29);
      Node node2 = new Node(54, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(113, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber(1423.5161460850172);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(56, node0, node0, node0, node1, 12, 128);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(128, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 57, 29);
      Node node2 = new Node(57, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(80, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 59, 29);
      Node node2 = new Node(59, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(59, node3.getType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber(1424.5503589459681);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(60, node0, node0, node0, node1, 12, 15);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber(1424.5503589459681);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(21);
      Node node2 = new Node(61, node0, node0, node0, node1, 12, 128);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(1460.0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.functio.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(62, node0, node0, node0, node1, 73, 81);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(73, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(63, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(64, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(113, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 65, 29);
      Node node2 = new Node(65, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 66, 29);
      Node node2 = new Node(66, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(113, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 68, 29);
      Node node2 = new Node(68, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 70, 29);
      Node node2 = new Node(70, node0, node0, node0, node1, 50, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(1424.5503589459681);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(72, node0, node0, node0, node1, 12, 128);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(73, node0, node0, node0, node1, (-943), 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber(1461.3250697990848);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 74, 29);
      Node node2 = new Node(74, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(76, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(77, node0, node0, node0, node1, (-943), 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 80, 29);
      Node node2 = new Node(80, node0, node0, node0, node1, 75, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.functionin");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(82, node0, node0, node0, node1, 60, 112);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 41);
      Node node2 = new Node(84, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 85, 29);
      Node node2 = new Node(85, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 86, 29);
      Node node2 = new Node(86, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(80, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber(1424.5503589459681);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(87, node0, node0, node0, node1, 12, 15);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 88, 29);
      Node node2 = new Node(88, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(88, node3.getType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 89, 29);
      Node node2 = new Node(89, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(89, node3.getType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 90, 29);
      Node node2 = new Node(90, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(91, node0, node0, node0, node1, (-943), 12);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 92, 29);
      Node node2 = new Node(92, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(113, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(93, node0, node0, node0, node1, (-943), 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newNumber(1460.48718505297);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString(2, "msg.isnt.function.in");
      Node node2 = new Node(94, node0, node0, node0, node1, 80, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(95, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 96, 29);
      Node node2 = new Node(96, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(96, node3.getType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(1424.5503589459681);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(98, node0, node0, node0, node1, 12, 128);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(128, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(99, node0, node0, node0, node1, 12, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in");
      Node node2 = new Node(100, node0, node0, node0, node1, (-943), 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 101, 29);
      Node node2 = new Node(101, node0, node0, node0, node1, 80, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node[] nodeArray0 = new Node[2];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.javascript.jscomp.InstrumentFunctions$InstrumentReturns", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.InstrumentFunctions$InstrumentReturns", "");
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      nodeArray0[1] = node1;
      Node node2 = new Node((-2306), nodeArray0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(32, 1, 1);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 45, 29);
      Node node2 = new Node(32, node0, node0, node0, node1, 2, 113);
      node2.removeFirstChild();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("", 0, 0);
      Node node1 = Node.newString("");
      Node node2 = Node.newString(27, "", 0, 41);
      Node node3 = new Node(47, node1, node2);
      node2.addChildToBack(node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(0, "", 0, 0);
      Node node1 = Node.newString("");
      Node node2 = Node.newString(27, "", 0, 41);
      Node node3 = new Node(47, node1, node2);
      node2.addChildToBack(node0);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, node4.getCharno());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("", 0, 0);
      Node node1 = new Node(29, node0, node0, node0, 10, 32);
      Node node2 = new Node(2, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 52, 29);
      Node node2 = new Node(52, node0, node0, node0, node1, 80, (-3));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(1411.595231934582);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 86, 29);
      Node node2 = new Node(86, node0, node0, node0, node1, 80, 142);
      node1.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(86, node3.getType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(21, node0, node0, node0, node0, 80, 17);
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((-1895.876));
      node0.setType(93);
      Node node2 = new Node(21, node0, node0, node0, node1, 80, 17);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 96, 29);
      Node node2 = new Node(21, node0, node0, node0, node1, 80, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 96, 29);
      Node node2 = new Node(23, node1, node0, node0, 48, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(23, node0, node0, node0, node1, 12, 1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(9, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber(1429.3225462902267);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(9, node0, node0, node0, node1, 12, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(0, ":UKT2vV2wU?vu", 0, 0);
      Node node1 = new Node(26);
      Node node2 = new Node(20, node1, node0, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)41);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(20, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString(5, "msg.isnt.function.in", 11, 22);
      Node node2 = new Node(16, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, node3.getType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(0, ":UKT2vV2wU?vu", 0, 0);
      Node node1 = Node.newString(27, ":UKT2vV2wU?vu", 0, 41);
      Node node2 = new Node(16, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("checkRegExp", 0, 0);
      Node node1 = Node.newString(43, "checkRegExp", 23, 9);
      Node node2 = new Node(12, node0, node1, 35, 24);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("checkRegExp", 0, 0);
      Node node1 = Node.newString("checkRegExp");
      Node node2 = new Node(12, node0, node1, 35, 24);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newNumber(1379.6336023343408);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(12, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte)41);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(13, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newNumber((double) (byte) (-6));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(14, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(1.5);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 26);
      Node node2 = new Node(46, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(1430.637844761539);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(14, node0, node0, node0, node1, 12, 113);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber((-206.792270666));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newNumber((double) 24, 27, (-3));
      Node node2 = new Node(16, node0, node0, node0, node1, 12, 110);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(37, "");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("msg.isnt.function.in", 37, 29);
      Node node2 = new Node(37, node0, node0, node0, node1, 26, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newNumber(1459.981);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("msg.isnt.function.in");
      Compiler compiler0 = new Compiler();
      Node node1 = syntheticAst0.getAstRoot(compiler0);
      Node node2 = new Node(33, node0, node0, node0, node1, 80, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }
}
