/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 09:59:30 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckRegExp;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CombinedCompilerPass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SimpleFunctionAliasAnalysis;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SpecializeModule;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Supplier;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlobalNamespace_ESTest extends GlobalNamespace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("0", (GlobalNamespace.Name) null, false);
      boolean boolean0 = globalNamespace_Name0.shouldKeepKeys();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, false);
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("a?rR[ nizl- Z", false);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.javascript.rhino.jstype.ObjectType").when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("com.google.javascript.rhino.jstype.ObjectType", sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace0.getNameIndex();
      Scope scope0 = new Scope(node0, compiler0);
      // Undeclared exception!
      try { 
        globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("b*", (GlobalNamespace.Name) null, false);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("b*", globalNamespace_Name0, false);
      boolean boolean0 = globalNamespace_Ref0.isSet();
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      GlobalNamespace.Ref.Type.values();
      boolean boolean1 = globalNamespace_Name0.needsToBeStubbed();
      boolean boolean2 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean2 == boolean1);
      
      globalNamespace_Name1.setIsClassOrEnum();
      boolean boolean3 = globalNamespace_Name0.canEliminate();
      assertFalse(boolean3);
      
      boolean boolean4 = globalNamespace_Name0.isNamespace();
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("nah;}", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.toString();
      globalNamespace_Name0.isSimpleName();
      GlobalNamespace.Ref.Type[] globalNamespace_Ref_TypeArray0 = GlobalNamespace.Ref.Type.values();
      assertEquals(6, globalNamespace_Ref_TypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("rPivNa").when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("rPivNa", sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace0.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      node0.removeChildren();
      Scope scope0 = new Scope(node0, compiler0);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("-rP5=Na").when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("-rP5=Na", sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace0.getNameIndex();
      node0.removeChildren();
      Scope scope0 = new Scope(node0, compiler0);
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.getTwin();
      assertNull(globalNamespace_Ref1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("43eI=sGL +'3.", (GlobalNamespace.Name) null, false);
      boolean boolean0 = globalNamespace_Name0.isNamespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("ZL", (GlobalNamespace.Name) null, true);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRefInternal(globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("`L%;*", (GlobalNamespace.Name) null, false);
      boolean boolean0 = globalNamespace_Name0.canCollapse();
      assertFalse(boolean0);
      
      String string0 = globalNamespace_Name0.toString();
      assertEquals("`L%;* (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name.Type.values();
      globalNamespace_Name0.inExterns = false;
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("`L%;* (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", true);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name0);
      assertNotNull(globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.GlobalNamespace$Ref";
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("com.google.javascript.jscomp.GlobalNamespace$Ref", (GlobalNamespace.Name) null, false);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      globalNamespace_Name0.toString();
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("com.google.javascript.jscomp.GlobalNamespace$Ref");
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GlobalNamespace.Ref.Type.values();
      Compiler compiler0 = new Compiler();
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      passConfig_PassConfigDelegate0.getScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
      compiler0.getRoot();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      try {
        globalNamespace_Ref0 = new GlobalNamespace.Ref(nodeTraversal0, (Node) null, globalNamespace_Ref_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Ref0.isSet();
      Compiler compiler0 = new Compiler();
      Vector<NodeTraversal.Callback> vector0 = new Vector<NodeTraversal.Callback>();
      CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, vector0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);
      nodeTraversal0.getCompiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      // Undeclared exception!
      try { 
        compilerInput0.getAstRoot(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("goog.addDependency", (GlobalNamespace.Name) null, false);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type0);
      globalNamespace_Ref1.getTwin();
      // Undeclared exception!
      try { 
        globalNamespace_Name0.removeRef((GlobalNamespace.Ref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.GlobalNamespace$Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      compiler1.setHasRegExpGlobalReferences(false);
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      compiler0.addChangeHandler(codeChangeHandler_RecentChange0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      Node node1 = new Node(0, node0, node0, 1681, 33);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler1, node1, node1);
      globalNamespace0.getNameForest();
      globalNamespace0.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("(nah;}", (GlobalNamespace.Name) null, false);
      int int0 = 0;
      globalNamespace_Name0.toString();
      globalNamespace_Name0.localSets = 0;
      globalNamespace_Name0.inExterns = false;
      globalNamespace_Name0.toString();
      Vector<GlobalNamespace.Ref> vector0 = new Vector<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) vector0;
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("(nah;} (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", false);
      globalNamespace_Name1.callGets = (-1304);
      GlobalNamespace.Name.Type.values();
      globalNamespace_Name1.isSimpleName();
      AbstractCompiler abstractCompiler0 = null;
      Compiler compiler0 = new Compiler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        compiler0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name((String) null, (GlobalNamespace.Name) null, false);
      globalNamespace_Name0.canEliminate();
      GlobalNamespace.Name.Type.values();
      String string0 = globalNamespace_Name0.fullName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name(", callGets=", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      List<GlobalNamespace.Name> list0 = globalNamespace_Name0.props;
      globalNamespace_Name0.props = null;
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty(", callGets=", false);
      globalNamespace_Name1.fullName();
      GlobalNamespace.Ref.Type.values();
      globalNamespace_Name0.fullName();
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = null;
      try {
        compiler1 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, true);
      boolean boolean0 = globalNamespace_Name0.canCollapse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("JS var assignments:\n", (GlobalNamespace.Name) null, false);
      globalNamespace_Name0.totalGets = 122;
      globalNamespace_Name0.toString();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      globalNamespace_Name0.canCollapse();
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type.values();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      globalNamespace_Name0.shouldKeepKeys();
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("\"eCEV>", (GlobalNamespace.Name) null, false);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.declaration = globalNamespace_Ref0;
      String string0 = globalNamespace_Name0.toString();
      assertEquals("\"eCEV> (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string0);
      
      globalNamespace_Name0.globalSets = 1989;
      globalNamespace_Name0.localSets = 64;
      globalNamespace_Name0.addProperty("\"eCEV>", false);
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("", false);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name0.setIsClassOrEnum();
      boolean boolean0 = globalNamespace_Name0.canCollapseUnannotatedChildNames();
      assertFalse(boolean0);
      
      boolean boolean1 = globalNamespace_Name0.canCollapse();
      globalNamespace_Name0.fullName();
      GlobalNamespace.Name.Type.values();
      boolean boolean2 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("HjICp#4", (GlobalNamespace.Name) null, true);
      Stack<GlobalNamespace.Ref> stack0 = new Stack<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) stack0;
      stack0.addAll((Collection<? extends GlobalNamespace.Ref>) globalNamespace_Name0.refs);
      stack0.ensureCapacity(0);
      globalNamespace_Name0.fullName();
      stack0.remove((Object) globalNamespace_Name0.refs);
      globalNamespace_Name0.localSets = 64;
      globalNamespace_Name0.inExterns = true;
      globalNamespace_Name0.isSimpleName();
      String string0 = globalNamespace_Name0.toString();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      globalNamespace_Name0.docInfo = jSDocInfo0;
      globalNamespace_Name0.setIsClassOrEnum();
      jSDocInfo0.getThrownTypes();
      globalNamespace_Name0.isNamespace();
      globalNamespace_Name0.canCollapse();
      globalNamespace_Name0.isNamespace();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.isNamespace();
      globalNamespace_Name0.canCollapse();
      String string1 = globalNamespace_Name0.fullName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Ref0.isSet();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      Compiler compiler0 = new Compiler((PrintStream) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      simpleErrorReporter0.error("ALIASING_GET", "ALIASING_GET", (-2329), "", 65500);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("hUb$Z)!{l}32N,&&!", (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("b*", (GlobalNamespace.Name) null, false);
      globalNamespace_Name0.setIsClassOrEnum();
      ArrayList<GlobalNamespace.Name> arrayList0 = new ArrayList<GlobalNamespace.Name>();
      globalNamespace_Name0.props = (List<GlobalNamespace.Name>) arrayList0;
      globalNamespace_Name0.canEliminate();
      LinkedList<GlobalNamespace.Ref> linkedList0 = new LinkedList<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) linkedList0;
      boolean boolean0 = globalNamespace_Name0.shouldKeepKeys();
      assertFalse(boolean0);
      
      globalNamespace_Name0.needsToBeStubbed();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("com.google.javascript.jscomp.AnalyzeNameReferences$NameInfo", globalNamespace_Name0, false);
      boolean boolean1 = globalNamespace_Name1.canEliminate();
      globalNamespace_Name1.needsToBeStubbed();
      GlobalNamespace.Ref.Type.values();
      GlobalNamespace.Ref.Type.values();
      boolean boolean2 = globalNamespace_Name0.needsToBeStubbed();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, (Node) null);
      SimpleFunctionAliasAnalysis simpleFunctionAliasAnalysis0 = new SimpleFunctionAliasAnalysis();
      SimpleDefinitionFinder simpleDefinitionFinder0 = new SimpleDefinitionFinder(compiler0);
      simpleFunctionAliasAnalysis0.analyze(simpleDefinitionFinder0);
      SpecializeModule.SpecializationState specializeModule_SpecializationState0 = new SpecializeModule.SpecializationState(simpleFunctionAliasAnalysis0);
      Set<Node> set0 = specializeModule_SpecializationState0.getSpecializedFunctions();
      // Undeclared exception!
      try { 
        globalNamespace0.scanNewNodes((Scope) null, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-124);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".(");
      byteArray0[4] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, false);
      List<GlobalNamespace.Ref> list0 = globalNamespace_Name0.refs;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      globalNamespace_Name0.globalSets = 3;
      globalNamespace_Name0.setIsClassOrEnum();
      globalNamespace_Name0.refs = null;
      globalNamespace_Name0.totalGets = 655;
      globalNamespace_Name0.canCollapse();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = globalNamespace_Name0.canCollapse();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Ref0.isSet();
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = globalNamespace_Name0.needsToBeStubbed();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "P-rPivNQa";
      Logger logger0 = Logger.getGlobal();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("P-rPivNQa").when(supplier0).get();
      logger0.info(supplier0);
      boolean boolean0 = true;
      logger0.setUseParentHandlers(boolean0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      compiler0.setErrorManager(loggerErrorManager0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(string0, sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      globalNamespace0.getNameIndex();
      GlobalNamespace globalNamespace1 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace1.getNameIndex();
      List<GlobalNamespace.Name> list0 = new Vector<GlobalNamespace.Name>();
      GlobalNamespace.Name.Type.valueOf(string0);
      globalNamespace1.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      String string1 = "lHl";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string1, globalNamespace_Name0, boolean0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name1.declaration = globalNamespace_Ref1;
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type3 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type3);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.canCollapse();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("rlVcJ^y=RK2x", (GlobalNamespace.Name) null, false);
      Vector<GlobalNamespace.Ref> vector0 = new Vector<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) vector0;
      globalNamespace_Name0.canCollapse();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rlVcJ^y=RK2x");
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("rlVcJ^y=RK2x", false);
      globalNamespace_Name0.removeRef(globalNamespace_Ref1);
      globalNamespace_Name0.needsToBeStubbed();
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      Compiler compiler0 = new Compiler();
      ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, externExportsPass0);
      nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        RuntimeTypeCheck.getBoilerplateCode(compiler0, "s)t?~#fSJ||V{>%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, true);
      boolean boolean0 = globalNamespace_Name0.canEliminate();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("a?rR[ nizl- Z", true);
      String string0 = globalNamespace_Name0.toString();
      assertEquals("a?rR[ nizl- Z (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string0);
      
      boolean boolean1 = globalNamespace_Name0.canCollapse();
      assertTrue(boolean1 == boolean0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
      
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("<", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.fullName();
      globalNamespace_Name0.canCollapse();
      globalNamespace_Name0.toString();
      LinkedList<GlobalNamespace.Ref> linkedList0 = new LinkedList<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) linkedList0;
      globalNamespace_Name0.shouldKeepKeys();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.shouldKeepKeys();
      globalNamespace_Name0.globalSets = 46;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name0.canEliminate();
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type0);
      // Undeclared exception!
      try { 
        GlobalNamespace.Name.Type.valueOf("<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.GlobalNamespace.Name.Type.<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("HjICp#4", (GlobalNamespace.Name) null, true);
      Stack<GlobalNamespace.Ref> stack0 = new Stack<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) stack0;
      stack0.addAll((Collection<? extends GlobalNamespace.Ref>) globalNamespace_Name0.refs);
      stack0.ensureCapacity(0);
      globalNamespace_Name0.fullName();
      stack0.remove((Object) globalNamespace_Name0.refs);
      globalNamespace_Name0.localSets = 64;
      globalNamespace_Name0.inExterns = true;
      String string0 = globalNamespace_Name0.toString();
      assertEquals("HjICp#4 (OTHER): globalSets=0, localSets=64, totalGets=0, aliasingGets=0, callGets=0", string0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      globalNamespace_Name0.docInfo = jSDocInfo0;
      globalNamespace_Name0.setIsClassOrEnum();
      jSDocInfo0.getThrownTypes();
      globalNamespace_Name0.isNamespace();
      globalNamespace_Name0.canCollapse();
      globalNamespace_Name0.isNamespace();
      boolean boolean0 = globalNamespace_Name0.canCollapseUnannotatedChildNames();
      boolean boolean1 = globalNamespace_Name0.isNamespace();
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = globalNamespace_Name0.canCollapse();
      globalNamespace_Name0.fullName();
      globalNamespace_Name0.needsToBeStubbed();
      boolean boolean3 = globalNamespace_Name0.needsToBeStubbed();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "P-rPivNQa";
      Logger logger0 = Logger.getGlobal();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("P-rPivNQa").when(supplier0).get();
      logger0.info(supplier0);
      boolean boolean0 = true;
      logger0.setUseParentHandlers(boolean0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile.fromCode(string0, string0);
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      String string1 = "lHl";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string1, globalNamespace_Name0, boolean0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name1.declaration = globalNamespace_Ref1;
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type3 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type3);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.canCollapse();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "P-rPivNQa";
      Logger logger0 = Logger.getGlobal();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("P-rPivNQa").when(supplier0).get();
      logger0.info(supplier0);
      boolean boolean0 = true;
      logger0.setUseParentHandlers(boolean0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      compiler0.setErrorManager(loggerErrorManager0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(string0, sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      globalNamespace0.getNameIndex();
      globalNamespace0.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      globalNamespace0.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      String string1 = "lHl";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string1, globalNamespace_Name0, boolean0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name1.declaration = globalNamespace_Ref1;
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type3 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type3);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.canCollapse();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, false);
      globalNamespace_Name0.globalSets = 118;
      globalNamespace_Name0.shouldKeepKeys();
      globalNamespace_Name0.toString();
      GlobalNamespace.Name.Type.values();
      globalNamespace_Name0.canCollapse();
      Compiler compiler0 = new Compiler();
      CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.Type.valueOf("com.google.javascript.jscomp.GlobalNamespace$NodeFilter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.GlobalNamespace.Ref.Type.com.google.javascript.jscomp.GlobalNamespace$NodeFilter
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("b*", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.setIsClassOrEnum();
      ArrayList<GlobalNamespace.Name> arrayList0 = new ArrayList<GlobalNamespace.Name>();
      globalNamespace_Name0.canEliminate();
      LinkedList<GlobalNamespace.Ref> linkedList0 = new LinkedList<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) linkedList0;
      globalNamespace_Name0.shouldKeepKeys();
      globalNamespace_Name0.needsToBeStubbed();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("com.google.javascript.jscomp.AnalyzeNameReferences$NameInfo", globalNamespace_Name0, true);
      globalNamespace_Name1.canEliminate();
      globalNamespace_Name1.needsToBeStubbed();
      GlobalNamespace.Ref.Type.values();
      GlobalNamespace.Ref.Type.values();
      globalNamespace_Name0.needsToBeStubbed();
      globalNamespace_Name1.canCollapse();
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.setIsClassOrEnum();
      globalNamespace_Name0.canEliminate();
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.canEliminate();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.addProperty("a?rR[ nizl- Z", true);
      globalNamespace_Name0.toString();
      globalNamespace_Name0.canCollapse();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.Type.valueOf("a?rR[ nizl- Z (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.GlobalNamespace.Ref.Type.a?rR[ nizl- Z (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("a?rR[ nizl- Z", false);
      globalNamespace_Name0.callGets = (-739);
      FileSystemHandling.shouldAllThrowIOExceptions();
      globalNamespace_Name0.toString();
      globalNamespace_Name0.canCollapse();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name1.setIsClassOrEnum();
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GlobalNamespace.Name.Type.values();
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("Ou?}:0{", (GlobalNamespace.Name) null, false);
      globalNamespace_Name0.canEliminate();
      globalNamespace_Name0.shouldKeepKeys();
      globalNamespace_Name0.shouldKeepKeys();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.shouldKeepKeys();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, true);
      boolean boolean0 = globalNamespace_Name0.canEliminate();
      Vector<GlobalNamespace.Ref> vector0 = new Vector<GlobalNamespace.Ref>(125);
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) vector0;
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("a?rR[ nizl- Z", true);
      String string0 = globalNamespace_Name0.toString();
      assertEquals("a?rR[ nizl- Z (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string0);
      
      boolean boolean1 = globalNamespace_Name0.canCollapse();
      assertTrue(boolean1 == boolean0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "@b9h";
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("@b9h", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.isNamespace();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.DIRECT_GET;
      globalNamespace_Name0.aliasingGets = (-291);
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      globalNamespace_Name0.globalSets = 3;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name0.totalGets = 685;
      GlobalNamespace.Ref globalNamespace_Ref2 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type0);
      globalNamespace_Name0.setIsClassOrEnum();
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type3 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type3);
      globalNamespace_Ref2.cloneAndReclassify(globalNamespace_Ref_Type0);
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GlobalNamespace.Name.Type.values();
      globalNamespace_Name0.shouldKeepKeys();
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref2, globalNamespace_Ref1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("b*", (GlobalNamespace.Name) null, true);
      ArrayList<GlobalNamespace.Name> arrayList0 = new ArrayList<GlobalNamespace.Name>();
      globalNamespace_Name0.props = (List<GlobalNamespace.Name>) arrayList0;
      globalNamespace_Name0.canEliminate();
      LinkedList<GlobalNamespace.Ref> linkedList0 = new LinkedList<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) linkedList0;
      globalNamespace_Name0.needsToBeStubbed();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("com.google.javascript.jscomp.AnalyzeNameReferences$NameInfo", globalNamespace_Name0, false);
      globalNamespace_Name1.canEliminate();
      globalNamespace_Ref0.isSet();
      GlobalNamespace.Ref.Type.values();
      GlobalNamespace.Ref.Type.values();
      globalNamespace_Name0.needsToBeStubbed();
      globalNamespace_Name1.canCollapse();
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.setIsClassOrEnum();
      globalNamespace_Name1.isNamespace();
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Name1.declaration;
      // Undeclared exception!
      try { 
        globalNamespace_Name1.removeRef((GlobalNamespace.Ref) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.GlobalNamespace$Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, true);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.declaration = globalNamespace_Ref0;
      boolean boolean0 = globalNamespace_Name0.canEliminate();
      Vector<GlobalNamespace.Ref> vector0 = new Vector<GlobalNamespace.Ref>(125);
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) vector0;
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("a?rR[ nizl- Z", true);
      String string0 = globalNamespace_Name0.toString();
      assertEquals("a?rR[ nizl- Z (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string0);
      
      boolean boolean1 = globalNamespace_Name0.canCollapse();
      assertTrue(boolean1 == boolean0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      globalNamespace_Name0.addRef(globalNamespace_Ref1);
      globalNamespace_Name0.removeRef(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("b*", (GlobalNamespace.Name) null, true);
      ArrayList<GlobalNamespace.Name> arrayList0 = new ArrayList<GlobalNamespace.Name>();
      globalNamespace_Name0.props = (List<GlobalNamespace.Name>) arrayList0;
      globalNamespace_Name0.canEliminate();
      LinkedList<GlobalNamespace.Ref> linkedList0 = new LinkedList<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) linkedList0;
      globalNamespace_Name0.needsToBeStubbed();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("com.google.javascript.jscomp.AnalyzeNameReferences$NameInfo", globalNamespace_Name0, false);
      globalNamespace_Ref0.isSet();
      GlobalNamespace.Ref.Type.values();
      GlobalNamespace.Ref.Type.values();
      globalNamespace_Name0.needsToBeStubbed();
      globalNamespace_Name1.canCollapse();
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.setIsClassOrEnum();
      globalNamespace_Name1.isNamespace();
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "P-rPivNQa";
      Logger logger0 = Logger.getGlobal();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("P-rPivNQa").when(supplier0).get();
      logger0.info(supplier0);
      boolean boolean0 = true;
      logger0.setUseParentHandlers(boolean0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      compiler0.setErrorManager(loggerErrorManager0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(string0, string0);
      Node node0 = compiler0.parse(jSSourceFile0);
      jSSourceFile0.getCode();
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      globalNamespace0.getNameIndex();
      GlobalNamespace globalNamespace1 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace1.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace1.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      String string1 = "lHl";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string1, globalNamespace_Name0, boolean0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref2 = globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name1.declaration = globalNamespace_Ref1;
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type3 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type3);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.canCollapse();
      GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.canEliminate();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("a?rR[ nizl- Z", globalNamespace_Name0, false);
      globalNamespace_Name0.canCollapse();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "P-rPivNQa";
      Logger logger0 = Logger.getGlobal();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("P-rPivNQa").when(supplier0).get();
      logger0.info(supplier0);
      boolean boolean0 = true;
      logger0.setUseParentHandlers(boolean0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      compiler0.setErrorManager(loggerErrorManager0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(string0, sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      jSSourceFile0.getCode();
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      globalNamespace0.getNameIndex();
      GlobalNamespace globalNamespace1 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace1.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace1.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      String string1 = "lHl";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string1, globalNamespace_Name0, boolean0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name1.declaration = globalNamespace_Ref1;
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type3 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref1.cloneAndReclassify(globalNamespace_Ref_Type3);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.canCollapse();
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("a?rR[ nizl- Z", (GlobalNamespace.Name) null, true);
      globalNamespace_Name0.canEliminate();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GlobalNamespace.Name globalNamespace_Name1 = globalNamespace_Name0.addProperty("a?rR[ nizl- Z", true);
      globalNamespace_Name0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      globalNamespace_Name0.canCollapse();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.removeRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "P-rPivNQa";
      Logger logger0 = Logger.getGlobal();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("P-rPivNQa").when(supplier0).get();
      logger0.info(supplier0);
      boolean boolean0 = true;
      logger0.setUseParentHandlers(boolean0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      compiler0.setErrorManager(loggerErrorManager0);
      compiler0.getTopScope();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(string0, sourceFile_Generator0);
      String string1 = jSSourceFile0.getCode();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      String string2 = "lHl";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string2, globalNamespace_Name0, boolean0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      globalNamespace_Name1.declaration = globalNamespace_Ref0;
      Vector<GlobalNamespace.Ref> vector1 = new Stack<GlobalNamespace.Ref>();
      globalNamespace_Name1.refs = (List<GlobalNamespace.Ref>) vector1;
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.ALIASING_GET;
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("b*", (GlobalNamespace.Name) null, true);
      ArrayList<GlobalNamespace.Name> arrayList0 = new ArrayList<GlobalNamespace.Name>();
      globalNamespace_Name0.props = (List<GlobalNamespace.Name>) arrayList0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<GlobalNamespace.Ref> linkedList0 = new LinkedList<GlobalNamespace.Ref>();
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) linkedList0;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("com.google.javascript.jscomp.AnalyzeNameReferences$NameInfo", globalNamespace_Name0, false);
      globalNamespace_Ref0.isSet();
      globalNamespace_Ref0.isSet();
      GlobalNamespace.Ref.Type.values();
      GlobalNamespace.Ref.Type.values();
      globalNamespace_Name0.needsToBeStubbed();
      globalNamespace_Name1.canCollapse();
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.setIsClassOrEnum();
      globalNamespace_Name1.isNamespace();
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
      assertNotSame(globalNamespace_Name0, globalNamespace_Name1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("", (GlobalNamespace.Name) null, false);
      globalNamespace_Name0.localSets = 1699;
      globalNamespace_Name0.shouldKeepKeys();
      globalNamespace_Name0.canCollapse();
      GlobalNamespace.Name.Type[] globalNamespace_Name_TypeArray0 = GlobalNamespace.Name.Type.values();
      assertEquals(3, globalNamespace_Name_TypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref1);
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("-rPivNa").when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("-rPivNa", sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace0.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      Scope scope0 = new Scope(node0, compiler0);
      // Undeclared exception!
      try { 
        globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("-rPivNa").when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("-rPivNa", sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace0.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      node0.removeChildren();
      Scope scope0 = new Scope(node0, compiler0);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace0.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("b*", (GlobalNamespace.Name) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<GlobalNamespace.Ref> linkedList0 = new LinkedList<GlobalNamespace.Ref>();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name("b*", globalNamespace_Name0, false);
      boolean boolean0 = globalNamespace_Ref0.isSet();
      globalNamespace_Name0.addRef(globalNamespace_Ref0);
      GlobalNamespace.Ref.Type.values();
      GlobalNamespace.Ref.Type.values();
      boolean boolean1 = globalNamespace_Name0.needsToBeStubbed();
      boolean boolean2 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean2 == boolean1);
      
      globalNamespace_Name1.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.setIsClassOrEnum();
      globalNamespace_Name1.isNamespace();
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.setIsClassOrEnum();
      boolean boolean3 = globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
      boolean boolean4 = globalNamespace_Name0.canEliminate();
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = globalNamespace_Name0.isNamespace();
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sU1JOIldg+$],E_");
      GlobalNamespace.Name globalNamespace_Name0 = new GlobalNamespace.Name("sU1JOIldg+$],E_", (GlobalNamespace.Name) null, true);
      Stack<GlobalNamespace.Ref> stack0 = new Stack<GlobalNamespace.Ref>();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      globalNamespace_Name0.declaration = globalNamespace_Ref0;
      globalNamespace_Name0.refs = (List<GlobalNamespace.Ref>) stack0;
      globalNamespace_Name0.localSets = (-1266);
      globalNamespace_Name0.localSets = 892;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type2 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type2);
      globalNamespace_Name0.aliasingGets = (-1266);
      GlobalNamespace.Ref.markTwins(globalNamespace_Name0.declaration, globalNamespace_Ref1);
      globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Name[] globalNamespace_NameArray0 = new GlobalNamespace.Name[0];
      stack0.toArray(globalNamespace_NameArray0);
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      globalNamespace_Name0.canCollapseUnannotatedChildNames();
      GlobalNamespace.Name.Type.values();
      // Undeclared exception!
      try { 
        GlobalNamespace.Ref.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.GlobalNamespace.Ref.Type.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("com.google.javascript.jscomp.GlobalNamespace$NodeFilter").when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("com.google.javascript.jscomp.GlobalNamespace$NodeFilter", sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace0.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      node0.removeChildren();
      Scope scope0 = new Scope(node0, compiler0);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace0.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("-rP5=Na").when(sourceFile_Generator0).getCode();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("-rP5=Na", sourceFile_Generator0);
      Node node0 = compiler0.parse(jSSourceFile0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      globalNamespace0.getNameIndex();
      Vector<GlobalNamespace.Name> vector0 = new Vector<GlobalNamespace.Name>();
      node0.removeChildren();
      Scope scope0 = new Scope(node0, compiler0);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      globalNamespace0.scanNewNodes(scope0, (Set<Node>) null);
      GlobalNamespace.Name.Type globalNamespace_Name_Type0 = GlobalNamespace.Name.Type.OBJECTLIT;
      globalNamespace0.getNameForest();
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
  }
}
