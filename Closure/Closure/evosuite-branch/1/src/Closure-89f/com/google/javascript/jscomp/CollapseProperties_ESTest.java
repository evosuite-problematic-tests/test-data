/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 10:01:17 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CollapseProperties;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollapseProperties_ESTest extends CollapseProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, true, false);
      Node node0 = Node.newNumber(1298.33425348);
      // Undeclared exception!
      try { 
        collapseProperties0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, false);
      Node node0 = new Node((-329));
      collapseProperties0.process(node0, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Node node0 = new Node(49);
      CollapseProperties collapseProperties0 = new CollapseProperties((AbstractCompiler) null, false, true);
      collapseProperties0.process(node0, node0);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }
}
