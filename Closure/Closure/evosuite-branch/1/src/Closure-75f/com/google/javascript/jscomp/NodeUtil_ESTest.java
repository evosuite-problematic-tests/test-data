/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 09:26:52 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Node node0 = Node.newString("", 153, 9);
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_BooleanResultPredicate0, nodeUtil_MatchShallowStatement0, supplier0, node0, true);
      List<Node> list0 = astParallelizer0.split();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("", list0, node0, (-23), (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node((-1302), 0, (-1800));
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">&tpxWms;vK8!_", (-432), (-432));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "", (-1653), (-1653));
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString(41, "8)yL[PHMT|f87 |\"");
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString((-2343), "");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 19);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node((-720));
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString(126, "qLOqZi@:O++i)gvvM|");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString((-2343), "");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "", node0, "vy<sqrrd");
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "", 0, 93);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 93);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(429, (-2302), (-731));
      int int0 = NodeUtil.getNameReferenceCount(node0, "1t<f[-");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SyntheticAst syntheticAst0 = new SyntheticAst("[GC9yrt,]");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-3826), compilerOptions0.sourceMapDetailLevel);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString("WCD4@jVM{^S9Ji.&");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString(105, "6$0ia@pU*", 1190, (-47));
      Node node1 = NodeUtil.getFunctionBody(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = MockFile.createTempFile("<<=", "com.google.javascript.jscomp.DefaultPassConfig$23");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      JsAst jsAst0 = new JsAst(sourceFile_OnDisk0);
      CompilerInput compilerInput0 = new CompilerInput(jsAst0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compilerInput0.setCompiler(compiler0);
      Node node0 = compilerInput0.getAstRoot(compiler0);
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString((-8), ">=");
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node((-1302), 0, (-1800));
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "/", (-1653), 4948);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, hashSet0);
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString((-2343), "");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-485));
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">&tpxWms;vK8!_", (-432), (-432));
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(2283.9214333, (-2496), 2497);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-485));
      node0.addChildrenToBack(node0);
      String string0 = NodeUtil.arrayToString(node0);
      assertEquals(">&tpxWms;vK8!_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-485));
      Node node1 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">&tpxWms;vK8!_", (-432), (-432));
      node0.addChildrenToBack(node1);
      String string0 = NodeUtil.arrayToString(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("55296", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber(602.3361498, 111, 111);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("602.3361498", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber(2283.9214333, (-2496), 2497);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(2283.9214333, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "/", (-1653), 4948);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0, node0.getChildCount());
      assertNull(double0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString("A*n0nZ<[*>VHg}");
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)31);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromInputStream(">&tpxms;vK8!_", (InputStream) bufferedInputStream0);
      Node node0 = compiler0.parse(jSSourceFile0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("a");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("+<Ma)~IGI");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("Unknown op ");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("() {\n\t");
      assertEquals("() {", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-485));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">&tpxWms;vK8!_", (-432), (-432));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      node0.setString("undefined");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", (-432), (-432));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("A*n0nZ<[*>VHg}");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.LinkedListMultimap$Node", "com.google.common.collect.LinkedListMultimap$Node");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(">>=");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString(3048, "qLOqZi@:O++i)gvvM|");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-428));
      Node node1 = new Node(22, node0, node0, node0, 29, 44);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString(28, ">&tpxWms;vK8!_");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-428));
      Node node1 = new Node(29, node0, node0, 0, 31);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(33);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(50);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(53);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(54);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(61);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(71);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(73);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(80);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(90);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<FunctionType> linkedHashSet0 = new LinkedHashSet<FunctionType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(111, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(113);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(117);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(17, (-2997), (-2997));
      Node node1 = NodeUtil.newVarNode("() {\n\t", node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">&tpxWms;vK8!_", (-432), (-432));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(3841.1476369350244, 26, (-1787));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "{", "{");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "m", "m");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-459));
      Node node1 = new Node(17, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(3048, "qLOqZi@:O++i)gvvM|");
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(30, "?DW\"A%;5.nM}/", (-3014), 15);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">&tpxWms;vK8!_", (-432), (-432));
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.LinkedListMultimap$Node", "com.google.common.collect.LinkedListMultimap$Node");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, (Set<String>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Compiler compiler0 = new Compiler();
      File file0 = MockFile.createTempFile("$+KD6`^2#", "$+ZI-u%F.\bu<{ha");
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0, charset0);
      Node node0 = compiler0.parse(jSSourceFile0);
      nodeArray0[0] = node0;
      Node node1 = new Node((-116), nodeArray0, 2, 21);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripNameSuffixes);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=50> (type 50)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=53> (type 53)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for getvar (type 54)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(56);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=56> (type 56)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(61);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for thisfn (type 61)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ref_special (type 69)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = NodeUtil.precedence(89);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NodeUtil.precedence(97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NodeUtil.precedence(105);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for finally (type 121)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = NodeUtil.precedence(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NodeUtil.precedence(124);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for eof (type 0)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<FunctionType> linkedHashSet0 = new LinkedHashSet<FunctionType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node1 = new Node(11, node0, node0, node0, node0, 0, (-1));
      boolean boolean0 = NodeUtil.valueCheck(node1, nodeUtil_NumbericResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newNumber(3841.1476369350244, 26, (-1787));
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_NumbericResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString(34, "u");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber(2283.9214333, (-2496), 2497);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      boolean boolean0 = nodeUtil_BooleanResultPredicate0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-485));
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = nodeUtil_MayBeStringResultPredicate0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(41, "8)yL[PHMT|f87 |\"");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      node0.setType(42);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      Node node1 = node0.removeFirstChild();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(3048);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(101);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(126);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      Node node1 = new Node(90, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.isAssignmentOp(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber(3841.1476369350244, 26, (-1787));
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(33, (-2959), (-2959));
      boolean boolean0 = NodeUtil.isGet(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "", (-1653), (-1653));
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(17, (-2997), (-2997));
      Node node1 = NodeUtil.newVarNode("() {\n\t", node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("expected one element but was: <", "expected one element but was: <");
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(17, (-2998), (-2998));
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(3841.1476369350244, 26, (-1787));
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MayBeStringResultPredicate", 1, (-2017));
      NodeUtil.getLoopCodeBlock(node0);
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber(2283.9214333, (-2496), 2497);
      Node node1 = new Node(4095, node0, node0, node0, 29, 2139);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NUMBER 0.0 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Vector<Node> vector0 = new Vector<Node>();
      Node node0 = Node.newNumber(983.1664);
      Node node1 = NodeUtil.newFunctionNode("is_dispatcher", vector0, node0, 29, (-3774));
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionDeclaration(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "/", (-1653), 4948);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A*n0nZ<[*>VHg}", "A*n0nZ<[*>VHg}");
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("Infinity");
      Compiler compiler0 = new Compiler();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      boolean boolean0 = NodeUtil.isStatementParent(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(17, (-2998), (-2998));
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<FunctionType> linkedHashSet0 = new LinkedHashSet<FunctionType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(111, node0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: LP of CASE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A*n0nZ<[*>VHg}", "A*n0nZ<[*>VHg}");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(81, nodeArray0, 2, 3809);
      boolean boolean0 = NodeUtil.tryMergeBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(3048, "qLOqZi@:O++i)gvvM|");
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("A*n0nZ<[*>VHg}");
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(17, (-2997), (-2997));
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString("T{9Q7m&@s@af?pqDC5", 117, 96);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.javascript.rhino.jstype.JSTypeRegistry", 0, 0);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(3048, "qLOqZi@:O++i)gvvM|");
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-428));
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals(">&tpxWms;vK8!_", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber((double) 729, (-464), 568);
      Node node1 = new Node((-658), node0, node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -658
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString(3048, "qLOqZi@:O++i)gvvM|");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.getType("DK|i*DH]?");
      JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) arrayList0);
      JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, functionType0);
      assertSame(jSType1, functionType0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newNumber(3841.1476369350244, 26, (-1787));
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = NodeUtil.opToStr(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = NodeUtil.opToStr(10);
      assertEquals("^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = NodeUtil.opToStr(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(19);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(24);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = NodeUtil.opToStr(33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 34: SETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 35: GETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 47: REGEXP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = NodeUtil.opToStr(49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = NodeUtil.opToStr(51);
      assertEquals("in", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(52);
      assertEquals("instanceof", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(53);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 53: LOCAL_LOAD
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = NodeUtil.opToStr(60);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(63);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 63: ARRAYLIT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = NodeUtil.opToStr(65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = NodeUtil.opToStr(66);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = NodeUtil.opToStr(67);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = NodeUtil.opToStr(80);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = NodeUtil.opToStr(84);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = NodeUtil.opToStr(91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = NodeUtil.opToStr(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = NodeUtil.opToStr(104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = NodeUtil.opToStr(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = NodeUtil.opToStr(114);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = NodeUtil.opToStr(121);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55296);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString(">&tpxWms;vK8!_", (-485), (-485));
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node((-1302), 0, (-1800));
      Node node1 = NodeUtil.newName(closureCodingConvention0, "com.google.javascript.jscomp.ProcessTweaks$TweakFunction", node0, "com.google.javascript.jscomp.ProcessTweaks$TweakFunction");
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertTrue(node2.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<FunctionType> linkedHashSet0 = new LinkedHashSet<FunctionType>();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(linkedHashSet0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "I/", (-1653), 4948);
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber(2283.9214333, (-2496), 2497);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "NUMBER 2283.9214333", node0, "NUMBER 2283.9214333");
      assertEquals(0, node1.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("typeof");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(45, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "/", (-1653), 4948);
      Node node1 = new Node(25, node0, node0, node0, node0, 25, 4);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "/", (-1653), 4948);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(753);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(92, 2542, 1739);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("qLOqZi@:O++i)gvvM|", "Infinity");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "qLOqZi@:O++i)gvvM|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(17, (-2997), (-2997));
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(17, (-2997), (-2997));
      Node node1 = NodeUtil.newVarNode("() {\n\t", node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A*n0nZ<[*>VHg}", "A*n0nZ<[*>VHg}");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      Node node1 = new Node((-646), node0, node0, node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(8);
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchShallowStatement0, sourceMap_DetailLevel0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "/", (-1653), 4948);
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      Node node0 = NodeUtil.newVarNode("", (Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber(2283.9214333, (-2496), 2497);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Compiler compiler0 = new Compiler();
      File file0 = MockFile.createTempFile("$+KD6`^2#", "$+ZI-u%F.\bu<{ha");
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0, charset0);
      Node node0 = compiler0.parse(jSSourceFile0);
      nodeArray0[0] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(nodeArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A*n0nZ<[*>VHg}", "A*n0nZ<[*>VHg}");
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString("T{9Q7m&@s@af?pqDC5", 117, 96);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = NodeUtil.newVarNode("", node0);
      assertEquals(118, node1.getType());
      
      NodeUtil.getInfoForNameNode(node0);
      assertFalse(node0.hasOneChild());
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("|9b");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "m", "m");
      String string0 = NodeUtil.getSourceName(node0);
      assertNotNull(string0);
      assertEquals(" [testcode] ", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber((double) 55296, (-464), 568);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString(3048, "qLOqZi@:O++i)gvvM|");
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "m", "m");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
