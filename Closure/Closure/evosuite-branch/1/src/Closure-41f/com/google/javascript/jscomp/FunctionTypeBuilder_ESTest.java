/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 08:10:18 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(0);
      FunctionTypeBuilder functionTypeBuilder0 = null;
      try {
        functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "pC~B}y.O_l7C|+z2=", (Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FunctionTypeBuilder.FunctionContents functionTypeBuilder_FunctionContents0 = FunctionTypeBuilder.UnknownFunctionContents.get();
      Iterable<String> iterable0 = functionTypeBuilder_FunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FunctionTypeBuilder.FunctionContents functionTypeBuilder_FunctionContents0 = FunctionTypeBuilder.UnknownFunctionContents.get();
      boolean boolean0 = functionTypeBuilder_FunctionContents0.mayBeFromExterns();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      Node node0 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(")h@:G+,$ou?r9", compiler0, node0, ")h@:G+,$ou?r9", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(")h@:G+,$ou?r9", compiler0, node0, ")h@:G+,$ou?r9", (Scope) null);
      functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
      functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents((Node) null);
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
      
      functionTypeBuilder_AstFunctionContents0.recordNonEmptyReturn();
      assertTrue(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ":&O_qT[_O>Vsj~UzyF", ":&O_qT[_O>Vsj~UzyF");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("OSS`?YxWPo%xb{K^{0", compiler0, node0, ":I>$w", scope0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents((FunctionTypeBuilder.FunctionContents) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ":&O_qT[_O>Vsj~UzyF", ":&O_qT[_O>Vsj~UzyF");
      Scope scope0 = new Scope(node0, compiler0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("OSS`?YxWPo%xb{K^{0", compiler0, node0, ":I>$w", scope0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      Node node1 = new Node(2, node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      Node node1 = new Node(41, node0, node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add((JSType) objectType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a type name", compiler0, node0, "JSC_TEMPLATE_TYPE_DUPLICATED", (Scope) null);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      Node node1 = new Node(41, node0, node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
      functionTypeBuilder0.inferThisType(jSDocInfo0, functionType0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, objectType0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("variable length argument must be last", "$gP@0", 46, 4095);
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, jSType1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(")h@:G+,$ou?r9", compiler0, node0, ")h@:G+,$ou?r9", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a type name", compiler0, node0, "JSC_TEMPLATE_TYPE_DUPLICATED", (Scope) null);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = Node.newNumber(1.105153342516324);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a type name", compiler0, node0, "Named type with empty name component", (Scope) null);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = Node.newNumber(1.105153342516324);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("Not declared as a type name", compiler0, node0, "Named type with empty name component", (Scope) null);
      JSType[] jSTypeArray0 = new JSType[3];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      functionTypeBuilder1.inferParameterTypes(node1, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(")h@:G+,$ou?r9", compiler0, node0, ")h@:G+,$ou?r9", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$gP@0", compiler0, node0, "$gP@0", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(")h@:G+,$ou?r9", compiler0, node0, ")h@:G+,$ou?r9", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
      functionTypeBuilder1.buildAndRegister();
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName("variable length argument must be last");
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
      assertTrue(iterable0.contains("variable length argument must be last"));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName("");
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName("");
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }
}
