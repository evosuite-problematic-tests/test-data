/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 08:42:15 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.rhino.Node;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionRewriter_ESTest extends FunctionRewriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_emptyFn() {  return function() {}}");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromInputStream("com.google.common.base.Joiner$1", (InputStream) byteArrayInputStream0);
      compiler0.parse(jSSourceFile0);
      functionRewriter0.process(node0, node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      node0.setType(4095);
      functionRewriter0.process(node0, node0);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
      node0.setType(130);
      functionRewriter0.process(node0, node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JYCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      functionRewriter0.process(node0, node0);
      assertEquals(1, Node.LEFT);
  }
}
