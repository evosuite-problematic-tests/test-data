/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 08:44:15 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator("YQ<^", sourceFile_Generator0);
      sourceFile0.clearCachedSource();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("/v*`7~", "dnKt''<h40$~d2A90Z-");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, (Charset) null);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("Kb>9GsmD*]}XOYn:@&k", charset0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}oxv");
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromReader("}oxv", stringReader0);
      sourceFile_Preloaded0.setIsExtern(false);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = MockFile.createTempFile("/v*`7~", "dnKt''<h40$~d2A90Z-");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, (Charset) null);
      sourceFile_OnDisk0.getNumLines();
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascript.jscomp.SourceFile$Generated", "");
      sourceFile_Preloaded0.clearCachedSource();
      assertEquals("com.google.javascript.jscomp.SourceFile$Generated", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'_o[San/n;)z_7R?$(");
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile((File) mockFile0);
      sourceFile_OnDisk0.getCodeNoCache();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("`RUi':y9T>ec{.yiGN", "`RUi':y9T>ec{.yiGN", "");
      sourceFile0.getName();
      assertEquals("`RUi':y9T>ec{.yiGN", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("/v*`7~", "dnKt''<h40$~d2A90Z-");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, (Charset) null);
      sourceFile_OnDisk0.toString();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("i;|cpHkjN");
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1635, (byte) (-1));
      // Undeclared exception!
      try { 
        SourceFile.fromInputStream("", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-8", "UTF-8");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      boolean boolean0 = sourceFile_OnDisk0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        SourceFile.fromInputStream((String) null, "Error listing files for ", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("YQ<^", "YQ<^");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      sourceFile_OnDisk0.getNumLines();
      // Undeclared exception!
      try { 
        sourceFile_OnDisk0.getLineOffset((-3453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -3453
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("YQ<^", "A(a9`");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      sourceFile_OnDisk0.getLineOffset(1);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("\n", sourceFile_Generator0);
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(543);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 0
         // Actual: 543
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("^J':M)D", "DJ?iRWLT,:t:Y", "HaW)2;");
      sourceFile_Preloaded0.getNumLines();
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals("^J':M)D", sourceFile_Preloaded0.getName());
      assertEquals("DJ?iRWLT,:t:Y", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(1, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator("8n", sourceFile_Generator0);
      String string0 = sourceFile0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}oxv");
      SourceFile sourceFile0 = SourceFile.fromReader("}oxv", stringReader0);
      sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("YQ<^", "A(a9`");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("\n", sourceFile_Generator0);
      String string0 = sourceFile0.getLine(1);
      assertFalse(sourceFile0.isExtern());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("/v*`7~", "dnKt''<h40$~d2A90Z-");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, (Charset) null);
      sourceFile_OnDisk0.getLine(3);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActual: ", "\nActual: ");
      String string0 = sourceFile_Preloaded0.getLine(10);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UTF-16BE", "US-ASCII");
      File file0 = MockFile.createTempFile("s.tTF859Z+", "g", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      String string0 = sourceFile_OnDisk0.getLine(0);
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("US-ASCII").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("US-ASCII", sourceFile_Generator0);
      Region region0 = sourceFile0.getRegion(0);
      assertEquals("US-ASCII", region0.getSourceExcerpt());
      assertNotNull(region0);
      assertEquals(1, region0.getEndingLineNumber());
      
      String string0 = sourceFile0.getLine(0);
      assertEquals("US-ASCII", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("US-ASCII").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("US-ASCII", sourceFile_Generator0);
      Region region0 = sourceFile0.getRegion(10);
      assertFalse(sourceFile0.isExtern());
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator("\n", sourceFile_Generator0);
      Region region0 = sourceFile0.getRegion((-9));
      assertEquals(1, region0.getBeginningLineNumber());
      assertNotNull(region0);
      assertEquals(2, region0.getEndingLineNumber());
      assertFalse(sourceFile0.isExtern());
  }
}
