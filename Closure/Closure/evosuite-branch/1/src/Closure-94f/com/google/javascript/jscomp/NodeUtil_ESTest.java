/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 26 10:15:03 GMT 2018
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.AnonymousFunctionNamingPolicy;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LineNumberCheck;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeParametersAlt;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = NodeUtil.newQualifiedNameNode("Error", 113, 113);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NAME Error 113 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter(compiler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(verboseMessageFormatter0, mockPrintStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler1.parseSyntheticCode("!w^", "===");
      NodeUtil.evaluatesToLocalValue(node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        RuntimeTypeCheck.getBoilerplateCode(compiler1, ">:uLgnDQuk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-576), nodeArray0, (-576), 0);
      Node node1 = new Node(0, node0, 57, 8);
      boolean boolean0 = NodeUtil.isGetProp(node1);
      boolean boolean1 = NodeUtil.isObjectLitKey(node1, node1);
      assertTrue(boolean1 == boolean0);
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      int int0 = NodeUtil.getCount(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeUtil.isSimpleOperatorType((-3565));
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Node node0 = new Node((-3565));
      node0.setWasEmptyNode(false);
      Node node1 = NodeUtil.newVarNode("", node0);
      node0.children();
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3565
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = null;
      try {
        node0 = new Node(0, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[5];
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) peepholeFoldWithTypes0;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      abstractPeepholeOptimizationArray0[1] = (AbstractPeepholeOptimization) peepholeRemoveDeadCode0;
      PeepholeFoldWithTypes peepholeFoldWithTypes1 = new PeepholeFoldWithTypes();
      abstractPeepholeOptimizationArray0[2] = (AbstractPeepholeOptimization) peepholeFoldWithTypes1;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      abstractPeepholeOptimizationArray0[3] = (AbstractPeepholeOptimization) peepholeRemoveDeadCode1;
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      abstractPeepholeOptimizationArray0[4] = (AbstractPeepholeOptimization) peepholeSubstituteAlternateSyntax0;
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, peepholeOptimizationsPass0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler1.getInput((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      // Undeclared exception!
      try { 
        NodeUtil.newExpr((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("");
      Compiler compiler0 = new Compiler();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      NodeUtil.isConstantName(node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.isExprAssign(node0);
      assertFalse(boolean0);
      
      Stack<Node> stack0 = new Stack<Node>();
      Node node1 = NodeUtil.newFunctionNode("", stack0, node0, 37, 0);
      assertEquals(105, node1.getType());
      assertEquals(37, node1.getLineno());
      assertEquals(0, node1.getCharno());
      assertEquals(3, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node(40);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(sourceMap_DetailLevel0, sourceMap_DetailLevel0, supplier0, node0, true);
      List<Node> list0 = astParallelizer0.split();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("in", list0, node0, 11, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$VarCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newString(4573, "");
      node0.getQualifiedName();
      NodeUtil.getVarsDeclaredInBranch(node0);
      NodeUtil.isEmptyBlock(node0);
      NodeUtil.isConstantName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newString("-(?CE16?0/Amb2Y>y'", (-3), 0);
      NodeUtil.isNameReferenced(node0, (String) null);
      NodeUtil.mayEffectMutableState(node0);
      String string0 = "com.google.javascript.jscomp.DefaultPassConfig$75";
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.DefaultPassConfig$75", (String) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1342;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(1342);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1342
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = new Node((-1789));
      Node node1 = new Node(1412, node0, node0, node0, node0, 2347, 12);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getImplementedInterfaces();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      node1.setDirectives(set0);
      node1.removeProp(2);
      NodeUtil.getSourceName(node1);
      NodeUtil.isForIn(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1412
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      StrictModeCheck strictModeCheck0 = new StrictModeCheck((AbstractCompiler) null);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator((AbstractCompiler) null);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, strictModeCheck0, memoizedScopeCreator0);
      nodeTraversal0.getCurrentNode();
      // Undeclared exception!
      try { 
        NodeUtil.containsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = Node.newNumber(1366.67631, 876, 876);
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLatin("(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("CxD", 42, 42);
      boolean boolean0 = NodeUtil.isNew(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
      assertEquals(42, node0.getLineno());
      assertEquals(42, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(";@<Bb&lc.cG;'rOs2g");
      NodeUtil.newUndefinedNode(node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = new Node(15);
      Node node1 = NodeUtil.newQualifiedNameNode("BKL", node0, "YKoL8)");
      node0.setLineno(122);
      node1.setVarArgs(false);
      NodeUtil.containsCall(node1);
      NodeUtil.isVar(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("T9~B2(Cibn^");
      Compiler compiler0 = new Compiler();
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
      
      boolean boolean0 = NodeUtil.isFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      printStreamErrorManager0.getErrors();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      byteArrayOutputStream0.write(byteArray0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.getResult();
      printStreamErrorManager0.printSummary();
      compiler0.getDiagnosticGroups();
      Node node0 = compiler0.parseSyntheticCode("mf_g.bB~JR&u", "");
      NodeUtil.isHoistedFunctionDeclaration(node0);
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node1 = compiler0.jsRoot;
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((String) null, (Node) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = Node.newString(2704, "", (-1667), (-1667));
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = new Node((-1676), (-1676), (-1676));
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = new Node(37, 37, 37);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectApply(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = null;
      NodeUtil.newVarNode("hE$uF,srhg6q", (Node) null);
      String string0 = "com.google.javascript.jscomp.NodeUtil$1";
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        SourceMap.DetailLevel.valueOf("hE$uF,srhg6q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.SourceMap.DetailLevel.hE$uF,srhg6q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-733);
      Node node0 = null;
      String string0 = "bpi\\x)5dy}";
      MockPrintStream mockPrintStream0 = new MockPrintStream("bpix)5dy}");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node1 = compiler0.parseTestCode("bpix)5dy}");
      Node node2 = Normalize.parseAndNormalizeSyntheticCode(compiler0, string0, string0);
      boolean boolean0 = false;
      mockPrintStream0.println(boolean0);
      String string1 = "0";
      int int1 = 3;
      int int2 = 4;
      Node node3 = Node.newString(string1, int1, int2);
      node2.addChildAfter(node0, node0);
      compiler0.computeCFG();
      Node node4 = new Node(int0, node0, node2, node0);
      node4.replaceChild(node2, node2);
      boolean boolean1 = false;
      node1.setVarArgs(boolean1);
      NodeUtil.getAssignedValue(node4);
      NodeUtil.getInfoForNameNode(node0);
      NodeUtil.getFunctionInfo(node4);
      NodeUtil.containsCall(node4);
      NodeUtil.containsType(node4, node1.IS_NAMESPACE);
      NodeUtil.isSimpleOperator(node1);
      NodeUtil.tryMergeBlock(node3);
      String string2 = "";
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      int int3 = 126;
      int int4 = 85;
      NodeUtil.newFunctionNode(string2, arrayList0, node3, int3, int4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = new Node(0, (-159), 0);
      NodeUtil.referencesThis(node0);
      // Undeclared exception!
      try { 
        Node.newString(49, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = Node.newNumber(10.0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(2814);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=2814> (type 2814)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = new Node(0);
      Node.tokenToName((-481));
      Node node1 = new Node(0, node0, node0);
      NodeUtil.isEmptyFunctionExpression(node1);
      node1.getAncestor(45);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(777);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=777> (type 777)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = new Node(46);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-302), 0, 0);
      Node node1 = Node.newString("com.google.javascript.jscomp.IgnoreCajaProperties$Traversal");
      node1.removeProp(24);
      Node node2 = new Node((-302), node0, node1);
      NodeUtil.getPrototypeClassName(node2);
      NodeUtil.newVarNode("", (Node) null);
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0, memoizedScopeCreator0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      int int0 = 423;
      Node[] nodeArray0 = new Node[7];
      Node node0 = NodeUtil.newQualifiedNameNode("call", 423, 423);
      nodeArray0[0] = node0;
      Node[] nodeArray1 = new Node[5];
      nodeArray1[0] = node0;
      nodeArray1[1] = node0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("call");
      boolean boolean0 = true;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      PrintStream printStream0 = mockPrintStream2.format("z`$w&Kd13uB-;FYl&?", (Object[]) nodeArray1);
      Compiler compiler0 = new Compiler(printStream0);
      Node node1 = compiler0.parseSyntheticCode("z`$w&Kd13uB-;FYl&?", "<<");
      nodeArray1[2] = node1;
      nodeArray1[3] = node0;
      nodeArray1[4] = node0;
      Node node2 = NodeUtil.newCallNode(nodeArray0[0], nodeArray1);
      nodeArray0[1] = node2;
      Node node3 = compiler0.parseInputs();
      nodeArray0[2] = node3;
      Node node4 = AbstractPeepholeOptimization.validateResult(nodeArray1[4]);
      nodeArray0[3] = node4;
      Node node5 = compiler0.externsRoot;
      nodeArray0[4] = node5;
      String string0 = "com.google.javascript.jscomp.NodeUtil$MatchDeclaration";
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      int int1 = (-1889);
      int int2 = (-980);
      Node node6 = NodeUtil.newFunctionNode(string0, linkedList0, nodeArray1[0], int1, int2);
      nodeArray0[5] = node6;
      Node node7 = compiler0.getRoot();
      nodeArray0[6] = node7;
      int int3 = 0;
      Node node8 = new Node(int0, nodeArray0, node6.ATTRIBUTE_FLAG, int3);
      Node node9 = NodeUtil.getRootOfQualifiedName(node8);
      Node node10 = NodeUtil.getFnParameters(node9);
      Node node11 = peepholeFoldConstants0.optimizeSubtree(node10);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, boolean0);
      Node node12 = ControlFlowAnalysis.computeFollowNode(node11, controlFlowAnalysis0);
      NodeUtil.functionCallHasSideEffects(node12, compiler0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isSimpleFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = Node.newNumber((-1231.38), (-906), (-906));
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NUMBER -1231.38 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "SyAJ)ZX_deLGV>0)";
      Node node0 = compiler0.parseSyntheticCode("SyAJ)ZX_deLGV>0)", "vh");
      node0.toStringTree();
      NodeUtil.isWithinLoop(node0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      try { 
        SourceFile.fromInputStream("SyAJ)ZX_deLGV>0)", (InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) null);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      String string0 = "assign_div";
      // Undeclared exception!
      try { 
        NodeUtil.newName("", (Node) null, "assign_div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      String string0 = "s1b%+6lN(j2";
      simpleErrorReporter0.warning("s1b%+6lN(j2", "s1b%+6lN(j2", 21, "s1b%+6lN(j2", 21);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      simpleErrorReporter0.error("-.cCXuH_[ELve}", "com.google.javascript.jscomp.JsMessage$Style", 1296, "-.cCXuH_[ELve}", 2125);
      simpleErrorReporter0.warning("com.google.common.base.Predicates$InPredicate", "com.google.javascript.jscomp.JsMessage$Style", 2618, "com.google.javascript.jscomp.JsMessage$Style", 98);
      vector0.subList(0, 0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      NodeUtil.isGet(node0);
      NodeUtil.canBeSideEffected(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NodeUtil.isValidPropertyName("");
      Node node0 = Node.newString((-278), "");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = Node.newString("I8d96CL/, b4Z?0S<", (-54), 112);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
      Integer integer0 = new Integer(0);
      nodeUtil_MatchNodeType0.equals(integer0);
      Node[] nodeArray0 = new Node[1];
      Node node0 = NodeUtil.newQualifiedNameNode("+mJ8+ML:", 0, 6580);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0);
      Node node2 = NodeUtil.newVarNode("+mJ8+ML:", node1);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      String string0 = "com.google.javascript.jscomp.NameReferenceGraph";
      SyntheticAst syntheticAst0 = new SyntheticAst("com.google.javascript.jscomp.NameReferenceGraph");
      String string1 = "";
      int int0 = 125;
      Node[] nodeArray0 = new Node[7];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.NameReferenceGraph", (Node) null, ";Qa;|e[H2[%Yy8.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      String string0 = "}@>u2";
      simpleErrorReporter0.error("}@>u2", "}@>u2", 2, "}@>u2", 16);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got LP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("");
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      NodeUtil.getStringValue(node0);
      node0.getQualifiedName();
      compiler0.getErrorManager();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      boolean boolean1 = NodeUtil.isSimpleOperator(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(0);
      Node node1 = NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      String string0 = "xjx!sM=:tXGBR1e";
      Node node0 = Node.newString(0, "xjx!sM=:tXGBR1e");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = Node.newString("~rx=A|dS}=s6:%%NW>", 62, (-2501));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getTypeNodes();
      node0.setJSDocInfo(jSDocInfo0);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.isAssign(node0);
      node0.getQualifiedName();
      NodeUtil.getExpressionBooleanValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Node node0 = Node.newNumber((-149.62423623535884), (-1450), (-386));
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Integer integer0 = new Integer((-760));
      sourceMap_DetailLevel0.equals(integer0);
      SourceMap.DetailLevel sourceMap_DetailLevel1 = SourceMap.DetailLevel.SYMBOLS;
      NodeUtil.getCount(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("\"?Yr&y", "\"?Yr&y");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"?Yr&y
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      Node node0 = null;
      Node node1 = NodeUtil.newUndefinedNode((Node) null);
      NodeUtil.getSourceName(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node1);
      // Undeclared exception!
      try { 
        NodeUtil.newName((String) null, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NodeUtil.opToStrNoFail(100);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.isReferenceName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      Node node1 = new Node(0, node0);
      NodeUtil.getInfoForNameNode(node1);
      NodeUtil.getVarsDeclaredInBranch(node0);
      String string0 = "8h+q";
      node1.toStringTree();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.addLast(node0);
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Node node0 = Node.newString("%=");
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      Node.newString("lastuse", 42, 0);
      boolean boolean1 = NodeUtil.isName(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isExprCall(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NodeUtil.isAssociative(0);
      String string0 = "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement";
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      mockPrintStream0.print((-2565L));
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      mockPrintStream0.print(0.0F);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 122;
      NodeUtil.precedence(122);
      Compiler compiler0 = new Compiler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JSSourceFile.fromInputStream((String) null, (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      String string0 = "`tlbfLw0s9?,0\\O,;:";
      Node.newString("`tlbfLw0s9?,0O,;:");
      DiagnosticType diagnosticType0 = StrictModeCheck.UNKNOWN_VARIABLE;
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, "JSC_UNKNOWN_VARIABLE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.toStringTree();
      node0.setOptionalArg(false);
      node0.removeProp((-2001));
      Node node1 = Node.newString(2974, "q6]X6LxS\"ryRbe}Nd");
      boolean boolean0 = NodeUtil.isLabelName(node0);
      Node node2 = new Node(20);
      boolean boolean1 = NodeUtil.isLoopStructure(node2);
      assertFalse(boolean1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(77);
      nodeUtil_MatchNodeType0.equals(node0);
      MockFile mockFile0 = new MockFile("Zh");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('*');
      Compiler compiler0 = new Compiler(printStream0);
      boolean boolean2 = NodeUtil.nodeTypeMayHaveSideEffects(node1, compiler0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Node node0 = null;
      int int0 = 19;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) compilerOptions0.stripNamePrefixes);
      compilerOptions0.replaceStringsFunctionDescriptions = list0;
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-576), nodeArray0, (-576), 0);
      node0.putBooleanProp(0, false);
      Node node1 = new Node(0, node0, 57, 8);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifne (type 7)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(0);
      Node.tokenToName((-481));
      Node node1 = new Node(0, node0, node0);
      NodeUtil.isEmptyFunctionExpression(node1);
      node1.getAncestor(45);
      NodeUtil.precedence(35);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node0 = new Node(88);
      Node node1 = new Node((-1924), node0, node0, node0, 23, 2179);
      Node node2 = NodeUtil.newFunctionNode("g1", arrayList0, node1, 108, 37);
      boolean boolean0 = NodeUtil.isFunction(node2);
      assertTrue(boolean0);
      assertEquals(108, node2.getLineno());
      assertEquals(37, node2.getCharno());
      assertEquals(3, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node.tokenToName(41);
      Node node1 = new Node(0, node0, node0);
      NodeUtil.isControlStructure(node1);
      Node.newString("null");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(777);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=777> (type 777)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }
}
