/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 03:37:26 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module.exports");
      Node node0 = Node.newString("module.exports");
      Node node1 = compiler0.parseTestCode("module.exports");
      processCommonJSModules0.process(node0, node1);
      assertEquals(4, node1.getChildCount());
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "././");
      String string0 = processCommonJSModules0.guessCJSModuleName("././");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./", "");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("t?y5*fzaQ (cxnkQ", "t?y5*fzaQ (cxnkQ");
      assertEquals("module$t?y5*fzaQ (cxnkQ", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../module", "module$/");
      assertEquals("module$module", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "mloense");
      Node node0 = compiler0.parseTestCode("mloense");
      Node node1 = Node.newString(37, "mloense", 4095, 46);
      processCommonJSModules0.process(node0, node1);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module.i5Xexorts");
      Node node0 = compiler0.parseTestCode("module.i5Xexorts");
      Node node1 = compiler0.parseTestCode("module.i5Xexorts");
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT): [testcode]:1:0
         // module.i5Xexorts
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module$t?y5*fzaQ (cxnkQ", false);
      Node node0 = compiler0.parseTestCode("module$t?y5*fzaQ (cxnkQ");
      processCommonJSModules0.process(node0, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "exports");
      Node node0 = compiler0.parseTestCode("exports");
      processCommonJSModules0.process((Node) null, node0);
      node0.setSourceFileForTesting("exports");
      processCommonJSModules0.process(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }
}
