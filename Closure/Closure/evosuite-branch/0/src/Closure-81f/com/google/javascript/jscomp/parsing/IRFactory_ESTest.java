/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 05:42:10 GMT 2019
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(150);
      FunctionNode functionNode0 = new FunctionNode();
      Name name0 = new Name(97, (-3975), "F!1}JU:oTh");
      functionNode0.setFunctionName(name0);
      astRoot0.addChildrenToBack(functionNode0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.IRFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot((-1356));
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(2216, 7);
      astRoot0.addChildToBack(parenthesizedExpression0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "Ya#5h.", (Config) null, (ErrorReporter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot();
      NewExpression newExpression0 = new NewExpression(119);
      astRoot0.addChild(newExpression0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(200000);
      Label label0 = new Label(8);
      astRoot0.addChildrenToFront(label0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "setters must have exactly one parameter", (Config) null, toolErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(111);
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      astRoot0.addChildToBack(expressionStatement0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot();
      Name name0 = new Name(0, "FM-&qY!sB#dUUH,{");
      PropertyGet propertyGet0 = new PropertyGet(astRoot0, name0);
      astRoot0.addChildToBack(propertyGet0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(105);
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(8);
      astRoot0.addChildrenToBack(conditionalExpression0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(105);
      astRoot0.setType(1);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot();
      ObjectProperty objectProperty0 = new ObjectProperty();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(26);
      objectProperty0.setLeftAndRight(objectLiteral0, objectLiteral0);
      astRoot0.addChild(objectProperty0);
      Node node0 = IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(105);
      ObjectProperty objectProperty0 = new ObjectProperty(23);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2451, 957, token_CommentType0, ") !jj");
      objectProperty0.setJsDocNode(comment0);
      astRoot0.addChild(objectProperty0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(142);
      Context.getCurrentContext();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(150);
      FunctionNode functionNode0 = new FunctionNode();
      astRoot0.addChildrenToBack(functionNode0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(3469);
      ReturnStatement returnStatement0 = new ReturnStatement();
      astRoot0.addChildrenToBack(returnStatement0);
      Node node0 = IRFactory.transformTree(astRoot0, "y]", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(3469);
      ReturnStatement returnStatement0 = new ReturnStatement(11, 34, astRoot0);
      astRoot0.addChildrenToBack(returnStatement0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(101);
      ObjectProperty objectProperty0 = new ObjectProperty(26);
      objectProperty0.setOperator(11);
      astRoot0.addChild(objectProperty0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "*AB5^", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot();
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.setOperator(12);
      astRoot0.addChild(objectProperty0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(3469);
      ObjectProperty objectProperty0 = new ObjectProperty(23);
      objectProperty0.setType(16);
      astRoot0.addChild(objectProperty0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot();
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.setOperator(18);
      astRoot0.addChild(objectProperty0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(105);
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.setOperator(19);
      astRoot0.addChild(objectProperty0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(105);
      ObjectProperty objectProperty0 = new ObjectProperty();
      objectProperty0.setOperator(21);
      astRoot0.addChild(objectProperty0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot0 = new AstRoot(105);
      FunctionCall functionCall0 = new FunctionCall(2, 1);
      astRoot0.addChild(functionCall0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, ") !jj", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot(143);
      ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot0, true);
      astRoot0.addChildToBack(expressionStatement0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "", (Config) null, toolErrorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
