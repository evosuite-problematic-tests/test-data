/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 06:11:33 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      int int0 = NodeUtil.getNameReferenceCount(node0, (String) null);
      assertEquals(32768, node0.getLineno());
      assertEquals(38, node0.getType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("y");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("Could not find goog.inherits for base class", 651, 651);
      assertTrue(node0.isQualifiedName());
      
      String string0 = NodeUtil.getPrototypePropertyName(node0);
      assertEquals(651, node0.getCharno());
      assertEquals(651, node0.getLineno());
      assertEquals("find goog.inherits for base class", string0);
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = NodeUtil.newName("y", node0, "_'2W$'H^rxblkq/U#%");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(105);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.jscomp.NodeUtil", 1700, 1700);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "com.google.javascript.jscomp.NodeUtil");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(5754, 5754, 5754);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-8), nodeUtil_MatchDeclaration0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      assertEquals(32768, node0.getLineno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExpressionNode(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString("y");
      Node node1 = NodeUtil.newQualifiedNameNode("y", node0, "y");
      NodeUtil.getExpressionBooleanValue(node1);
      assertEquals(38, node1.getType());
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString("{proxy:");
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("{proxy:");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getExpressionBooleanValue(node1);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      Node node1 = new Node(34, node0, node0, 15, 10);
      NodeUtil.getBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 28, 2);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals(32768, node0.getLineno());
      assertNotNull(string0);
      assertTrue(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("1739.1652133681528", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("*=", 2158, 2158);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(26);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((-2351.0), 1809, 160);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("-2351", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(44, node0, node0, 4, 5);
      boolean boolean0 = NodeUtil.isImmutableValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(125, (-1311), (-1311));
      boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString(9, "\" is already defined in file \"");
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypes);
      assertEquals(32768, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("y", 32768, 32768);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(111, (-1324), (-1324));
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32756, 32756);
      Node node1 = new Node(25, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertEquals(32756, node0.getLineno());
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(26);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber(0.0070702702341828875);
      Node node1 = new Node(44, node0, node0, 4, 5);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(59);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(70);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(71, (-1278), (-1278));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(75, (-1300), (-1300));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(79, (-1300), (-1300));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(85);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(87, (-1300), (-1300));
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(88);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(96, (-1300), (-1300));
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(107, (-1300), (-1300));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(111, (-1324), (-1324));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node(115, (-1331), (-1331));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(117, (-1311), (-1311));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(120, (-1311), (-1311));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(64);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(98, (-1300), (-1300));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(108, (-1300), (-1300));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(125, (-1311), (-1311));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString(126, "i^LCczQR@1iPq|M", 126, 102);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(32795, "y");
      Node node1 = new Node(25, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0, (AbstractCompiler) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber((double) 104, 104, 115);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSC_TMP_PLACE_HOLDER");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected CALL node, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertEquals(32768, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      Node node1 = Node.newNumber((double) 0, 28, 2);
      node1.addChildrenToBack(node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      Node node1 = new Node(23, node0, node0, node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertEquals(32768, node0.getLineno());
      assertTrue(boolean0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=62> (type 62)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=66> (type 66)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(72);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=72> (type 72)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=74> (type 74)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for try (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = NodeUtil.precedence(89);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = NodeUtil.precedence(97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for import (type 107)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(123);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for reserved (type 123)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = NodeUtil.precedence(124);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1697);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=1697> (type 1697)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("*=", 2158, 2158);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(91);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = sourceMap_DetailLevel0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(120, (-1311), (-1311));
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("", 43, (-340));
      // Undeclared exception!
      try { 
        NodeUtil.isVarDeclaration(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      Node node1 = new Node(25, node0, node0, node0);
      assertEquals(38, node0.getType());
      
      NodeUtil.getAssignedValue(node0);
      assertEquals(32768, node0.getLineno());
      assertEquals(4095, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString("y");
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(114);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("=", 19, (-1814));
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber(0.5448349248774145, 0, 0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(161);
      Node node1 = NodeUtil.newVarNode("U;:Zi{VZ4", node0);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasOneChild());
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString(126, "i^LCczQR@1iPq|M", 126, 102);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(108);
      Node node1 = NodeUtil.getConditionExpression(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(111, (-1311), (-1311));
      Node node1 = NodeUtil.getConditionExpression(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString(100, "||");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OR || does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      // Undeclared exception!
      try { 
        NodeUtil.isStatement(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
      
      boolean boolean0 = NodeUtil.isStatement(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}", "function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(111, (-1311), (-1311));
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: STRING  of STRING 
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32756, 32756);
      Node node1 = new Node(25, node0, node0, node0);
      boolean boolean0 = NodeUtil.isReferenceName(node1);
      assertFalse(boolean0);
      assertEquals(32756, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean0);
      assertEquals(32768, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertEquals(32768, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(": tg-'wr{%5r");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("@sL(A/u[6", ": tg-'wr{%5r");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("Infinity");
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("y");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("X80u?", (Node) null);
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertEquals(118, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(32795, "y");
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("y", 32768, 32768);
      boolean boolean0 = NodeUtil.isConstantByConvention(googleCodingConvention0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = NodeUtil.opToStr(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = NodeUtil.opToStr(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = NodeUtil.opToStr(24);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 30: NEW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = NodeUtil.opToStr(40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = NodeUtil.opToStr(57);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = NodeUtil.opToStr(67);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = NodeUtil.opToStr(73);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(76);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 76: REF_NS_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = NodeUtil.opToStr(82);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = NodeUtil.opToStr(83);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = NodeUtil.opToStr(84);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = NodeUtil.opToStr(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(89);
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = NodeUtil.opToStr(91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = NodeUtil.opToStr(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(98);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 98: HOOK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = NodeUtil.opToStr(103);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 114: DO
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 117: CONTINUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = NodeUtil.opToStr(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = NodeUtil.opToStr(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(161);
      Node node1 = NodeUtil.newVarNode("U;:Zi{VZ4", node0);
      NodeUtil.newVarNode("com.google.javascript.jscomp.DataFlowAnalysis$BranchedFlowState", node1);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("=", 19, (-1814));
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      arrayList0.add(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("=", arrayList0, node0, 25, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("com.google.javascript.jscomp.ReplaceIdGenerators$Callback", 1157, 214);
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(214, node0.getCharno());
      assertEquals(214, node1.getCharno());
      assertEquals(33, node0.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(1157, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber(4694.84062469933, (-1489), (-1489));
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("in");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(32768, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      Node node1 = new Node(23, node0, node0, node0);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(32768, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32756, 32756);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertEquals(32756, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
      assertEquals(32768, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("void", 1976, 1976);
      NodeUtil.getPrototypeClassName(node0);
      assertEquals(1976, node0.getCharno());
      assertEquals(1976, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("y", 32768, 32768);
      int int0 = NodeUtil.getNameReferenceCount(node0, "y");
      assertEquals(1, int0);
      assertEquals(32768, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(75, (-1300), (-1300));
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, (-2934), (-842));
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      boolean boolean0 = NodeUtil.has(node0, predicate0, predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("");
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-986));
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), (-2246), (-2246));
      Node node1 = new Node(6, node0, node0, node0);
      boolean boolean0 = NodeUtil.containsFunction(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("y");
      Node node1 = new Node(25, node0, node0, node0);
      int int0 = NodeUtil.getNameReferenceCount(node1, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(111, (-1306), (-1306));
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, sourceMap_DetailLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString(32795, "y");
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString(126, "i^LCczQR@1iPq|M", 126, 102);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Logger logger0 = Logger.getLogger("msg.bad.octal.literal");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      Node node0 = compiler0.parseTestCode("msg.bad.octal.literal");
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSCRIPT 1 [sourcename: java.lang.String@0000000326] [synthetic: 1]
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("*=", 2158, 2158);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("*=", 2158, 2158);
      node0.addSuppression("*=");
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertFalse(jSDocInfo0.isDefine());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(161);
      NodeUtil.newVarNode("U;:Zi{VZ4", node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("void", 1976, 1976);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("*=", 2158, 2158);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString(84, ">5$2z53qza2uV[H#");
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber(1739.1652133681528);
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString("=", 19, (-1814));
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-3168));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = NodeUtil.newName("y", node0, "_'2W$'H^rxblkq/U#%");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      node0.addChildToFront(node1);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
      assertFalse(boolean0);
      assertTrue(node1.isQualifiedName());
  }
}
