/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 05:50:06 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Removing ", "Removing ");
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique((MakeDeclaredNamesUnique.Renamer) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      Node node0 = Node.newString(105, "arguments");
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Removing ", "");
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, typedScopeCreator0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = new Node(114);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      unreachableCodeElimination0.curCfg = controlFlowGraph0;
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Removiv ", (String) null);
      Node node1 = new Node(4, 44, 14);
      node0.addChildToBack(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = new Node(121);
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "Property {0} of type {1} has been deprecated.", "Property {0} of type {1} has been deprecated.");
      Node node2 = new Node(4, node0, 37, 8);
      node1.addChildToBack(node2);
      unreachableCodeElimination0.process(node1, node1);
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "e&i=", "e&i=");
      Node node1 = new Node(4, 44, 14);
      node0.addChildToBack(node1);
      node1.addChildAfter(node0, node0);
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = new Node(124);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      unreachableCodeElimination0.curCfg = controlFlowGraph0;
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(42, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("8?uA,8#EB>80tB6Y<", "8?uA,8#EB>80tB6Y<");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      unreachableCodeElimination0.curCfg = controlFlowGraph0;
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(10, Node.VARS_PROP);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("8?uA,8#EB>80tB6Y<", "8?uA,8#EB>80tB6Y<");
      node0.addChildrenToFront(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      unreachableCodeElimination0.curCfg = controlFlowGraph0;
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "HemM.ng ", "HemM.ng ");
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
  }
}
