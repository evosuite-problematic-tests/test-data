/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 06:46:56 GMT 2019
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(4363, 4363, 4363);
      node0.siblings();
      assertEquals(17874943, node0.getSourcePosition());
      assertEquals(4363, node0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node((-370));
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      assertEquals((-370), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(0, "8+8-E^Q=1K@F K_8Q;o", 0, 0);
      Object object0 = new Object();
      node0.putProp(0, object0);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString((-5), "8+8-E^Qy1K@F K_8Q;o", (-5), (-5));
      node0.addSuppression("8+8-E^Qy1K@F K_8Q;o");
      Object object0 = new Object();
      node0.putProp((-1019), object0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      assertEquals((-5), node1.getType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newNumber(4.0, (-1956), (-1956));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("input_id");
      node0.toString(true, true, true);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString("8+8-E^Qy1K@F K_8Q;o");
      boolean boolean0 = node0.isQuotedString();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals(48, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(147);
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals(144, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(147);
      node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(147);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertEquals(147, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node((-1255));
      node0.setWasEmptyNode(true);
      boolean boolean0 = node0.getBooleanProp(39);
      assertEquals((-1255), node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber((-1186.93906));
      String string0 = node0.toString(true, true, false);
      assertEquals("NUMBER -1186.93906", string0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber((-1664.84601881768), (-1295), (-1490));
      node0.setDouble((-1490));
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString(29, "u36FuckN");
      Node node1 = node0.srcref(node0);
      assertEquals(29, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString(0, "o}DD0iT", 0, 0);
      node0.getJsDocBuilderForNode();
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(".x`y%6qnf, c]GNi?(x", 0, 0);
      node0.addChildrenToBack(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString("8+8-E^Qy1K@F K_8Q;o");
      node0.getInputId();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber(4.0, (-1956), (-1956));
      boolean boolean0 = node0.isSyntheticBlock();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(1739.935);
      node0.setSourceEncodedPosition(50);
      assertEquals(50, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.isLocalResultCall();
      assertFalse(boolean0);
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      node0.getChangeTime();
      assertEquals(622744, node0.getSourcePosition());
      assertTrue(node0.isDebugger());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber(4.0, (-1956), (-1956));
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      Node node1 = new Node(49, node0, node0, node0, 49, 2);
      boolean boolean0 = node1.hasOneChild();
      assertTrue(boolean0);
      assertTrue(node1.isThrow());
      assertEquals(200706, node1.getSourcePosition());
      assertTrue(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(120);
      assertTrue(node0.isCatch());
      
      node0.setType(57);
      assertFalse(node0.isCatch());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getAncestors();
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(4.0, (-1956), (-1956));
      node0.isQuotedString();
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(117, node0, 4095, 105);
      Node node2 = null;
      try {
        node2 = new Node(117, node1, node0, node0, node1, 53, 3581);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber((-64.838745381), 53, 53);
      Node node1 = node0.srcrefTree(node0);
      assertEquals(217141, node1.getSourcePosition());
      assertTrue(node1.isNumber());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertTrue(node0.isCatch());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertEquals(0, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1023), 2209);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber((-1186.93906));
      node0.getDirectives();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(29, "u36FuckN");
      node0.setOptionalArg(false);
      assertEquals((-1), node0.getLineno());
      assertEquals(29, node0.getType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("<)LDnagf~.1");
      int int0 = node0.getSourcePosition();
      assertTrue(node0.isString());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("A", (-1603), (-1603));
      node0.getLength();
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString(29, "u36FuckN");
      node0.setCharno(18);
      assertEquals((-1), node0.getLineno());
      assertEquals(29, node0.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1023), 2209);
      boolean boolean0 = node0.isEquivalentToTyped(node0);
      assertTrue(boolean0);
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1023), 2209);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.isEquivalentTo(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      node0.setLength(0);
      assertEquals(49, node0.getType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber((-64.838745381), 53, 53);
      node0.setSourceFileForTesting("xUm4G");
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -64.838745381 53 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1023), 2209);
      node0.setLineno((-1023));
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(525);
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setChangeTime(105);
      node0.toStringTree();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((-64.838745381), 53, 53);
      node0.setVarArgs(true);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -64.838745381 53 [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(120, "M", 120, 120);
      node0.setQuotedString();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CATCH M 120 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(130);
      node0.setIsSyntheticBlock(true);
      try { 
        node0.setDouble(19);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      ImmutableList<String> immutableList0 = ImmutableList.of("com.google.javascript.rhino.jstype.EquivalenceMethod", "com.google.javascript.rhino.jstype.EquivalenceMethod", "com.google.javascript.rhino.jstype.EquivalenceMethod", "com.google.javascript.rhino.jstype.EquivalenceMethod", ".prototype", ".rP5$%lSQC", "Ca~[q", "Ca~[q", "", "", "");
      HashSet<String> hashSet0 = new HashSet<String>(immutableList0);
      node0.setDirectives(hashSet0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FOR 115 [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString(22, "s|?SKM]b1m");
      Node node1 = Node.newString(43, "s|?SKM]b1m");
      node1.setLength(57);
      String string0 = node0.checkTreeEquals(node1);
      assertEquals((-1), node1.getLineno());
      assertNotNull(string0);
      assertEquals(43, node1.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(49, 49, 607);
      InputId inputId0 = new InputId("length");
      node0.setInputId(inputId0);
      node0.toStringTree();
      assertEquals(607, node0.getCharno());
      assertEquals(49, node0.getType());
      assertEquals(49, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newString((-5), "8+8-E^Qy1K@F K_8Q;o", (-5), (-5));
      Node node1 = new Node(31, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Object object0 = new Object();
      node0.putProp((-1019), object0);
      node1.clonePropsFrom(node2);
      // Undeclared exception!
      try { 
        node1.setString("3MEgPEH");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -1019
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-1023), 2209);
      Node node1 = Node.newString(15, "&-d:43F");
      node0.isEquivalentToTyped(node1);
      assertEquals(15, node1.getType());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber((-1723.0));
      Node node1 = Node.newNumber((double) 4);
      node1.isEquivalentToShallow(node0);
      assertEquals(0, node1.getChildCount());
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(2065, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-475), (-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString(0, "o}DD0iT", 0, 0);
      node0.setString("o}DD0iT");
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("", 4096, 4096);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("}`", (-40), (-40));
      Node node1 = Node.newString("O", (-417), (-1686));
      node1.checkTreeEqualsImpl(node0);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(31, (-2152), 31);
      Node node1 = new Node(15, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(51, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(120);
      Node node1 = new Node((-148), node0, node0, node0, 4095, 1);
      Node node2 = null;
      try {
        node2 = new Node(15, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString("ew-`");
      Node node1 = new Node(0, node0, node0, 55, 0);
      Node node2 = null;
      try {
        node2 = new Node(42, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(1253, 1253, 579);
      Node node1 = new Node(42, node0, 15, (-1817));
      Node node2 = null;
      try {
        node2 = new Node(48, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("L", (-86), (-86));
      Node node1 = new Node(1, node0);
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString((-869), "", (-304), 50);
      Node node1 = new Node((-869), node0, node0, node0, 8, 1);
      Node node2 = null;
      try {
        node2 = new Node((-304), node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newNumber(194.1689701427519, 0, 0);
      Node node1 = new Node(46, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(51, node0, node0, node0, node1, 29, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("r2B", 19, 19);
      Node node1 = new Node(8202, node0, node0, node0, node0, 4095, 0);
      Node node2 = null;
      try {
        node2 = new Node(8202, node1, node1, node0, node0, 9, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString(53, "{?", (-936), (-936));
      Node node1 = Node.newString(284, "direct_eval");
      Node node2 = new Node(635, node1, 47, 16);
      Node node3 = null;
      try {
        node3 = new Node(39, node0, node2, node0, node1, 153, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(37, nodeArray0, 83, 37);
      assertEquals(340005, node0.getSourcePosition());
      assertEquals(37, node0.getType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString((-3458), "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(2400, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      Node node1 = new Node(42, node0, node0, node0, node0, 50, 51);
      Node node2 = null;
      try {
        node2 = new Node(16, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString(0, "The existing child node of the parent should not be null.", 0, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0);
      Node node2 = null;
      try {
        node2 = new Node(56, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString("5/DO}7z5,?Eo!n+oc?O", (-5218), (-5218));
      boolean boolean0 = node0.hasChildren();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(32, (-815), 0);
      Node node1 = new Node(32, node0);
      boolean boolean0 = node1.hasChildren();
      assertTrue(boolean0);
      assertTrue(node1.isTypeOf());
      assertTrue(node0.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = node0.removeFirstChild();
      assertNotNull(node1);
      
      node1.addChildToFront(node1);
      assertEquals(0, node0.getChildCount());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(112, node0, node0);
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      Node node0 = Node.newString("Not declared as a type name");
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(32, (-815), 0);
      node0.getChildAtIndex((-3024));
      assertEquals(32, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node((-1784));
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(461845907);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2399, node0, node0, node0, node0);
      int int0 = node1.getIndexOfChild((Node) null);
      assertEquals(2399, node1.getType());
      assertTrue(node0.isString());
      assertEquals((-1), int0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node((-1136), node0, node0, 16, (-2582));
      int int0 = node1.getIndexOfChild(node0);
      assertEquals(0, int0);
      assertEquals((-1136), node1.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(83, node0.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node((-1136), node0, node0, 16, (-2582));
      node1.addChildrenAfter(node1, node0);
      assertEquals(2, node1.getChildCount());
      
      Node node2 = node0.getLastSibling();
      assertEquals((-1), node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(0, 405, 405);
      Node node1 = new Node(123, node0, node0, node0, 53, 43);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildToFront(node0);
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2399, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node((-370));
      node0.addChildrenToFront(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(46, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(1048576);
      Node node1 = new Node(1950);
      node0.addChildToBack(node1);
      node0.addChildrenToFront(node0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2399, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      Node node1 = new Node(53, node0, node0, node0, node0);
      node1.addChildBefore(node1, node0);
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber((-1723.0));
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(112, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("<)WDnagf~.1");
      Node node1 = Node.newString("Rt", 33, 30);
      Node node2 = new Node(2, node0, node1, 43, 1);
      assertEquals(135198, node1.getSourcePosition());
      assertEquals(40, node1.getType());
      assertEquals(2, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(176129, node2.getSourcePosition());
      
      Node node3 = node0.detachFromParent();
      assertEquals(40, node3.getType());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(4363, 4363, 4363);
      Node node1 = Node.newString(10, "86RA!nb", 32, (-1413));
      Node node2 = new Node(39, node0, node0, node1, node0, 56, 17);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      Node node1 = new Node(53, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 1393, (-5093));
      Node node1 = new Node(2433, node0, node0, node0, 54, 47);
      node1.replaceChild(node0, node1);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("LM", (-86), (-86));
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("LM", (-86), (-86));
      Node node1 = Node.newString("LM", 42, 1633);
      Node node2 = new Node(50, node0, node1, 52, 2);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.addChildToFront(node0);
      Node node1 = new Node((-2613), 2972, 414);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString(22, "s|?SKM]b1m");
      node0.setLength(57);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("<invalid>", (-847), (-847));
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.setDirectives(set0);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node((-1592));
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(1610612736);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1610612736
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node((-370));
      Node node1 = new Node(39, node0, node0, node0, node0, 57, 48);
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString((-5218), "~");
      Node node1 = new Node(40, node0, 0, 31);
      // Undeclared exception!
      try { 
        node1.setString("Should not call getLineOffset with line number ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(103, 103, 4046);
      String string0 = node0.toString(false, false, true);
      assertEquals("DEC", string0);
      assertEquals(425934, node0.getSourcePosition());
      assertTrue(node0.isDec());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      node0.setJSType(jSType0);
      String string0 = node0.toStringTree();
      assertEquals("NUMBER 0.0 : NoObject\n", string0);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(32, (-815), 0);
      Node node1 = new Node(32, node0);
      String string0 = node1.toStringTree();
      assertEquals(32, node0.getType());
      assertEquals("TYPEOF\n    TYPEOF\n", string0);
      assertTrue(node1.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node((-1592));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("CharMatcher.WHITESPACE", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      String string0 = node0.getSourceFileName();
      assertNotNull(string0);
      assertEquals((-1592), node0.getType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber((-1186.93906));
      node0.getSourceFileName();
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber((-1186.93906));
      boolean boolean0 = node0.isFromExterns();
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("8+8-E^Qy1K@F K_8Q;o", (-23), (-23));
      int int0 = node0.getSourceOffset();
      assertEquals(40, node0.getType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(49, 49, 607);
      node0.setLineno(47);
      assertEquals(193119, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(120);
      Node node1 = new Node((-148), node0, node0, node0, 54, 1);
      node1.setSourceEncodedPositionForTree(1);
      assertEquals(0, node0.getLineno());
      assertEquals((-148), node1.getType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString((-5), "8+8-E^Qy1K@F K_8Q;o", (-5), (-5));
      Node node1 = new Node(31, node0, node0, node0);
      node1.children();
      assertEquals((-5), node0.getType());
      assertEquals(31, node1.getType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString(22, "s|?SKM]b1m");
      node0.children();
      assertEquals(22, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString((-424), "");
      // Undeclared exception!
      try { 
        node0.getAncestor((-2330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(120);
      Node node1 = node0.getAncestor(2);
      assertTrue(node0.isCatch());
      assertNull(node1);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      Node node1 = node0.getAncestor(0);
      assertNotNull(node1);
      assertEquals((-1), node1.getLineno());
      assertEquals(50, node1.getType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.hasOneChild();
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node node1 = Node.newNumber((double) 51, 50, (-894));
      Node node2 = new Node(103, node0, node1, node1, (-2265), 29);
      boolean boolean0 = node2.hasOneChild();
      assertEquals((-1), node1.getLineno());
      assertFalse(boolean0);
      assertTrue(node2.isDec());
      assertEquals(2, node2.getChildCount());
      assertEquals(421991, node0.getSourcePosition());
      assertEquals(39, node1.getType());
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString(".x`y%6qnf, c]GNi?(x", 0, 0);
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(120);
      Node node1 = new Node((-148), node0, node0, node0, 54, 1);
      boolean boolean0 = node1.hasMoreThanOneChild();
      assertTrue(node0.isCatch());
      assertEquals((-148), node1.getType());
      assertFalse(boolean0);
      assertEquals(221185, node1.getSourcePosition());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node((-1136), node0, node0, 16, (-2582));
      node1.addChildrenAfter(node1, node0);
      boolean boolean0 = node1.hasMoreThanOneChild();
      assertFalse(node1.hasOneChild());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node((-1250));
      Node node1 = new Node(52, node0, node0, 57, 46);
      node1.hasChild(node1);
      assertEquals((-1250), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(233518, node1.getSourcePosition());
      assertEquals(52, node1.getType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node((-1255));
      Node node1 = new Node(29, node0, 39, 57);
      boolean boolean0 = node1.hasChild(node0);
      assertEquals(159801, node1.getSourcePosition());
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(29, node1.getType());
      assertEquals((-1255), node0.getType());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newString(1833, "");
      node0.checkTreeEquals(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(1833, node0.getType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber((-423.42088303433945), 45, (-569));
      Node node1 = new Node(40, node0, node0, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node1.isString());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = new Node(103, 103, 4046);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertEquals(425934, node0.getSourcePosition());
      assertEquals(103, node0.getType());
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      Node node1 = new Node(53, node0, node0, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(50, node0.getType());
      assertNotNull(node_NodeMismatch0);
      assertEquals(53, node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(47, "|+9UXy=3Cuaf{+W4");
      Node node1 = new Node(47, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
      assertTrue(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertNull(node_NodeMismatch0);
      assertEquals(47, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(39, "", 39, 39);
      Node node1 = Node.newNumber((double) 49);
      Node node2 = node0.clonePropsFrom(node1);
      node2.isEquivalentToShallow(node1);
      assertEquals(0, node2.getChildCount());
      assertEquals(159783, node2.getSourcePosition());
      assertTrue(node1.isNumber());
      assertEquals(39, node2.getType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(120);
      Node node1 = new Node((-149), node0, node0, node0, 54, 1);
      boolean boolean0 = node1.isEquivalentToShallow(node1);
      assertEquals(1, node1.getChildCount());
      assertTrue(boolean0);
      assertEquals((-149), node1.getType());
      assertTrue(node0.isCatch());
      assertEquals(221185, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(120);
      node0.addChildToFront(node0);
      // Undeclared exception!
      node0.isEquivalentTo(node0, false, true, false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(22, "s|?SKM]b1m");
      String string0 = node0.getQualifiedName();
      assertEquals(22, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(38);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(33, (-815), 0);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      node0.isQualifiedName();
      assertEquals(50, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(42, (-815), 0);
      boolean boolean0 = node0.isQualifiedName();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(33);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      node0.isUnscopedQualifiedName();
      assertEquals(50, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(38, node0);
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("<)LDnagf~.1");
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 52, 52);
      node0.removeFirstChild();
      assertEquals(213044, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(32, (-815), 0);
      Node node1 = new Node(32, node0);
      Node node2 = node1.removeChildren();
      assertNotNull(node2);
      assertTrue(node2.isTypeOf());
      assertTrue(node1.isTypeOf());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(37);
      Node node1 = new Node((-1089), node0, node0, node0, 1, 305);
      assertTrue(node1.hasOneChild());
      
      node1.detachChildren();
      assertEquals(4401, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(38, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString(".x`y%6qnf, c]GNi?(x", 0, 0);
      Node node1 = new Node((-2367), node0, node0, node0);
      Node node2 = node1.cloneTree();
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node2.hasOneChild());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node((-1592));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("CharMatcher.WHITESPACE", true);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = node0.copyInformationFromForTree(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals((-1592), node1.getType());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString(47, "|+9UXy=3Cuaf{+W4");
      Node node1 = new Node(3632, node0, node0, node0, 47, 2);
      assertEquals(2, node1.getCharno());
      
      node1.copyInformationFromForTree(node0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("LM", (-86), (-86));
      Node node1 = new Node(56, node0, node0, node0, 32, 52);
      node1.useSourceInfoFromForTree(node0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString(">q&97XE&X^");
      node0.setSourceFileForTesting("g|z#}pc/");
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      Node node1 = new Node(50, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      assertEquals((-1), node2.getSourcePosition());
      assertEquals(50, node2.getType());
      assertEquals(50, node0.getType());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newNumber(4.0, (-1956), (-1956));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("input_id");
      node_FileLevelJsDocBuilder0.append("input_id");
      assertTrue(node0.isNumber());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString(0, "8+8-E^Qy1K@F K_8Q;o", 0, 0);
      node0.addSuppression("8+8-E^Qy1K@F K_8Q;o");
      node0.addSuppression("8+8-E^Qy1K@F K_8Q;o");
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3492);
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals(3492, node_SideEffectFlags0.valueOf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(147);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      boolean boolean0 = node_SideEffectFlags1.areAllFlagsSet();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newNumber(1739.935);
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(108);
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertTrue(node0.isIf());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString(47, "|+9UXy=3Cuaf{+W4");
      Node node1 = new Node(47, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      node_NodeMismatch0.equals((Object) null);
      assertEquals(0, node0.getChildCount());
      assertEquals(47, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertEquals(47, node0.getType());
      assertFalse(node0.isReturn());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber((-308.9));
      boolean boolean0 = node0.isAdd();
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isAnd();
      assertEquals(471155, node0.getSourcePosition());
      assertEquals(115, node0.getType());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      boolean boolean0 = node0.isArrayLit();
      assertEquals(458864, node0.getSourcePosition());
      assertEquals(112, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = node0.isAssign();
      assertTrue(node0.isCatch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch", 4, 37);
      node0.isAssignAdd();
      assertEquals(16421, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      boolean boolean0 = node0.isBlock();
      assertEquals(50, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isBreak();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString(1833, "");
      boolean boolean0 = node0.isCall();
      assertEquals(1833, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch", 4, 37);
      Node node1 = new Node(37, node0, node0, node0, node0);
      boolean boolean0 = node1.isCall();
      assertTrue(boolean0);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(16421, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isCase();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isCast();
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString(".x`y%6qnf, c]GNi?(x", 0, 0);
      node0.isCatch();
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = node0.isCatch();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isComma();
      assertFalse(boolean0);
      assertEquals(49, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      boolean boolean0 = node0.isContinue();
      assertEquals(50, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isDebugger();
      assertFalse(boolean0);
      assertEquals(49, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(152, 152, 152);
      boolean boolean0 = node0.isDebugger();
      assertEquals(622744, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("\n\nTree2:\n");
      boolean boolean0 = node0.isDec();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = node0.isDefaultCase();
      assertFalse(boolean0);
      assertTrue(node0.isCatch());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      Node node1 = new Node(112, node0, node0);
      boolean boolean0 = node1.isDefaultCase();
      assertEquals(471155, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertTrue(boolean0);
      assertEquals(115, node0.getType());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString(0, "The existing child node of the parent should not be null.", 0, 0);
      boolean boolean0 = node0.isDelProp();
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = node0.isDo();
      assertTrue(node0.isCatch());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("8+8-E^Qy1K@F K_8Q;o", (-23), (-23));
      node0.isEmpty();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(49, 49, 607);
      boolean boolean0 = node0.isExprResult();
      assertFalse(boolean0);
      assertTrue(node0.isThrow());
      assertEquals(201311, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = node0.isFalse();
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
      assertEquals(120, node0.getType());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isFor();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.isGetterDef();
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isGetElem();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString(35, "o0#Hs$ F", 13, 9);
      boolean boolean0 = node0.isGetElem();
      assertEquals(53257, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(32, (-815), 0);
      boolean boolean0 = node0.isGetProp();
      assertEquals(32, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString("8+8-E^Qy1K@F K_8Q;o", (-23), (-23));
      boolean boolean0 = node0.isHook();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newNumber((-423.42088303433945), 45, (-569));
      boolean boolean0 = node0.isIf();
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.isIn();
      assertEquals(491640, node0.getSourcePosition());
      assertTrue(node0.isCatch());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString(47, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isInc();
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertEquals(47, node0.getType());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isInstanceOf();
      assertTrue(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber(0.0, 52, 52);
      assertEquals(213044, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      
      nodeArray0[0] = node0;
      Node node1 = new Node(52, nodeArray0, 536870912, 13);
      boolean boolean0 = node1.isInstanceOf();
      assertTrue(boolean0);
      assertEquals(13, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isLabel();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber((-423.42088303433945), 45, (-569));
      boolean boolean0 = node0.isLabelName();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node((-1695), (-1695), (-1695));
      node0.type = 153;
      boolean boolean0 = node0.isLabelName();
      assertEquals(153, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newNumber((-64.838745381), 53, 53);
      boolean boolean0 = node0.isName();
      assertEquals(217141, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString(155, ":l[udm");
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("5/DO}7z5,?Eo!n+oc?O", (-5218), (-5218));
      boolean boolean0 = node0.isNew();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(30, 37, 57);
      boolean boolean0 = node0.isNew();
      assertTrue(boolean0);
      assertEquals(151609, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber((-64.838745381), 53, 53);
      boolean boolean0 = node0.isNot();
      assertEquals(217141, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString((-5), "8+8-E^Qy1K@F K_8Q;o", (-5), (-5));
      node0.isNull();
      assertEquals((-5), node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(77, 77, 77);
      boolean boolean0 = node0.isNumber();
      assertFalse(boolean0);
      assertEquals(77, node0.getType());
      assertEquals(315469, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(4.0, 119, 44);
      boolean boolean0 = node0.isNumber();
      assertTrue(boolean0);
      assertEquals(487468, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString(47, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isObjectLit();
      assertTrue(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isOr();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString(22, "s|?SKM]b1m");
      boolean boolean0 = node0.isParamList();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(22, node0.getType());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      boolean boolean0 = node0.isParamList();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString("LM", (-86), (-86));
      boolean boolean0 = node0.isRegExp();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(1540);
      Node node1 = new Node(47, node0);
      boolean boolean0 = node1.isRegExp();
      assertFalse(node0.isRegExp());
      assertEquals(1540, node0.getType());
      assertTrue(boolean0);
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber((-64.838745381), 53, 53);
      node0.isReturn();
      assertEquals(217141, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isScript();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(132, 132, 132);
      boolean boolean0 = node0.isScript();
      assertTrue(boolean0);
      assertEquals(540804, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString(1833, "");
      boolean boolean0 = node0.isSetterDef();
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
      assertEquals(1833, node0.getType());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node((-1695), (-1695), (-1695));
      boolean boolean0 = node0.isString();
      assertEquals((-1695), node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("", 57, 38);
      boolean boolean0 = node0.isString();
      assertEquals(233510, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString(22, "s|?SKM]b1m");
      boolean boolean0 = node0.isStringKey();
      assertEquals(22, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(120);
      boolean boolean0 = node0.isSwitch();
      assertFalse(boolean0);
      assertEquals(120, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node((-1255));
      Node node1 = new Node(110, node0, node0, 20, (-1441));
      boolean boolean0 = node1.isSwitch();
      assertEquals((-1255), node0.getType());
      assertTrue(node1.hasOneChild());
      assertTrue(boolean0);
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString("5/DO}7z5,?Eo!n+oc?O", (-5218), (-5218));
      boolean boolean0 = node0.isThis();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(42, 51, 39);
      boolean boolean0 = node0.isThis();
      assertEquals(208935, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      boolean boolean0 = node0.isThrow();
      assertEquals(50, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isThrow();
      assertEquals((-1), node0.getCharno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newNumber((-64.838745381), 53, 53);
      node0.isTrue();
      assertEquals(217141, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(39);
      boolean boolean0 = node0.isTry();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(77, 77, 77);
      boolean boolean0 = node0.isTry();
      assertEquals(315469, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(50, (-815), 0);
      boolean boolean0 = node0.isTypeOf();
      assertEquals(50, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(32, (-815), 0);
      boolean boolean0 = node0.isTypeOf();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString(".x`y%6qnf, c]GNi?(x", 0, 0);
      boolean boolean0 = node0.isVar();
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString(22, "s|?SKM]b1m");
      boolean boolean0 = node0.isVoid();
      assertFalse(boolean0);
      assertEquals(22, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = new Node(115, 115, 115);
      node0.isWhile();
      assertEquals(471155, node0.getSourcePosition());
      assertTrue(node0.isFor());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString(49, "|+9UXy=3Cuaf{+W4");
      boolean boolean0 = node0.isWith();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isThrow());
  }
}
