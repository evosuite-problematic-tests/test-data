/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 03:19:25 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypedScopeCreator_ESTest extends TypedScopeCreator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      TypedScopeCreator typedScopeCreator0 = null;
      try {
        typedScopeCreator0 = new TypedScopeCreator(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder$CollectProperties");
      Node node1 = new Node(37, node0, node0, node0, node0);
      Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      JSModule jSModule0 = new JSModule("xv{4^?s1uM");
      arrayList1.add(jSModule0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder$CollectProperties");
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      assertEquals(33, scope0.getVarCount());
      
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertEquals(32, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      JSModule jSModule0 = new JSModule("xv{4^?s1uM");
      arrayList1.add(jSModule0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Node node0 = compiler0.parseTestCode("6");
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      typedScopeCreator0.patchGlobalScope(scope0, node0);
      assertEquals(32, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Node node0 = compiler0.parseTestCode("com.googe.javaript.jscomp.FlowSensitiveInlineariables$GaterCandiates");
      Node node1 = new Node(47, node0);
      Scope scope0 = typedScopeCreator0.createScope(node1, (Scope) null);
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      JSModule jSModule0 = new JSModule("xv{4^?s1uM");
      arrayList1.add(jSModule0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder$CollectProperties");
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      Node node1 = Node.newString("// Input %num%", 44, 4);
      Scope scope1 = typedScopeCreator0.createScope(node1, scope0);
      Scope scope2 = typedScopeCreator0.createScope(node0, scope1);
      assertEquals(1, scope2.getVarCount());
      assertEquals(33, scope0.getVarCount());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
      ArrayList<JSModule> arrayList1 = new ArrayList<JSModule>();
      JSModule jSModule0 = new JSModule("xv{4^?s1uM");
      arrayList1.add(jSModule0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules((List<SourceFile>) arrayList0, (List<JSModule>) arrayList1, compilerOptions0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Node node0 = compiler0.parseTestCode("com.googe.javaript.jscomp.FlowSensitiveInlineariables$GaterCandiates");
      node0.setType(16);
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      assertEquals(33, scope0.getVarCount());
  }
}
