/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 05:40:03 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(0, 1032, 148);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString(">':S5;|", 0, 0);
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString((-2834), "com.google.javascript.jscomp.OptimizeReturns");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-=");
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-=");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Graph initialized with node annotations turned off", "Graph initialized with node annotations turned off");
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString("==");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString(">':S5;|", 0, (-2070));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("lmB<Enk;GE$t:");
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newString("", (-3205), 405);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, (-778));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("=", (Node) null);
      assertNotNull(node0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newName(closureCodingConvention0, "n9x6bmp:rTv!g", node0, "-pX2,Sduk-C4<");
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(38, node1.getType());
      assertEquals(118, node0.getType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTANT_PARAM");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "JSC_INEXISTANT_PARAM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(0, "infinity");
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString(1551, "QPfnb{*Fiu]H)HZ", 1618, (-3153));
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-6078), sourceMap_DetailLevel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(">':S5;|", 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString("SETVAR", 0, 0);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString("|");
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTAN%_PARAM");
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(">:S;|", 0, 0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString(26, "_iqt<F9");
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "q7", 118, 118);
      NodeUtil.getExpressionBooleanValue(node0);
      assertEquals(38, node0.getType());
      assertEquals(118, node0.getCharno());
      assertEquals(118, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("=", (Node) null);
      NodeUtil.getBooleanValue(node0);
      assertEquals(118, node0.getType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber((-5051.0131), 5760, 85);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("", 2008, 2008);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString(41, "_iqt<F9");
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "q7", 118, 118);
      Node node1 = new Node(44, node0, node0, node0, node0, 29, (-2));
      NodeUtil.getExpressionBooleanValue(node1);
      assertEquals(118, node0.getCharno());
      assertEquals(118, node0.getLineno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertNotNull(node0);
      
      NodeUtil.getBooleanValue(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 5760, 85);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString("==");
      Node node1 = new Node(26, node0, node0, node0, node0, 2, 34);
      String string0 = NodeUtil.getStringValue(node1);
      assertNotNull(string0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("==");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "==", node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertNull(string0);
      assertTrue(node1.isUnscopedQualifiedName());
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber((-5051.0131), 2594, 2594);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("-5051.0131", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("==");
      Node node1 = new Node(26, node0, node0, node0, node0, 2, 34);
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals("==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(41);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(64, 64, 64);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString(32, "P%?p@;aq~`[?K/az~", 532, 73);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getStringValue(node1);
      assertNotNull(string0);
      assertEquals(73, node1.getCharno());
      assertEquals("undefined", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_INEXISTANT_PARAM", "JSC_INEXISTANT_PARAM");
      String string0 = NodeUtil.arrayToString(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "q7", 118, 118);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(118, node0.getCharno());
      assertEquals(118, node0.getLineno());
      assertEquals(38, node0.getType());
      assertNull(double0);
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber((-48.7639716195206), (-4385), 41);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals((-48.7639716195206), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(88, nodeArray0);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("0jaIgz&;tEZet");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("-map(");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("+]cBty\"CWdK&UU;'QP2");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("infinity");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue(" of ");
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("==");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "==", node0);
      assertEquals(38, node1.getType());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber((-5051.0));
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(110, "D7o");
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "java.lang.Integer", 3, 44);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals(33, node0.getType());
      assertEquals(3, node0.getLineno());
      assertEquals(44, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ")-g7map(", 3, 44);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertFalse(boolean0);
      assertEquals(3, node0.getLineno());
      assertEquals(44, node0.getCharno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString("H(reBr\"");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ")-g7map(", 3, 44);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add(")-g7map(");
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertEquals(3, node0.getLineno());
      assertTrue(boolean0);
      assertEquals(44, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "TH^ZoaJ4Yk'1-z}\"", "");
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(17, 549, (-5185));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newString("==");
      Node node1 = new Node(26, node0, node0, node0, node0, 2, 34);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(31);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(33);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(34);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(35);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(46);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(50);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(53, 549, (-5185));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(54);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(57, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(69);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(73);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString(88, "]o");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString(93, "D7o");
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(96);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(102);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString(103, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString(111, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString(113, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString(115, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(116, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "UHY;[a[_&! sd7U", 693, 693);
      Node node1 = NodeUtil.newVarNode("UnfoldCompoundAssignments requires a normalized AST", node0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertEquals(693, node1.getLineno());
      assertEquals(38, node0.getType());
      assertEquals(693, node1.getCharno());
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
      assertEquals(118, node1.getType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString((-446), "D7o");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString((-446), "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString(2758, "+", 113, 2758);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "d!f", node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
      assertEquals(113, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = peepholeSubstituteAlternateSyntax0.isPure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(47, 549, (-5185));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString(100, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(110, "D7o");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newString((-4803), ">>>", 47, 4417);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString("H(reBr\"");
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(103, "TR7H:`dOq^");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(161);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=161> (type 161)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for goto (type 5)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifeq (type 6)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifne (type 7)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = NodeUtil.precedence(39);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=50> (type 50)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = NodeUtil.precedence(51);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for getvar (type 54)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=58> (type 58)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=62> (type 62)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ref_special (type 69)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=70> (type 70)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=71> (type 71)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(72);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=72> (type 72)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(73);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=73> (type 73)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rb (type 80)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NodeUtil.precedence(85);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NodeUtil.precedence(86);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = NodeUtil.precedence(87);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = NodeUtil.precedence(90);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NodeUtil.precedence(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = NodeUtil.precedence(93);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = NodeUtil.precedence(96);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NodeUtil.precedence(97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = NodeUtil.precedence(103);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = NodeUtil.precedence(108);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for switch (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for default (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(123);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for reserved (type 123)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = NodeUtil.precedence(124);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = new Node(22);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(23, 549, (-5188));
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(50);
      Node node1 = new Node(29, node0, node0, node0, node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString(2758, "+", 113, 2758);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "!\")_c4f", node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
      assertEquals(113, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber((-5051.0));
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      boolean boolean0 = nodeUtil_NumbericResultPredicate0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString(103, "D7o");
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(50);
      Node node1 = new Node(33, node0, node0, node0, node0, 8, 47);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString(2758, "+", 113, 2758);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "/=", node0);
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertFalse(boolean0);
      assertEquals(113, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(50);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("==");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "==", node0);
      boolean boolean0 = NodeUtil.isNullOrUndefined(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(2758);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(50);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString(115, ">>>", 115, 4417);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-=");
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString("|");
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExpressionNode(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTANT_PARAM");
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString(103, "D7o");
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString("==");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "==", node0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = new Node(0, 1032, 148);
      Node node1 = NodeUtil.newVarNode("", node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertTrue(boolean0);
      assertEquals(1032, node1.getLineno());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-=");
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, compilerOptions0.sourceMapDetailLevel);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(">':S5;|", 0, 0);
      boolean boolean0 = NodeUtil.isString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString((-4803), ">>>", 115, 4417);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString(130, "TR7H:`dOq^", 130, 130);
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString(103, "TR7H:`dOq^");
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "UHY;[a[_&! sd7U", 693, 693);
      closureCodingConvention0.extractClassNameIfRequire(node0, node0);
      assertEquals(693, node0.getLineno());
      assertEquals(693, node0.getCharno());
      assertEquals(38, node0.getType());
      assertTrue(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString(95, "^C`<Di_[O/u");
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.isExprCall(node1);
      assertEquals(130, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("lmB<Enk;GE$t:");
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      Node node1 = new Node(33, node0, node0, node0, node0, 8, 47);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString(115, ">>>", 115, 4417);
      boolean boolean0 = NodeUtil.isLoopStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString(110, "D7o");
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString(115, "D7o");
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString(110, "D7o");
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString(110, "D7o");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString(103, "D7o");
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString(115, "D7o");
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString(115, ">>>", 115, 4417);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR >>> 115
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockFile mockFile0 = new MockFile("*:_U,kN<~']");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode((String) null, "*:_U,kN<~']");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BLOCK does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber(2529.5220545);
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("d7)z@&AW@axR[K+F", list0, node0, (-692), (-991));
      // Undeclared exception!
      try { 
        NodeUtil.isHoistedFunctionDeclaration(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("|");
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
      
      boolean boolean0 = NodeUtil.isStatement(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "UHY;[a[_&! sd7U", 693, 693);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertEquals(693, node0.getLineno());
      assertTrue(boolean0);
      assertEquals(693, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, 140, 140);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString(2758, "==", 113, 2758);
      NodeUtil.newVarNode("aPvS@H5-GVcK%8J2&", node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2758
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString(">':S5;|", 44, 0);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(17, 549, (-5185));
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("}-7map(", "0jaIgz&; tEhet");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString((-4803), ">>>", (-1780), 4417);
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      Node node1 = NodeUtil.newFunctionNode(">>>", arrayList0, node0, 32, 44);
      node0.addChildToBack(node1);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString(">':S5;|", 0, 0);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("=");
      // Undeclared exception!
      try { 
        NodeUtil.isSparseArray(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString((-446), "D7o");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString((-446), "D7o");
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("-=");
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, 140, 140);
      // Undeclared exception!
      try { 
        NodeUtil.isObjectLitKey(node0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(50);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: RETHROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("Unknown class name", (-3), 4);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("Unknown class name", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(147, 147, 120);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GET 147 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString(116, "D7o");
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString("SETVAR", 0, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString(110, "D7o");
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = NodeUtil.opToStr(14);
      assertNotNull(string0);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertNotNull(string0);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = NodeUtil.opToStr(15);
      assertEquals("<=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = NodeUtil.opToStr(16);
      assertEquals(">", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = NodeUtil.opToStr(20);
      assertEquals(">>>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = NodeUtil.opToStr(23);
      assertEquals("*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = NodeUtil.opToStr(24);
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = NodeUtil.opToStr(28);
      assertEquals("+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(29);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = NodeUtil.opToStr(37);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTANT_PARAM");
      String string0 = compiler0.toSource(node0);
      assertEquals("JSC_INEXISTANT_PARAM", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = NodeUtil.opToStr(40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = NodeUtil.opToStr((byte)46);
      assertEquals("!==", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = NodeUtil.opToStr(54);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = NodeUtil.opToStr(59);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(60);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 60: ENUM_ID
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 66: SET_REF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = NodeUtil.opToStr(69);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = NodeUtil.opToStr(73);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = NodeUtil.opToStr(78);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = NodeUtil.opToStr(81);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = NodeUtil.opToStr(85);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = NodeUtil.opToStr(89);
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(93);
      assertEquals("+=", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = NodeUtil.opToStr(97);
      assertEquals("%=", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = NodeUtil.opToStr(99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = NodeUtil.opToStr(103);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = NodeUtil.opToStr(104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 109: ELSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = NodeUtil.opToStr(112);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 118: VAR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = NodeUtil.opToStr(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = Node.newString((-4803), ">>>", (-1780), 4417);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = Node.newString("RETURN_RESULT", (-653), (-1713));
      linkedList0.push(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("RETURN_RESULT", linkedList0, node0, 21, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "java.io.tmpdir", (-3639), 940);
      assertTrue(node0.isUnscopedQualifiedName());
      
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(33, node0.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString(">':S5;|", 0, 0);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "TYPED", (-539), (-539));
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = Node.newString("MAYBE_LIVE");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "MAYBE_LIVE", node0, "MAYBE_LIVE");
      assertEquals(0, node1.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName(": ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("VOID");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("=", (Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_INEXISTANT_PARAM", "JSC_INEXISTANT_PARAM");
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4126, nodeArray0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) defaultCodingConvention0, "goog.asserts.assertString", node0, "goog.asserts.assertString");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node1);
      assertFalse(boolean0);
      assertTrue(node1.isUnscopedQualifiedName());
      assertEquals(33, node1.getType());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString(115, ">>>", 115, 4417);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTAN%_PARAM");
      int int0 = NodeUtil.getNameReferenceCount(node0, "JSC_INEXISTAN%_PARAM");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4120, nodeArray0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("5x");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = Node.newString("==");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = Node.newString("SETVAR", 0, 0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.referencesThis(node1);
      assertEquals(122, node1.getType());
      assertEquals(0, node1.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTANT_PARAM");
      int int0 = NodeUtil.getNameReferenceCount(node0, "JSC_INEXISTANT_PARAM");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newString("SETVAR", 0, 0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newNumber(2732.376405369, 4557, (-34));
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(47, 549, (-5185));
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(50);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(50);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Stack<Node> stack0 = new Stack<Node>();
      Node node0 = Node.newString((-51), "", (-51), (-51));
      Node node1 = NodeUtil.newFunctionNode("j2BLG'(#^0", stack0, node0, 40, (-2071));
      Node node2 = NodeUtil.getFnParameters(node1);
      assertEquals(83, node2.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.protobuf.DescriptorProtos$ServiceDescriptorProto", "@>=?I]rc<KVN");
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_INEXISTANT_PARAM", "JSC_INEXISTANT_PARAM");
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_INEXISTANT_PARAM", "JSC_INEXISTANT_PARAM");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
      assertFalse(jSDocInfo1.containsDeclaration());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTANT_PARAM");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_INEXISTANT_PARAM", "JSC_INEXISTANT_PARAM");
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals(" [testcode] ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "1", 94, 94);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
      assertEquals(94, node0.getLineno());
      assertEquals(94, node0.getCharno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY, 140, 140);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(47, 549, (-5185));
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(53, 549, (-5185));
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLOCAL_LOAD
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = Node.newString(57, "D7o");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeENUM_INIT_KEYS D7o
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = Node.newString(100, "D7o");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = Node.newNumber(2529.5220545);
      AstParallelizer astParallelizer0 = AstParallelizer.createNewFileLevelAstParallelizer(node0);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("d7)z@&AW@axR[K+F", list0, node0, (-692), (-991));
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
      assertEquals(3, node1.getChildCount());
  }
}
