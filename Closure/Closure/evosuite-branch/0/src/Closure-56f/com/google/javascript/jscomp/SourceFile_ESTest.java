/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 07 04:45:46 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("\nActual: ", sourceFile_Generator0);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile$OnDisk", "F^e~.&A/QkCaFN", (File) null);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("</<E;k", "</<E;k", "TJg> x");
      String string0 = sourceFile0.getLine(1);
      assertFalse(sourceFile0.isExtern());
      assertNotNull(string0);
      assertEquals("</<E;k", sourceFile0.getOriginalPath());
      assertEquals("TJg> x", string0);
      assertEquals("</<E;k", sourceFile0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile$Preloaded", "b", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Reader reader0 = sourceFile_OnDisk0.getCodeReader();
      SourceFile sourceFile0 = SourceFile.fromReader("b", reader0);
      String string0 = sourceFile0.getLine(0);
      assertEquals("b", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile$Preloaded", "b", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      String string0 = sourceFile_OnDisk0.getCode();
      assertNotNull(string0);
      assertEquals("", string0);
      
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("a source must have a name", "a source must have a name");
      sourceFile0.clearCachedSource();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("05", "05", "05");
      sourceFile_Preloaded0.getCodeNoCache();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.getName();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("05", "05", "05");
      sourceFile_Preloaded0.setIsExtern(false);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator("US-ASCII", sourceFile_Generator0);
      sourceFile0.toString();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(539);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        SourceFile.fromInputStream("1DSvCJ2sgDDfIiE", "1DSvCJ2sgDDfIiE", (InputStream) bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("US-ASCII", charset0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)103, (byte)42);
      // Undeclared exception!
      try { 
        SourceFile.fromInputStream("", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("05", "05", "05");
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromCode((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("w_", "");
      sourceFile0.getLineOffset(1);
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(876);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 876
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("com.google.common.io.PatternFilenameFilter");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 0
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile("TJg> x", "</<E;k");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.getNumLines();
      sourceFile_OnDisk0.getNumLines();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("B^lH ] U],bu=UP-=a", "s,", "\nActual: ");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(1694);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 2
         // Actual: 1694
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      String string0 = sourceFile_OnDisk0.getOriginalPath();
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("a source must have a name", "a source must have a name");
      sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("\nActual: ", "\nActual: ");
      String string0 = sourceFile0.getLine(2352);
      assertNull(string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("b/b/com.google.javascript.jscomp.SourceFile$Preloaded0b");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("b", "b");
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile$Preloaded", "b", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Reader reader0 = sourceFile_OnDisk0.getCodeReader();
      SourceFile sourceFile0 = SourceFile.fromReader("b", reader0);
      String string0 = sourceFile0.getLine(0);
      assertEquals("", string0);
      assertEquals("b", sourceFile0.getOriginalPath());
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("\nActual: ", "\nActual: ");
      Region region0 = sourceFile0.getRegion(1977);
      assertNull(region0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("b/b/com.google.javascript.jscomp.SourceFile$Preloaded0b");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "!");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">Q(+UW");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ">Q(+UW");
      MockFile mockFile0 = new MockFile("b", "b");
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile$Preloaded", "b", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion(0);
      assertEquals("!\n\u0000\u0000\n\n>Q(+UW\n>Q(+UW\n", region0.getSourceExcerpt());
      assertEquals(6, region0.getEndingLineNumber());
      assertNotNull(region0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Q(,(G", "Q(,(G");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Q(,(G/Q(,(G");
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Region region0 = sourceFile0.getRegion(1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\n\u0000", region0.getSourceExcerpt());
      assertNotNull(region0);
      assertFalse(sourceFile0.isExtern());
      assertEquals(1, region0.getBeginningLineNumber());
      assertEquals(2, region0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("b/b/com.google.javascript.jscomp.SourceFile$Preloaded0b");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("b", "b");
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile$Preloaded", "b", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion(0);
      assertNotNull(region0);
      assertEquals("", region0.getSourceExcerpt());
      assertEquals(1, region0.getBeginningLineNumber());
      assertEquals(2, region0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("$IM .2v~ZKlaP").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("Q(,(G", sourceFile_Generator0);
      sourceFile_Generated0.getCodeReader();
      sourceFile_Generated0.getCode();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("z[^>G'P6", (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }
}
