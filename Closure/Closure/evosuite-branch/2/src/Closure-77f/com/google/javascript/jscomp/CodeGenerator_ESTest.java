/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 14:34:29 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newNumber((-2863.502));
      // Undeclared exception!
      try { 
        codeGenerator0.addExpr(node0, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("4A7->P");
      assertEquals("/4A7->P/", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'S', "Slga--o!7Q+gpe>Un");
      String string0 = compiler0.toSource(node0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$VALUES");
      String string0 = compiler0.toSource(node0);
      assertEquals("$VALUES", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.tagAsStrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("\u00814[><!--,\u0081");
      assertEquals("\"\\u00814[><\\!--,\\u0081\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      // Undeclared exception!
      try { 
        codeGenerator0.addCaseBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newNumber(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.forName("default");
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Sga--o!7Q+gpe>Un");
      Node node1 = new Node(13, node0, node0);
      node0.addChildToFront(node1);
      // Undeclared exception!
      compiler0.toSource(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Sga--o!7Q+gpe>Un");
      Node node1 = new Node(9);
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 9
         // BITOR
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Sga--o!7Q+gpe>Un");
      Node node1 = Node.newString(12, "Sga--o!7Q+gpe>Un");
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 12
         // EQ Sga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Sga--o!7Q+gpe>Un");
      Node node1 = new Node(18, node0, 2, 32);
      node0.addChildToFront(node1);
      // Undeclared exception!
      compiler0.toSource(node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$VALUES");
      Node node1 = new Node(27, node0, node0, node0);
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for script (type 132)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '\u001C', "Slga--o!7Q+gpG>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("vjGo~.|", (int) '9', (int) '9');
      String string0 = compiler0.toSource(node0);
      assertEquals("\"vjGo~.|\"", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '0', "Slga--o!7Q+gpG>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 48
         // BINDNAME Slga--o!7Q+gpG>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '2', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 50
         // RETHROW Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '6', "vjGo~.|");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 54
         // GETVAR vjGo~.|
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '7', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 55
         // SETVAR Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '8', "!-l");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 56
         // CATCH_SCOPE !-l
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '9', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 57
         // ENUM_INIT_KEYS Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '>', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 62
         // RETURN_RESULT Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'C', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 67
         // DEL_REF Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'D', "com.google.javascript.jscomp.ProcessTweaks$TweakFunctionCall");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 68
         // REF_CALL com.google.javascript.jscomp.ProcessTweaks$TweakFunctionCall
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'F', "msg.varargs.ctor");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 70
         // DEFAULTNAMESPACE msg.varargs.ctor
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'I', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 73
         // REF_MEMBER Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'N', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 78
         // SEMI Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'O', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 79
         // LB Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'R', "msg.varargs.ctor");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 82
         // RC msg.varargs.ctor
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '_', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 95
         // ASSIGN_MUL Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) '`', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 96
         // ASSIGN_DIV Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'd', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 100
         // OR Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'j', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 106
         // EXPORT Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'm', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown type 109
         // ELSE Slga--o!7Q+gpe>Un
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString((int) 'q', "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString(370, "Slga--o!7Q+gpe>Un");
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 370
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Sga--o!7Q+gpe>Un");
      Node node1 = compiler0.parseSyntheticCode("Sga--o!7Q+gpe>Un", "vjGo~.|");
      node0.addChildToFront(node1);
      String string0 = compiler0.toSource(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("vjGo~.|", (int) '9', (int) '9');
      Node node1 = new Node(27, node0, node0, node0);
      String string0 = compiler0.toSource(node0);
      assertEquals("\"vjGo~.|\"", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("vjGo~.|", (int) '9', (int) '9');
      node0.addChildToFront(node0);
      // Undeclared exception!
      compiler0.toSource(node0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      codeGenerator0.addArrayList((Node) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      Node node0 = Node.newNumber(2436.456801);
      // Undeclared exception!
      try { 
        codeGenerator0.addArrayList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addAllSiblings((Node) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.CssRenamingMap$ByPart", "com.google.javascript.jscomp.CssRenamingMap$ByPart");
      // Undeclared exception!
      try { 
        codeGenerator0.addAllSiblings(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.jsString("\n\u0013function_info.proto\u0012\u0006jscomp\"\u00BF\u0002\n\u0016FunctionInformationMap\u00123\n\u0005entry\u0018\u0001 \u0003(\n2$.jscomp.FunctionInformationMap.Entry\u00125\n\u0006module\u0018e \u0003(\n2%.jscomp.FunctionInformationMap.Module\u001A\u0087\u0001\n\u0005Entry\u0012\n\n\u0002id\u0018\u0002 \u0002(\u0005\u0012\u0013\n\u000Bsource_name\u0018\u0003 \u0002(\t\u0012\u0013\n\u000Bline_number\u0018\u0004 \u0002(\u0005\u0012\u0013\n\u000Bmodule_name\u0018\u0005 \u0002(\t\u0012\f\n\u0004size\u0018\u0006 \u0002(\u0005\u0012\f\n\u0004name\u0018\u0007 \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018\b \u0002(\t\u001A/\n\u0006Module\u0012\f\n\u0004name\u0018f \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018g \u0002(\tB \n\u001Ccom.google.javascript.jscompP\u0001", charsetEncoder0);
      assertEquals("'\\n\u0013function_info.proto\u0012\u0006jscomp\"\u00BF\u0002\\n\u0016FunctionInformationMap\u00123\\n\u0005entry\u0018\u0001 \u0003(\\n2$.jscomp.FunctionInformationMap.Entry\u00125\\n\u0006module\u0018e \u0003(\\n2%.jscomp.FunctionInformationMap.Module\u001A\u0087\u0001\\n\u0005Entry\u0012\\n\\n\u0002id\u0018\u0002 \u0002(\u0005\u0012\u0013\\n\u000Bsource_name\u0018\u0003 \u0002(\\t\u0012\u0013\\n\u000Bline_number\u0018\u0004 \u0002(\u0005\u0012\u0013\\n\u000Bmodule_name\u0018\u0005 \u0002(\\t\u0012\f\\n\u0004size\u0018\u0006 \u0002(\u0005\u0012\f\\n\u0004name\u0018\u0007 \u0002(\\t\u0012\u0017\\n\u000Fcompiled_source\u0018\b \u0002(\\t\u001A/\\n\u0006Module\u0012\f\\n\u0004name\u0018f \u0002(\\t\u0012\u0017\\n\u000Fcompiled_source\u0018g \u0002(\\tB \\n\u001Ccom.google.javascript.jscompP\u0001'", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = CodeGenerator.jsString("'_\"Np&'", (CharsetEncoder) null);
      assertEquals("\"'_\\\"Np&'\"", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("U<A2GrWK:94Ic+)2]");
      assertEquals("\"U<A2GrWK:94Ic+)2]\"", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = CodeGenerator.strEscape("V>5M", 'z', ":.(BXR", ":.(BXR", (String) null, (CharsetEncoder) null);
      assertEquals("zV>5Mz", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.strEscape("+HLNj6vaeU<!-->zH", 'g', "-~d7C?}E_woVbO{", "Y/w8K)dG]", "1Ar>lX{+{b=", charsetEncoder0);
      assertEquals("g+HLNj6vaeU<\\!--\\>zHg", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("\u0081]]><!---,r");
      assertEquals("/\\u0081]]\\><\\!---,r/", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.strEscape("u</script94ic+)2]", 'o', "5`vZm8.#]BOBZ44:", "else", "\"{92JO?#*xD\"", charsetEncoder0);
      assertEquals("ou<\\/script94ic+)2]o", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = CodeGenerator.strEscape("\u0013\u00814mvR]><!--,\u0081\u0013", 'd', (String) null, (String) null, "ig(", (CharsetEncoder) null);
      assertEquals("d\\u0013\\u00814mvR]><\\!--,\\u0081\\u0013d", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("\n\u0013function_info.proto\u0012\u0006jscomp\"\u00BF\u0002\n\u0016FunctionInformationMap\u00123\n\u0005entry\u0018\u0001 \u0003(\n2$.jscomp.FunctionInformationMap.Entry\u00125\n\u0006module\u0018e \u0003(\n2%.jscomp.FunctionInformationMap.Module\u001A\u0087\u0001\n\u0005Entry\u0012\n\n\u0002id\u0018\u0002 \u0002(\u0005\u0012\u0013\n\u000Bsource_name\u0018\u0003 \u0002(\t\u0012\u0013\n\u000Bline_number\u0018\u0004 \u0002(\u0005\u0012\u0013\n\u000Bmodule_name\u0018\u0005 \u0002(\t\u0012\f\n\u0004size\u0018\u0006 \u0002(\u0005\u0012\f\n\u0004name\u0018\u0007 \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018\b \u0002(\t\u001A/\n\u0006Module\u0012\f\n\u0004name\u0018f \u0002(\t\u0012\u0017\n\u000Fcompiled_source\u0018g \u0002(\tB \n\u001Ccom.google.javascript.jscompP\u0001");
      assertEquals("\\u000a\\u0013function_info.proto\\u0012\\u0006jscomp\"\\u00bf\\u0002\\u000a\\u0016FunctionInformationMap\\u00123\\u000a\\u0005entry\\u0018\\u0001 \\u0003(\\u000a2$.jscomp.FunctionInformationMap.Entry\\u00125\\u000a\\u0006module\\u0018e \\u0003(\\u000a2%.jscomp.FunctionInformationMap.Module\\u001a\\u0087\\u0001\\u000a\\u0005Entry\\u0012\\u000a\\u000a\\u0002id\\u0018\\u0002 \\u0002(\\u0005\\u0012\\u0013\\u000a\\u000bsource_name\\u0018\\u0003 \\u0002(\\u0009\\u0012\\u0013\\u000a\\u000bline_number\\u0018\\u0004 \\u0002(\\u0005\\u0012\\u0013\\u000a\\u000bmodule_name\\u0018\\u0005 \\u0002(\\u0009\\u0012\\u000c\\u000a\\u0004size\\u0018\\u0006 \\u0002(\\u0005\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0007 \\u0002(\\u0009\\u0012\\u0017\\u000a\\u000fcompiled_source\\u0018\\u0008 \\u0002(\\u0009\\u001a/\\u000a\\u0006Module\\u0012\\u000c\\u000a\\u0004name\\u0018f \\u0002(\\u0009\\u0012\\u0017\\u000a\\u000fcompiled_source\\u0018g \\u0002(\\u0009B \\u000a\\u001ccom.google.javascript.jscompP\\u0001", string0);
  }
}
