/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 15:50:09 GMT 2019
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.io.PipedOutputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.siblings();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString("C1|<Wm<}0savg");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("com.google.javascript.rhino.jstype.InstanceObjectType");
      node_FileLevelJsDocBuilder0.append("yn07t");
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("", 3, 3);
      node0.setQuotedString();
      try { 
        node0.setDouble(52);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  3 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      boolean boolean0 = node0.isQuotedString();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString("");
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      assertEquals(2, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertEquals(0, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setAllFlags();
      assertEquals(0, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals(2, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      node0.setLength((-1));
      int int0 = node0.getLength();
      assertEquals(1240613, node0.getSourcePosition());
      assertEquals((-1), int0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newNumber(245.68902142862711);
      node0.putIntProp(29, (-2775));
      // Undeclared exception!
      try { 
        node0.addSuppression("(_#o@jd{:`8Y");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber(1133.5749);
      node0.setDouble(1133.5749);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(37, nodeArray0, 77, (-1820));
      Node node1 = node0.srcref(node0);
      assertEquals(37, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      node0.setWasEmptyNode(false);
      assertEquals(28679, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(824, (-1302), 16777216);
      node0.getInputId();
      assertEquals(824, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(605, 605, 605);
      boolean boolean0 = node0.isSyntheticBlock();
      assertEquals(605, node0.getType());
      assertEquals(2478685, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString("RV+/<=RVB=J", (-1579), 7220);
      node0.setSourceEncodedPosition((-1579));
      assertEquals(1048575, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      node0.getAncestors();
      assertEquals(28679, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(0, "3_0c*QS)p7!chQk[G", 1198, 0);
      node0.getChangeTime();
      assertEquals(4907008, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber(1133.5749);
      node0.setIsSyntheticBlock(true);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1133.5749 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber(55.11818983409);
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(37, nodeArray0, 77, (-1820));
      Node node1 = new Node(0, node0, 52, 262144);
      Node node2 = new Node(557, node1, node1, node1);
      // Undeclared exception!
      try { 
        node2.getChildBefore(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber(1133.5749);
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString((-137), "");
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      assertEquals((-137), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newNumber(240.0);
      node0.getDirectives();
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      node0.setChangeTime(47);
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING XVhQ#U_k6,Yw,KCG/lF [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      int int0 = node0.getSourcePosition();
      assertEquals(0, node0.getType());
      assertEquals(28679, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      node0.setCharno(54);
      assertEquals(54, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString((-1650), "q@Q{jvy%k,p", (-1650), (-1650));
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      assertEquals((-1650), node0.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      node0.setJSType(jSType0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 : function (new:Function, ...[*]): ? is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newString((-1650), "q@Q{jvy%k,p", (-1650), (-1650));
      Node node1 = new Node(0, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isEquivalentTo(node0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      boolean boolean0 = node0.isLocalResultCall();
      assertFalse(boolean0);
      assertEquals(1240613, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      int int0 = node0.getSourceOffset();
      assertEquals(0, node0.getType());
      assertEquals(7, node0.getLineno());
      assertEquals((-2147483641), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      int int0 = node0.getSourceOffset();
      assertEquals(28679, node0.getSourcePosition());
      assertEquals(0, node0.getType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber(1444.2114339);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1646));
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber(245.68902142862711);
      node0.addSuppression("(_#o@jd{:`8Y");
      try { 
        node0.setString("(_#o@jd{:`8Y");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 245.68902142862711 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      node0.setSourceFileForTesting("!ykreCpUNx$z?CN#7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      node0.appendStringTree(mockPrintWriter0);
      assertEquals(302, node0.getLineno());
      assertEquals(1240613, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      node0.setVarArgs(true);
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING XVhQ#U_k6,Yw,KCG/lF [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      node0.setOptionalArg(true);
      try { 
        node0.setDouble(0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING XVhQ#U_k6,Yw,KCG/lF [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber((-4248.78266594));
      node0.setWasEmptyNode(true);
      try { 
        node0.setString("com.google.common.collect.RegularImmutableList");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -4248.78266594 [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(245.68902142862711);
      node0.putIntProp(42, (-2775));
      try { 
        node0.setString("(_#o@jd{:`8Y");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 245.68902142862711 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      node0.setLength((-1));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      node0.appendStringTree(mockPrintWriter0);
      assertEquals(1240613, node0.getSourcePosition());
      assertEquals(302, node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(43, node0, node0);
      InputId inputId0 = new InputId("rKH");
      node1.setInputId(inputId0);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(240.0);
      node0.putIntProp((-328), 4095);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -328
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(55, nodeArray0);
      node0.checkTreeEqualsImpl(node1);
      assertEquals(55, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 30, 30);
      Node node1 = Node.newNumber((-943.979432505817), 39, 1);
      node0.isEquivalentToTyped(node1);
      assertEquals(159745, node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isNumber());
      assertEquals(122910, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, 44, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(42, "");
      node0.setString("");
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableList$1");
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(52, node0, 49, 40);
      Node node2 = null;
      try {
        node2 = new Node(52, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(128, "", 3465, 128);
      Node node1 = new Node(512, node0, 55, (-2377));
      Node node2 = null;
      try {
        node2 = new Node((-1062), node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 30, 30, 30);
      nodeArray0[0] = node0;
      Node node1 = new Node(30, nodeArray0, (-3213), 113);
      Node node2 = null;
      try {
        node2 = new Node(30, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(65536, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(4095, node0, node1, node0, 463, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString((-780), "d`<rl@>cKI@]Ku[44", 133, (-322));
      nodeArray0[0] = node0;
      Node node1 = new Node((-1196), nodeArray0, (-949), 114);
      Node node2 = null;
      try {
        node2 = new Node((-949), node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("dn3VLwu):*A'??8P");
      Node node1 = new Node(64, node0);
      Node node2 = null;
      try {
        node2 = new Node(35, node1, node1, node0, 0, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(111, 111, 0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(111, node0, node0, node1, node1, 1, 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString((-1759), "a$@~t6;2E4d[\"KK.|", (-1759), (-1759));
      Node node1 = new Node((-1759), node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(53, node1, node0, node0, node1, 2, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(0, (-698), 0);
      Node node1 = new Node(0, node0, node0, node0, 0, 712);
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node1, node0, node0, 31, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node[] nodeArray0 = new Node[8];
      Node node0 = Node.newString(0, "", 0, 0);
      nodeArray0[0] = node0;
      Node node1 = new Node(49, node0, nodeArray0[0], node0, nodeArray0[0], 55, 15);
      Node node2 = null;
      try {
        node2 = new Node(4095, node1, node1, node1, nodeArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString((-79), "(uMfk|N)EzAY}Jnw");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(32, nodeArray0, 259, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, node0);
      Node node2 = null;
      try {
        node2 = new Node(0, nodeArray0, 15, 598);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) 30, 30, 30);
      Node node1 = new Node(30, node0, node0, node0, node0, 0, 43);
      nodeArray0[0] = node0;
      Node node2 = null;
      try {
        node2 = new Node(30, nodeArray0, (-3213), 113);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(92, 92, 92);
      node0.hasChildren();
      assertEquals(376924, node0.getSourcePosition());
      assertEquals(92, node0.getType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString((-1759), "a$@~t6;2E4d[\"KK.|", (-1759), (-1759));
      Node node1 = new Node((-1759), node0, node0, node0);
      boolean boolean0 = node1.hasChildren();
      assertEquals((-1759), node0.getType());
      assertEquals((-1759), node1.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(37, nodeArray0, 77, (-1820));
      // Undeclared exception!
      try { 
        node0.getChildBefore(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString((-32), " : ", (-16), (-16));
      Node node1 = node0.getChildAtIndex((-2827));
      assertNull(node1);
      assertEquals((-32), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString((-1759), "a$@~t6;2E4d[\"KK.|", (-1759), (-1759));
      Node node1 = new Node((-1759), node0, node0, node0);
      int int0 = node1.getIndexOfChild(node1);
      assertEquals((-1759), node0.getType());
      assertEquals((-1), int0);
      assertEquals((-1759), node1.getType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.addChildToBack(node0);
      int int0 = node0.getIndexOfChild(node0);
      assertEquals(491640, node0.getSourcePosition());
      assertTrue(node0.isCatch());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(0, nodeArray0);
      node0.addChildrenToBack(node0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(2491);
      Node node1 = new Node((-774), node0, node0, node0, 0, 29);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(605, 605, 605);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.addChildrenToFront(node0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.addChildToFront(node1);
      assertEquals(2478685, node0.getSourcePosition());
      assertEquals(605, node0.getType());
      assertTrue(node1.isParamList());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("", 33, 1031);
      Node node1 = new Node(33, node0, node0);
      // Undeclared exception!
      try { 
        node0.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString((-2847), "missing prop: ");
      Node node1 = new Node((-2847), node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0);
      node1.addChildrenToFront(node1);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber((-577.7990889), (-1318), (-1318));
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = new Node(43, node0, node0, node0, node0, 44, 55);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = Node.newString(44, "nt|");
      Node node2 = new Node(43, node0, node0, node0, node1, 44, 55);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(55.11818983409);
      Node node1 = new Node((-1208), node0, node0, 15, 30);
      node1.addChildBefore(node1, node0);
      assertEquals(2, node1.getChildCount());
      assertTrue(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = Node.newString(44, "nt|");
      Node node2 = new Node(43, node0, node0, node0, node1, 44, 55);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString((-2379), "RANGE_ERROR_FUNCTION_TYPE", (-2379), 8202);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString(3181, "");
      Node node1 = new Node(8233, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0);
      nodeArray0[1] = node1;
      node1.addChildrenAfter(nodeArray0[1], node0);
      assertTrue(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node((byte)59);
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = Node.newString(44, "nt|");
      Node node2 = new Node(43, node0, node0, node0, node1, 44, 55);
      assertEquals(2, node2.getChildCount());
      
      node2.removeChild(node0);
      assertEquals(44, node1.getType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node((-2013), 847, 15);
      Node node1 = Node.newString(15, "=6zVp8;T8fOa");
      Node node2 = new Node(847, node0, node0, node1);
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString(235, "com.google.common.base.Joiner$2", (-750), (-750));
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(235, "com.google.common.base.Joiner$2", (-750), (-750));
      Node node1 = new Node((-750), node0, node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber(1834.7029322, 7, 7);
      node0.addChildToFront(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.replaceChild(node0, node1);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(".K+@#);");
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString((-1678), ",1MU_ouc0a");
      node0.setSourceFileForTesting(",1MU_ouc0a");
      // Undeclared exception!
      try { 
        node0.clonePropsFrom((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("a$@~t6;2E4d[\"KK.|", 92, 92);
      Node node1 = node0.clonePropsFrom(node0);
      assertEquals(40, node1.getType());
      assertEquals(376924, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      node0.setSourceFileForTesting("!ykreCpUNx$z?CN#7");
      node0.setLength((-1));
      assertEquals(39, node0.getType());
      assertEquals(1240613, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("comparator");
      node0.putBooleanProp(56, true);
      int int0 = node0.getExistingIntProp(56);
      assertTrue(node0.isString());
      assertEquals(1, int0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3273, 3273, 3273);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(917);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 917
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(39);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(39);
      // Undeclared exception!
      try { 
        node0.setDouble((-1657.471868311525));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(40, "CS10Ldzo");
      Node node1 = new Node(40, node0);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(38, 3438, 1504);
      // Undeclared exception!
      try { 
        node0.setString("\n\nTOre2:");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("g/DX", (-3462), (-30));
      String string0 = node0.toString(false, false, false);
      assertEquals("STRING g/DX", string0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      Node node1 = new Node(28, node0, node0);
      String string0 = node1.checkTreeEquals(node0);
      assertEquals("Node tree inequality:\nTree1:\nPOS\n    STRING  54\n\n\nTree2:\nSTRING  54\n\n\nSubtree1: POS\n    STRING  54\n\n\nSubtree2: STRING  54\n", string0);
      assertEquals(28, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(54, node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.getSourceFileName();
      assertEquals(28679, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber(240.0);
      node0.getSourceFileName();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isFromExterns();
      assertEquals(0, node0.getType());
      assertEquals(28679, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber(245.68902142862711);
      boolean boolean0 = node0.isFromExterns();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newNumber((-1055.017571));
      node0.setSourceFileForTesting("&ZQ[Cbo");
      int int0 = node0.getSourceOffset();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(0, 0, 115);
      node0.setLineno(8);
      assertEquals(8, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newString(32, "O}yR-[H$w|%O&V", (-3297), (-3297));
      node0.setLineno(52);
      assertEquals(52, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      Node node1 = new Node(28, node0, node0);
      node1.setSourceEncodedPositionForTree(47);
      assertEquals(47, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString("h24BTVTN(|}xEmo", 1527, 1527);
      Node node1 = new Node(1527, node0, 19, 297);
      node1.children();
      assertEquals(6256119, node0.getSourcePosition());
      assertEquals(1527, node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals(78121, node1.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(235, "com.google.common.base.Joiner$2", (-750), (-750));
      node0.children();
      assertEquals(235, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(0, "})g(Y");
      // Undeclared exception!
      try { 
        node0.getAncestor((-2899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = node0.getAncestor(697);
      assertNull(node1);
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(0);
      node0.addChildToFront(node0);
      node0.getAncestor(697);
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), (-756), (-756));
      boolean boolean0 = node0.hasOneChild();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = new Node(43, node0, node0, node0, node0, 44, 55);
      boolean boolean0 = node1.hasOneChild();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(180279, node1.getSourcePosition());
      assertEquals(43, node1.getType());
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = Node.newString(44, "nt|");
      Node node2 = new Node(43, node0, node0, node0, node1, 44, 55);
      node2.hasOneChild();
      assertEquals(180279, node2.getSourcePosition());
      assertEquals(0, node0.getSourcePosition());
      assertEquals((-1), node1.getLineno());
      assertEquals(44, node1.getType());
      assertTrue(node0.isNumber());
      assertTrue(node2.isFalse());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString((-1103), "`@^Z?n>oZ:M//i", (-1103), (-1103));
      node0.hasMoreThanOneChild();
      assertEquals((-1103), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = new Node(43, node0, node0, node0, node0, 44, 55);
      boolean boolean0 = node1.hasMoreThanOneChild();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(180279, node1.getSourcePosition());
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertTrue(node1.isFalse());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = Node.newString(44, "nt|");
      Node node2 = new Node(43, node0, node0, node0, node1, 44, 55);
      boolean boolean0 = node2.hasMoreThanOneChild();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(180279, node2.getSourcePosition());
      assertTrue(node2.isFalse());
      assertEquals(39, node0.getType());
      assertTrue(boolean0);
      assertEquals(44, node1.getType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber((-378.909805972265));
      Node node1 = new Node(3004, node0, node0);
      boolean boolean0 = node1.hasChild(node0);
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(3004, node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString((-1759), "a$@~t6;2E4d[\"KK.|", (-1759), (-1759));
      Node node1 = new Node((-1759), node0, node0, node0);
      boolean boolean0 = node1.hasChild(node1);
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals((-1759), node0.getType());
      assertTrue(node1.hasChildren());
      assertEquals((-1759), node1.getType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString("Object#Key");
      String string0 = node0.checkTreeEquals(node0);
      assertNull(string0);
      assertTrue(node0.isString());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(235, "com.google.common.base.Joiner$2", (-750), (-750));
      Node node1 = new Node((-750), node0, node0);
      Node node2 = new Node((-750), node1, node1, node1, node1, (-3), 37);
      node1.checkTreeEqualsImpl(node2);
      assertEquals((-750), node1.getType());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertEquals(235, node0.getType());
      assertEquals((-750), node2.getType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString("", 3, 3);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertEquals(12291, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertNull(node_NodeMismatch0);
      assertFalse(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      Node node1 = new Node(28, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      boolean boolean0 = node_NodeMismatch0.equals("");
      assertEquals(28, node1.getType());
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals(221238, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(235, "com.google.common.base.Joiner$2", (-750), (-750));
      Node node1 = new Node((-750), node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
      assertNull(node_NodeMismatch0);
      assertEquals((-750), node1.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(235, node0.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(235, "com.google.common.base.Joiner$2", (-750), (-750));
      Node node1 = new Node((-750), node0, node0);
      Node node2 = new Node((-750), node1, node1, node1, node1, 3, 37);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(12325, node2.getSourcePosition());
      assertEquals((-750), node1.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(235, node0.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-750), node2.getType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString(3, "", 3, 3);
      Node node1 = new Node(3, node0, node0, node0);
      node0.isEquivalentTo(node1);
      assertEquals(3, node0.getType());
      assertEquals(3, node1.getType());
      assertEquals(12291, node0.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(3, "", 3, 3);
      Node node1 = new Node(3, node0, node0, node0);
      node1.removeChild(node0);
      node1.checkTreeEqualsImpl(node0);
      assertFalse(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(23);
      assertEquals(23, node0.getType());
      assertEquals(0, node0.getChildCount());
      
      nodeArray0[0] = node0;
      Node node1 = new Node(37, nodeArray0[0], nodeArray0[0]);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
      assertNull(node_NodeMismatch0);
      assertTrue(node1.isCall());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      assertTrue(node0.isNumber());
      assertEquals(1240613, node0.getSourcePosition());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(3621, nodeArray0);
      boolean boolean0 = node1.isEquivalentTo(node1);
      assertTrue(boolean0);
      assertEquals(3621, node1.getType());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(829, 829, 829);
      node0.addChildToFront(node0);
      // Undeclared exception!
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0);
      Node node2 = new Node(0, node1, node1);
      boolean boolean0 = node1.isEquivalentToTyped(node2);
      assertEquals(1, node2.getChildCount());
      assertFalse(boolean0);
      assertEquals(0, node2.getType());
      assertEquals(0, node0.getType());
      assertEquals(0, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newNumber(1133.5749);
      String string0 = node0.getQualifiedName();
      assertNull(string0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(38, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(42);
      String string0 = node0.getQualifiedName();
      assertNotNull(string0);
      assertEquals("this", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber(1133.5749);
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(38, 50, 4);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 50 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString(42, "");
      boolean boolean0 = node0.isQualifiedName();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(154, (-563), (-189));
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertFalse(boolean0);
      assertTrue(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString("32DL&u");
      Node node1 = new Node(38, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, nodeArray0[0], nodeArray0[0]);
      assertTrue(node1.hasOneChild());
      assertEquals(0, node1.getType());
      assertEquals((-1), node1.getLineno());
      
      Node node2 = nodeArray0[0].detachFromParent();
      assertEquals(0, node2.getType());
      assertEquals((-1), node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString((-1759), "a$@~t6;2E4d[\"KK.|", (-1759), (-1759));
      Node node1 = node0.removeFirstChild();
      assertEquals((-1759), node0.getType());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString((-1650), "q@Q{jvy%k,p", (-1650), (-1650));
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.removeFirstChild();
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString(5, " : ", 7, 7);
      node0.addChildrenToBack(node0);
      Node node1 = node0.removeChildren();
      assertEquals(28679, node1.getSourcePosition());
      assertEquals(5, node1.getType());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1474), (-1474), 738);
      Node node1 = new Node((-1474), node0, node0, node0, node0);
      assertTrue(node1.hasOneChild());
      
      node1.detachChildren();
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newNumber(1444.2114339);
      Node node1 = new Node(30, node0, node0, 4095, 1609);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newNumber(1444.2114339);
      Node node1 = Node.newString("com.google.javascript.rhino.Node$NodeMismatch");
      Node node2 = new Node(30, node1, node0, 4095, 1609);
      node2.removeChildAfter(node1);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      assertEquals(39, node0.getType());
      assertEquals(1240613, node0.getSourcePosition());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(3621, nodeArray0);
      Node node2 = node1.cloneTree();
      assertEquals(1, node2.getChildCount());
      assertEquals(3621, node2.getType());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(functionType0);
      jSTypeArray0[3] = jSType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = node0.cloneTree();
      assertEquals(4, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertEquals(83, node1.getType());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString(0, " : ", 7, 7);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = node0.copyInformationFrom(node0);
      assertEquals(28679, node1.getSourcePosition());
      assertEquals(0, node1.getType());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      Node node1 = node0.copyInformationFromForTree(node0);
      assertEquals(1240613, node1.getSourcePosition());
      assertTrue(node1.isNumber());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.JSDocInfo$Visibility", 153, 0);
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      node0.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newNumber(240.0);
      Node node1 = new Node((-5829), node0, (-2708), 1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      assertEquals((-5829), node2.getType());
      assertEquals(39, node0.getType());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString(5, " : ", 7, 7);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      assertEquals(28679, node1.getSourcePosition());
      assertEquals(5, node1.getType());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newNumber((-378.909805972265));
      Node node1 = new Node(3004, node0, node0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      assertEquals(3004, node2.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node0.isNumber());
      assertFalse(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.addSuppression(" docr~7#j^E?#od&Zqq");
      node0.addSuppression("FALSE");
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber(1444.2114339);
      Node node1 = new Node(30, node0, node0, 4095, 1609);
      assertEquals(30, node1.getType());
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1646));
      node1.setSideEffectFlags(node_SideEffectFlags0);
      assertEquals(16774729, node1.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals(52, node_SideEffectFlags0.valueOf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newNumber(1133.5749);
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber(245.68902142862711);
      boolean boolean0 = node0.isAdd();
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newNumber(55.11818983409);
      boolean boolean0 = node0.isAnd();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(101.93);
      boolean boolean0 = node0.isArrayLit();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newNumber(245.68902142862711);
      boolean boolean0 = node0.isAssign();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString("Object#Key");
      boolean boolean0 = node0.isAssignAdd();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), (-756), (-756));
      Node node1 = node0.srcrefTree(node0);
      node1.type = 93;
      boolean boolean0 = node0.isAssignAdd();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      node0.isBlock();
      assertTrue(node0.isString());
      assertEquals(221238, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      boolean boolean0 = node0.isBreak();
      assertEquals(221238, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078);
      boolean boolean0 = node0.isCall();
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString(235, "com.google.common.base.Joiner$2", (-750), (-750));
      boolean boolean0 = node0.isCase();
      assertEquals(235, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = node0.isCast();
      assertFalse(boolean0);
      assertEquals(23, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.isCatch();
      assertEquals(467058, node0.getSourcePosition());
      assertTrue(node0.isDo());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      boolean boolean0 = node0.isCatch();
      assertEquals(491640, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(42, "");
      boolean boolean0 = node0.isComma();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(42, node0.getType());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 302);
      boolean boolean0 = node0.isContinue();
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertEquals(1237294, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(240.0);
      boolean boolean0 = node0.isDebugger();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.isDec();
      assertEquals(0, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      node0.isDefaultCase();
      assertEquals(39, node0.getType());
      assertEquals(1240613, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      boolean boolean0 = node0.isDelProp();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals(1240613, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(39);
      boolean boolean0 = node0.isDo();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString(5, " : ", 7, 7);
      boolean boolean0 = node0.isExprResult();
      assertEquals(28679, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(5, node0.getType());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("Object#Key");
      boolean boolean0 = node0.isFalse();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      Node node1 = new Node(43, node0, node0, node0, node0, 15, 55);
      boolean boolean0 = node1.isFalse();
      assertTrue(boolean0);
      assertTrue(node1.hasOneChild());
      assertEquals(61495, node1.getSourcePosition());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 302);
      boolean boolean0 = node0.isFor();
      assertFalse(boolean0);
      assertEquals(1237294, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(105, "\n\nTOre2:", 84, 1504);
      boolean boolean0 = node0.isFunction();
      assertTrue(boolean0);
      assertEquals(345568, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString("", 3, 3);
      boolean boolean0 = node0.isGetterDef();
      assertFalse(boolean0);
      assertEquals(12291, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber(240.0);
      boolean boolean0 = node0.isGetElem();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      node0.isGetProp();
      assertEquals(221238, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      boolean boolean0 = node0.isHook();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      boolean boolean0 = node0.isIf();
      assertFalse(boolean0);
      assertEquals(221238, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(605, 605, 605);
      boolean boolean0 = node0.isIn();
      assertEquals(2478685, node0.getSourcePosition());
      assertEquals(605, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isInc();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString("C1|<Wm<}0savg");
      boolean boolean0 = node0.isInstanceOf();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(935);
      assertEquals(935, node0.getType());
      
      node0.setType(52);
      boolean boolean0 = node0.isInstanceOf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      boolean boolean0 = node0.isLabel();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString("h24BTVTN(|}xEmo", 1527, 1527);
      node0.isLabelName();
      assertEquals(40, node0.getType());
      assertEquals(6256119, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString(3360, "", 1571, 1571);
      boolean boolean0 = node0.isName();
      assertEquals(6436387, node0.getSourcePosition());
      assertEquals(3360, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("", 3, 3);
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals(12291, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(0, 0, 0);
      assertEquals(0, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      
      nodeArray0[0] = node0;
      boolean boolean0 = nodeArray0[0].isNew();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(605, 605, 605);
      boolean boolean0 = node0.isNot();
      assertEquals(2478685, node0.getSourcePosition());
      assertEquals(605, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 302);
      node0.isNull();
      assertEquals(1237294, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = node0.isNumber();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newNumber((double) 12);
      boolean boolean0 = node0.isNumber();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = new Node(829, 829, 829);
      node0.isObjectLit();
      assertEquals(3396413, node0.getSourcePosition());
      assertEquals(829, node0.getType());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(935);
      boolean boolean0 = node0.isOr();
      assertFalse(boolean0);
      assertEquals(935, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(829, 829, 829);
      node0.isParamList();
      assertEquals(3396413, node0.getSourcePosition());
      assertEquals(829, node0.getType());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      boolean boolean0 = node0.isParamList();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      boolean boolean0 = node0.isRegExp();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      node0.isReturn();
      assertEquals(1240613, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      node0.isScript();
      assertEquals(40, node0.getType());
      assertEquals(221238, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newString(42, "");
      boolean boolean0 = node0.isSetterDef();
      assertEquals(42, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(23);
      boolean boolean0 = node0.isString();
      assertEquals(23, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("0V^M", 105, 0);
      boolean boolean0 = node0.isString();
      assertTrue(boolean0);
      assertEquals(430080, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<TemplateType> arrayDeque0 = new ArrayDeque<TemplateType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayDeque0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      boolean boolean0 = node0.isStringKey();
      assertFalse(boolean0);
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      node0.isSwitch();
      assertEquals(221238, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      boolean boolean0 = node0.isThis();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals(221238, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString(".K+@#);");
      boolean boolean0 = node0.isThrow();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("", 54, 54);
      boolean boolean0 = node0.isTrue();
      assertEquals(221238, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(44, "nt|");
      boolean boolean0 = node0.isTrue();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      boolean boolean0 = node0.isTry();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(77, 152, 329);
      boolean boolean0 = node0.isTry();
      assertEquals(622921, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString("XVhQ#U_k6,Yw,KCG/lF");
      boolean boolean0 = node0.isTypeOf();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString(32, "O}yR-[H$w|%O&V", (-3313), (-3313));
      boolean boolean0 = node0.isTypeOf();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newNumber(240.0);
      boolean boolean0 = node0.isVar();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(0);
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getType());
      
      nodeArray0[0] = node0;
      boolean boolean0 = nodeArray0[0].isVoid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newNumber(3559.078078, 302, 3621);
      node0.isWhile();
      assertEquals(39, node0.getType());
      assertEquals(1240613, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      node0.isWith();
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }
}
