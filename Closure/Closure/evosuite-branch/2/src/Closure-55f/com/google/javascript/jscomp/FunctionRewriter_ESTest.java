/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 13:47:14 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionRewriter_ESTest extends FunctionRewriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("g+FN[Ld96:I[", "function JSCompiler_get(JSCompiler_get_name) {  return function() {returthis[JSComiler_gjt_name]}}");
      Node node0 = compiler0.parse(jSSourceFile0);
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
      node0.setType(12);
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_vale) {return JSCompiler_identityFn_value}}");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertFalse(node0.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JWCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_ident.tyFn_value}}");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals(0, Node.NON_SPECIALCALL);
  }
}
