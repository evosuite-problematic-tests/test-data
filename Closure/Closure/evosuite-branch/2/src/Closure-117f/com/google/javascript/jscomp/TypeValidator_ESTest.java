/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 16:05:53 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckSuspiciousCode;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "#K8hq");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "#K8hq");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0, (ScopeCreator) null);
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, "?");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "#K8hq");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "#K8hq");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.setShouldReport(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = CheckSuspiciousCode.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make("", 0, 0, checkLevel0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(RangeError, RangeError)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, (Node) null, jSType0, "#K8hq");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "Object#Element");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, jSType0);
      typeValidator0.expectAnyObject(nodeTraversal0, (Node) null, enumType0, "JSC_HIDDEN_PROPERTY_MISMATCH");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      typeValidator0.expectString(nodeTraversal0, (Node) null, jSType0, "Unknown class name");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      typeValidator0.expectNumber(nodeTraversal0, (Node) null, jSType0, "Not declared as a constructor");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "Not declared as a type name");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "ar}Bcc%~N.xlZ!D/'");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, jSType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, jSType0, jSType0, jSType0, (JSType) enumType0, (JSType) enumType0, jSType0, (JSType) enumType0, (JSType) enumType0, (JSType) enumType0);
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) enumType0, jSType0, (List<JSType>) immutableList0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, enumType0, "ar}Bcc%~N.xlZ!D/'", functionType0);
      assertFalse(functionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, jSType0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, enumType0, enumType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "#K8hq");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, jSType0);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, objectType0, enumType0);
      assertTrue(objectType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, "#K8hq");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSType0);
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, objectType0, enumType0, "Unknown class name");
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, (Node) null, jSType0, jSType0, node0, (byte)0);
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, jSType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, jSType0, jSType0, jSType0, (JSType) enumType0, (JSType) enumType0, jSType0, (JSType) enumType0, (JSType) enumType0, (JSType) enumType0);
      JSType jSType1 = jSTypeRegistry0.createFunctionType((ObjectType) enumType0, jSType0, (List<JSType>) immutableList0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      // Undeclared exception!
      try { 
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType1, (Node) null, (-884));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, "f%i", jSType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, jSType0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, node0, enumType0, enumType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, (Node) null, functionType0);
      assertFalse(functionType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "");
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0);
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, jSType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, jSType0, jSType0, jSType0, (JSType) objectType0, (JSType) objectType0, jSType0, (JSType) enumType0, (JSType) objectType0, (JSType) enumType0);
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) enumType0, jSType0, (List<JSType>) immutableList0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, (Node) null, objectType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "K8v`hq");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      String string0 = typeValidator0.getReadableJSTypeName(node0, false);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "#K8hq");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      String string0 = typeValidator0.getReadableJSTypeName(node0, true);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = CheckSuspiciousCode.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make("", 0, 0, checkLevel0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(jSTypeRegistry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = CheckSuspiciousCode.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make("", 0, 0, checkLevel0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }
}
