/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 15:29:42 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      Node node0 = Node.newString("The name ", (-545), (-940));
      // Undeclared exception!
      try { 
        normalize_VerifyConstants0.process(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, true);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(126, node0, node0, node0, 44, 57296);
      // Undeclared exception!
      try { 
        normalize0.shouldTraverse(nodeTraversal0, node1, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Normalize constraints violated:
         // LABEL normalization
         //
         verifyException("com.google.javascript.jscomp.Normalize", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(";GG:-ny");
      Node node1 = new Node(4, node0, node0, node0);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
      normalize_VerifyConstants0.process(node0, node0);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode(";G-ny");
      Node node1 = new Node(4, node0, node0, node0);
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      normalize_VerifyConstants0.process(node0, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      Normalize normalize0 = new Normalize(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(113, nodeArray0);
      // Undeclared exception!
      try { 
        normalize0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      Node node0 = compiler0.parseTestCode(";GG:-ny");
      Node node1 = new Node(4, node0, node0, node0);
      normalize0.process(node0, node0);
      NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) normalize0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      Node node0 = new Node(126, 4011, 4011);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        normalize0.shouldTraverse(nodeTraversal0, node0, node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      Node node0 = new Node(105, 3216, 4015);
      node0.addChildToFront(node0);
      boolean boolean0 = normalize0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize normalize0 = new Normalize(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
      Node node0 = new Node(105, 3216, 4015);
      Node node1 = Node.newString(">H2f*/5!+", 49, 4095);
      node0.addChildToFront(node1);
      boolean boolean0 = normalize0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
  }
}
