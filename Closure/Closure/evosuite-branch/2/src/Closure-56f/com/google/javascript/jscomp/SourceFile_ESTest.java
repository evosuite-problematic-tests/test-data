/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 13:49:12 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("X7w}<5:QCqFdyX7#hGi", (SourceFile.Generator) null);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("4<SfFeZ]|``=", sourceFile_Generator0);
      Reader reader0 = sourceFile_Generated0.getCodeReader();
      SourceFile sourceFile0 = SourceFile.fromReader("bS%4!}", reader0);
      assertEquals("bS%4!}", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.common.io.PatternFilenameFilter", "com.google.common.io.PatternFilenameFilter", (File) null);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 912);
      SourceFile sourceFile0 = SourceFile.fromInputStream("5Gy+N(tWr", (String) null, (InputStream) pushbackInputStream0);
      sourceFile0.clearCachedSource();
      assertEquals("5Gy+N(tWr", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile("wl");
      sourceFile_OnDisk0.getCodeNoCache();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("S7Eu#ke*xFf0EL", "])'3I!<SHh&~", (File) mockFile0);
      SourceFile sourceFile0 = SourceFile.fromFile(file0);
      sourceFile0.getName();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 912);
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream("5Gy+N(tWr", (String) null, (InputStream) pushbackInputStream0);
      sourceFile_Preloaded0.setIsExtern(false);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("5Gy+N(tWr", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("je/", "je/");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);
      sourceFile0.toString();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 688, (byte)102);
      SourceFile sourceFile0 = SourceFile.fromInputStream("PLLUcnsrU~X@Xd\"DST", (InputStream) byteArrayInputStream0);
      assertEquals("PLLUcnsrU~X@Xd\"DST", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile$OnDisk", "com.google.javascript.jscomp.SourceFile$OnDisk");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      boolean boolean0 = sourceFile_OnDisk0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromCode((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromCode("", "ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn(" z}1j&nT^2!").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = (SourceFile.Generated)SourceFile.fromGenerator(" z}1j&nT^2!", sourceFile_Generator0);
      sourceFile_Generated0.getNumLines();
      // Undeclared exception!
      try { 
        sourceFile_Generated0.getLineOffset((-155));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -155
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("4<SfFeZ]|``=", sourceFile_Generator0);
      // Undeclared exception!
      try { 
        sourceFile_Generated0.getLineOffset((-1396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 0
         // Actual: -1396
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn(" z}1j&nT^2!").when(sourceFile_Generator0).getCode();
      SourceFile sourceFile0 = SourceFile.fromGenerator(" z}1j&nT^2!", sourceFile_Generator0);
      sourceFile0.getLineOffset(1);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("mY/vRhJgo}1;0", "mY/vRhJgo}1;0");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(403);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 403
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn(" z}1j&nT^2!").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = (SourceFile.Generated)SourceFile.fromGenerator(" z}1j&nT^2!", sourceFile_Generator0);
      sourceFile_Generated0.getNumLines();
      int int0 = sourceFile_Generated0.getNumLines();
      assertEquals(1, int0);
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActual: ", "\nActual: ");
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(2, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator("6", sourceFile_Generator0);
      String string0 = sourceFile0.getOriginalPath();
      assertFalse(sourceFile0.isExtern());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("y-p(|xnt0'J_Uv;z", "y-p(|xnt0'J_Uv;z", "y-p(|xnt0'J_Uv;z");
      sourceFile_Preloaded0.getOriginalPath();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("je/", "je/");
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);
      sourceFile0.getCodeReader();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream("UTF-16BE", "UTF-16BE", (InputStream) dataInputStream0);
      boolean boolean0 = sourceFile_Preloaded0.hasSourceInMemory();
      assertTrue(boolean0);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("wl");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SourceFile sourceFile0 = SourceFile.fromFile("wl");
      String string0 = sourceFile0.getLine((-618));
      assertNull(string0);
      
      sourceFile0.getCodeReader();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActual: ", "\nActual: ");
      String string0 = sourceFile_Preloaded0.getLine(10);
      assertNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("R`@8Q", "\n");
      String string0 = sourceFile0.getLine((-3128));
      assertEquals("R`@8Q", sourceFile0.getOriginalPath());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("?-='WNm23Z >cQh]}?l", "?-='WNm23Z >cQh]}?l");
      String string0 = sourceFile_Preloaded0.getLine((-1371));
      assertEquals("?-='WNm23Z >cQh]}?l", string0);
      assertNotNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActual: ", "\nActual: ");
      Region region0 = sourceFile_Preloaded0.getRegion((-60));
      assertNotNull(region0);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals("\nActual: ", region0.getSourceExcerpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("4<SfFeZ]|``=", sourceFile_Generator0);
      Region region0 = sourceFile_Generated0.getRegion(1154);
      assertNull(region0);
      
      sourceFile_Generated0.getCodeReader();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("R`@8Q", "\n");
      Region region0 = sourceFile0.getRegion((-1098));
      assertFalse(sourceFile0.isExtern());
      assertNotNull(region0);
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals("R`@8Q", sourceFile0.getOriginalPath());
      assertEquals(1, region0.getBeginningLineNumber());
      assertEquals("", region0.getSourceExcerpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("com.google.common.base.Charsets", (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }
}
