/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 14:23:59 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RenameLabels_ESTest extends RenameLabels_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      Node node0 = Node.newString(" &", 126, 126);
      Node node1 = new Node(126, node0, node0, node0);
      // Undeclared exception!
      try { 
        renameLabels0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      Node node0 = Node.newString(126, ">f~m3Ao<J6rq<?p-V");
      Node node1 = new Node(126, node0, node0, node0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0, (ScopeCreator) null);
      renameLabels_ProcessLabels0.shouldTraverse(nodeTraversal0, node1, node1);
      // Undeclared exception!
      try { 
        renameLabels_ProcessLabels0.shouldTraverse(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      Node node0 = Node.newString("1.|'l.R>", 116, 116);
      Node node1 = new Node(116, node0, node0, node0);
      renameLabels0.process(node1, node1);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      Node node0 = Node.newString(117, ">f~m3Ao<J6rq<?p-V");
      renameLabels0.process(node0, node0);
      assertEquals(17, Node.TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      Node node0 = Node.newString("");
      Node node1 = new Node(117, node0, node0, 24, 43);
      // Undeclared exception!
      try { 
        renameLabels0.process(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0, (ScopeCreator) null);
      Node node0 = new Node(126);
      // Undeclared exception!
      try { 
        renameLabels_ProcessLabels0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
