/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 12:46:29 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.MustBeReachingVariableDef;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MustBeReachingVariableDef_ESTest extends MustBeReachingVariableDef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.MustBeReachingVariableDef$MustDef");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = mustBeReachingVariableDef0.createEntryLattice();
      assertNotNull(mustBeReachingVariableDef_MustDef0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Scope.Var> linkedList0 = new LinkedList<Scope.Var>();
      ListIterator<Scope.Var> listIterator0 = linkedList0.listIterator();
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = new MustBeReachingVariableDef.MustDef(listIterator0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = compiler0.parseTestCode("arguments");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.flowThrough(node0, mustBeReachingVariableDef_MustDef0);
      assertNotSame(mustBeReachingVariableDef_MustDef1, mustBeReachingVariableDef_MustDef0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Scope.Var> linkedList0 = new LinkedList<Scope.Var>();
      linkedList0.add((Scope.Var) null);
      ListIterator<Scope.Var> listIterator0 = linkedList0.listIterator(0);
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = null;
      try {
        mustBeReachingVariableDef_MustDef0 = new MustBeReachingVariableDef.MustDef(listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.MustBeReachingVariableDef$MustDef", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = new MustBeReachingVariableDef.MustDef();
      Object object0 = new Object();
      boolean boolean0 = mustBeReachingVariableDef_MustDef0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Scope.Var> linkedList0 = new LinkedList<Scope.Var>();
      ListIterator<Scope.Var> listIterator0 = linkedList0.listIterator();
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = new MustBeReachingVariableDef.MustDef(listIterator0);
      boolean boolean0 = mustBeReachingVariableDef_MustDef0.equals(mustBeReachingVariableDef_MustDef0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Scope.Var> linkedList0 = new LinkedList<Scope.Var>();
      ListIterator<Scope.Var> listIterator0 = linkedList0.listIterator();
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = new MustBeReachingVariableDef.MustDef(listIterator0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = compiler0.parseTestCode("arguments");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.join(mustBeReachingVariableDef_MustDef0, mustBeReachingVariableDef_MustDef0);
      assertNotSame(mustBeReachingVariableDef_MustDef1, mustBeReachingVariableDef_MustDef0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Scope.Var> linkedList0 = new LinkedList<Scope.Var>();
      ListIterator<Scope.Var> listIterator0 = linkedList0.listIterator();
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef0 = new MustBeReachingVariableDef.MustDef(listIterator0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = compiler0.parseTestCode("com.gogle.javascript.jsc=mp.zustBeReahingVar^ableDef$M^stDef");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
      MustBeReachingVariableDef.MustDef mustBeReachingVariableDef_MustDef1 = mustBeReachingVariableDef0.flowThrough(node0, mustBeReachingVariableDef_MustDef0);
      assertNotSame(mustBeReachingVariableDef_MustDef1, mustBeReachingVariableDef_MustDef0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Node node0 = compiler0.parseTestCode("arguments");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);
      MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
      mustBeReachingVariableDef0.initialize();
      Node node1 = mustBeReachingVariableDef0.getDef("arguments", node0);
      assertNull(node1);
  }
}
