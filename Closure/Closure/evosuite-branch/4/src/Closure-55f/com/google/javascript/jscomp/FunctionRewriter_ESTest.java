/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 06:58:23 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionRewriter_ESTest extends FunctionRewriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make("-$Nc$S", node0, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
      loggerErrorManager0.report(checkLevel0, jSError0);
      functionRewriter0.process(node0, node0);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      node0.setType(437);
      functionRewriter0.process(node0, node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseSyntheticCode("function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}", "function JSCompiler_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
      node0.setType(113);
      functionRewriter0.process(node0, node0);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = compiler0.parseTestCode("function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_valOe}}");
      functionRewriter0.process(node0, node0);
      assertFalse(node0.isOnlyModifiesThisCall());
  }
}
