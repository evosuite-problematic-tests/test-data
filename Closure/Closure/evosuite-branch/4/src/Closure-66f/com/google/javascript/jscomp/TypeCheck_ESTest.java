/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 09:20:22 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LineNumberCheck;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.SemanticReverseAbstractInterpreter;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
      TypeCheck typeCheck1 = typeCheck0.reportMissingProperties(false);
      assertSame(typeCheck0, typeCheck1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      compiler0.parseSyntheticCode("#G", "#G");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      Node node0 = new Node(41, 20, 2);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      Node node1 = new Node((-4036), node0);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      Node node1 = new Node(8, node0, 45, 48);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.processForTesting((Node) null, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      Node node1 = new Node((-4036), node0);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.process(node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("e");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      Node node1 = new Node((-4036), node0);
      typeCheck0.processForTesting(node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#G", "?1&");
      Node node0 = compiler0.parse(jSSourceFile0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      // Undeclared exception!
      try { 
        typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node0 = Node.newString(118, "Illegal annotation on {0}. @implicitCast may only be used in externs.");
      boolean boolean0 = typeCheck0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(50, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.reportUnknownTypes);
      typeCheck0.processForTesting(node0, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("");
      node0.addSuppression(">3b*7");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      Node node1 = new Node(8, node0, 45, 48);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkMissingReturn, compilerOptions0.checkUndefinedProperties);
      Node node1 = new Node(4, node0, node0, node0, node0, 4, 9);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      Node node1 = new Node(6, node0, node0, node0, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(7, node0, 22, 10);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportUnknownTypes, compilerOptions0.checkMissingReturn);
      Node node1 = new Node(10, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      Node node2 = new Node(35, node1, node1, node1, 1, 2);
      typeCheck0.visit(nodeTraversal0, node2, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      Node node1 = new Node(11, node0, node0, node0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkGlobalNamesLevel, compilerOptions0.checkGlobalNamesLevel);
      Node node1 = new Node(12, node0, node0, node0, node0, 13, 41);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.parseSyntheticCode("#G", "?1}");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUndefinedProperties, compilerOptions0.checkShadowVars);
      Node node0 = Node.newString(13, "");
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(15);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      Node node1 = new Node(17, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("za");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(18);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      double double0 = typeCheck0.getTypedPercent();
      assertTrue(compiler0.hasErrors());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      Node node1 = Node.newString(23, ">3b*7", 2, 49);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.parseSyntheticCode("#G", "?1}");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkUndefinedProperties, compilerOptions0.checkShadowVars);
      Node node0 = new Node(24, 24, 19);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      Node node1 = new Node(25, node0, node0, 0, 12);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(26);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(28);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkGlobalThisLevel, compilerOptions0.checkGlobalNamesLevel);
      Node node0 = new Node(30);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(32);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      Node node1 = new Node(33, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK [sourcename: java.lang.String@0000000960] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      Node node1 = new Node(34, 23, 48);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportUnknownTypes, compilerOptions0.checkFunctions);
      node0.setType(36);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.checkShadowVars);
      Node node1 = Node.newNumber((double) 37);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.brokenClosureRequiresLevel, compilerOptions0.checkShadowVars);
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.checkUnreachableCode);
      Node node1 = new Node(44, 50, 30);
      typeCheck0.visit(nodeTraversal0, node1, node0);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkShadowVars, compilerOptions0.checkUnreachableCode);
      Node node1 = new Node(48, node0, node0, 4, 38);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(49);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportUnknownTypes, compilerOptions0.reportMissingOverride);
      Node node1 = new Node(50, node0, node0);
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(2, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(79);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(3, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_JIQG_EjB?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(82);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportUnknownTypes, compilerOptions0.reportMissingOverride);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(93);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(95);
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeCheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(100);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(108);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(33, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(114);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(122);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("l>_;IQG_Ejl?uE |y~");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(128);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(3, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType((-1191));
      // Undeclared exception!
      try { 
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1191
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("#G", "#G");
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      jSSourceFileArray0[2] = jSSourceFile0;
      jSSourceFileArray0[3] = jSSourceFile0;
      jSSourceFileArray0[4] = jSSourceFile0;
      jSSourceFileArray0[5] = jSSourceFile0;
      jSSourceFileArray0[6] = jSSourceFileArray0[5];
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportMissingOverride, compilerOptions0.checkProvides);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      Node node1 = Node.newString(118, "Illegal annotation on {0}. @implicitCast may only be used in externs.");
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      Node node0 = compiler0.parseTestCode("za");
      node0.addSuppression("za");
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      node0.setType(18);
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.parseSyntheticCode("#G", "#G");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.reportUnknownTypes, compilerOptions0.checkProvides);
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01);
  }
}
