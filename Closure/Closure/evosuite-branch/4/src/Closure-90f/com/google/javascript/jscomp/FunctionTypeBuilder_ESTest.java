/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 10:17:25 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("q0EJ)B`Z:BKa4J0Z", compiler0, node0, "Named type with empty name component", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(0, 1634, 1634);
      FunctionTypeBuilder functionTypeBuilder0 = null;
      try {
        functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, (String) null, (Scope) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("@this type of a function must be an object\nActual type: {0}", compiler0, node0, "@this type of a function must be an object\nActual type: {0}", scope0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("e");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "e", (Scope) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      Stack<JSType> stack0 = new Stack<JSType>();
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) recordType0, (List<JSType>) stack0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
      FunctionType functionType1 = functionTypeBuilder0.buildAndRegister();
      assertFalse(functionType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", compiler0, node0, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", scope0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) functionType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", compiler0, node0, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", scope0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) functionType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], node1);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType1, node1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", compiler0, node0, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", scope0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort((Node) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", compiler0, node0, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", scope0);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", sourceFile_Generator0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
      MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.mozilla.rhino.WrappedException", "SaH5(03");
      JSSourceFile jSSourceFile1 = JSSourceFile.fromFile((File) mockFile0);
      jSSourceFileArray0[4] = jSSourceFile1;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(jSSourceFileArray0[4], jSSourceFile0, compilerOptions0);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", compiler0, node0, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", (Scope) null);
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", sourceFile_Generator0);
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
      jSSourceFileArray0[0] = jSSourceFile0;
      jSSourceFileArray0[1] = jSSourceFile0;
      jSSourceFileArray0[2] = jSSourceFile0;
      jSSourceFileArray0[3] = jSSourceFile0;
      jSSourceFileArray0[4] = jSSourceFileArray0[3];
      jSSourceFileArray0[5] = jSSourceFileArray0[3];
      jSSourceFileArray0[6] = jSSourceFile0;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(jSSourceFile0, jSSourceFileArray0, compilerOptions0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", compiler0, node0, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", scope0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      JSType[] jSTypeArray0 = new JSType[6];
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, jSTypeArray0[5]);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("e");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "e", (Scope) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, recordType0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, recordType0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("@this type of a function must be an object\nActual type: {0}", compiler0, node0, "@this type of a function must be an object\nActual type: {0}", scope0);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("e");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "e", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferThisType(jSDocInfo0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("e");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "e", (Scope) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      Stack<JSType> stack0 = new Stack<JSType>();
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) recordType0, (List<JSType>) stack0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("com.google.javascript.jscomp.ConcreteType$ConcreteAll", compiler0, node0, "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", scope0);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 1 [sourcename: java.lang.String@0000000555] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("q0EJ)B`Z:BKa4J0Z");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "q0EJ)B`Z:BKa4J0Z", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("e");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("e", compiler0, node0, "e", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR");
      Scope scope0 = new Scope(node0, (ObjectType) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", compiler0, node0, "temp", scope0);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
  }
}
