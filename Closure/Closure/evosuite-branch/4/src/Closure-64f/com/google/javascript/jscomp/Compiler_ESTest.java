/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 09:16:20 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableListMultimap;
import com.google.common.collect.Multimap;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CompilerPass;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.CustomPassExecutionTime;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OptimizeCalls;
import com.google.javascript.jscomp.OptimizeParameters;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.PropertyRenamingPolicy;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.jscomp.VariableReferenceCheck;
import com.google.javascript.rhino.Node;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 59);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.removeTryCatchFinally();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Callable<OptimizeParameters> callable0 = (Callable<OptimizeParameters>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      OptimizeParameters optimizeParameters0 = Compiler.runCallable(callable0, false, true);
      assertNull(optimizeParameters0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";CBMhE03");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      // Undeclared exception!
      try { 
        compiler0.toSource(compiler_CodeBuilder0, 2, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("V\"8L($>");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      JSModule[] jSModuleArray0 = new JSModule[1];
      // Undeclared exception!
      try { 
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.resetUniqueNameId();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("JSCompiler_alias_TRUE", "JSCompiler_alias_TRUE");
      vector0.add(jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.replaceIncrementalSourceAst(jsAst0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Level level0 = Level.ALL;
      Compiler.setLoggingLevel(level0);
      assertEquals("ALL", level0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getCssRenamingMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      boolean boolean0 = compiler0.hasRegExpGlobalReferences();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("JSCompiler_alias_TRUE", "JSCompiler_alias_TRUE");
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler0.setState(compiler_IntermediateState0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.checkTypes);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      assertNull(compilerOptions0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.disableThreads();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.Compiler$CodeBuilder");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      boolean boolean0 = compiler0.precheck();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.computeCFG();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      VariableMap variableMap0 = compiler0.getPropertyMap();
      assertNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ScopeCreator scopeCreator0 = compiler0.getTypedScopeCreator();
      assertNull(scopeCreator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("JSCompiler_alias_TRUE", "JSCompiler_alias_TRUE");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
      PropertyRenamingPolicy propertyRenamingPolicy0 = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
      compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, propertyRenamingPolicy0);
      boolean boolean0 = compiler0.isInliningForbidden();
      assertTrue(boolean0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(1, compiler0.getErrorCount());
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        RuntimeTypeCheck.getBoilerplateCode(compiler0, "1YdHm.Qt-HSufL?jGo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Object object0 = Compiler.runCallableWithLargeStack(callable0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getWarningCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Rr7M_o>iBr6A4'", "Rr7M_o>iBr6A4'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      VariableMap variableMap0 = compiler0.getVariableMap();
      assertNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
      assertNull(functionInformationMap0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.recordFunctionInformation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-1277), 3045, (-465));
      // Undeclared exception!
      try { 
        compiler0.toSource(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1277
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
      assertNull(jSModuleGraph0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V)l|\"<jFjinu");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      SourceMap sourceMap0 = compiler0.getSourceMap();
      assertNull(sourceMap0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Strip code", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      // Undeclared exception!
      try { 
        compiler0.isTypeCheckingEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.getRoot();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      List<CompilerInput> list0 = compiler0.getInputsForTesting();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("V\"8L($>");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.setHasRegExpGlobalReferences(false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("Exp", sourceFile_Generator0);
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFile0, (JSModule[]) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getMessages();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("V\"8L($>");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      List<CompilerInput> list0 = compiler0.getExternsForTesting();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
      assertNull(referenceCollectingCallback_ReferenceMap0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      String string0 = compiler_CodeBuilder0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getLineIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      assertEquals("", compiler_CodeBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      assertNotNull(compilerOptions0);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      compilerOptions0.checkGlobalThisLevel = checkLevel0;
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compilerOptions0.checkSymbols = true;
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      assertFalse(compiler0.hasErrors());
      assertFalse(compilerOptions0.checkTypes);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("JSCompiler_alias_TRUE", "JSCompiler_alias_TRUE");
      vector0.add(jSSourceFile0);
      vector0.add(jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      compiler0.parse();
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      // Undeclared exception!
      try { 
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Callable<JSModule> callable0 = (Callable<JSModule>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      JSModule jSModule0 = Compiler.runCallable(callable0, false, false);
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Compiler.runCallable((Callable<OptimizeCalls>) null, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PassConfig passConfig0 = compiler0.createPassConfigInternal();
      compiler0.setPassConfig(passConfig0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PassConfig passConfig0 = compiler0.getPassConfig();
      // Undeclared exception!
      try { 
        compiler0.setPassConfig(passConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      compiler0.parse();
      compiler0.optimize();
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "} pTK hc$1%v`{G", "} pTK hc$1%v`{G");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      // Undeclared exception!
      try { 
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      CustomPassExecutionTime customPassExecutionTime0 = CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP;
      VariableReferenceCheck variableReferenceCheck0 = new VariableReferenceCheck(compiler0, compilerOptions0.checkRequires);
      ImmutableListMultimap<CustomPassExecutionTime, CompilerPass> immutableListMultimap0 = ImmutableListMultimap.of(customPassExecutionTime0, (CompilerPass) variableReferenceCheck0, customPassExecutionTime0, (CompilerPass) variableReferenceCheck0, customPassExecutionTime0, (CompilerPass) variableReferenceCheck0);
      compilerOptions0.customPasses = (Multimap<CustomPassExecutionTime, CompilerPass>) immutableListMultimap0;
      // Undeclared exception!
      try { 
        compiler0.check();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // One-time passes cannot be run multiple times: checkVars
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "required entry point \"{0}\" never provided", "required entry point \"{0}\" never provided");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      compiler0.startPass("`2o/c,_(@^*8,q}3TW");
      // Undeclared exception!
      try { 
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V)l|\"<jFjinu");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.reportCodeChange();
      LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
      // Undeclared exception!
      try { 
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "required entry point \"{0}\" never provided", "required entry point \"{0}\" never provided");
      compiler0.areNodesEqualForInlining(node0, node0);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      compiler0.removeInput((String) null);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(" [testcode] ");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
      LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compileModules(vector0, linkedList0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.newExternInput("bEPJA)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      MockFile mockFile0 = new MockFile("JSCompiler_alias_TRUE");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      vector0.add(jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      // Undeclared exception!
      try { 
        compiler0.addIncrementalSourceAst(jsAst0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Duplicate input of name JSCompiler_alias_TRUE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("JSCompiler_alias_TRUE");
      vector0.add(jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      assertEquals(1, compiler0.getErrorCount());
      
      JsAst jsAst0 = new JsAst(jSSourceFile0);
      boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
      assertEquals(2, compiler0.getErrorCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("JSCompiler_alias_TRUE", "JSCompiler_alias_TRUE");
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      assertFalse(compiler0.hasErrors());
      assertNotNull(reverseAbstractInterpreter0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      compiler0.getTypeValidator();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      compiler0.parse();
      Node node0 = compiler0.parseInputs();
      assertNotNull(node0);
      assertEquals(125, node0.getType());
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertTrue(node0.isSyntheticBlock());
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      MockFile mockFile0 = new MockFile("JSCompiler_alias_TRUE");
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      vector0.add(jSSourceFile0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      compiler0.parseInputs();
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "} pTK hc$1%v`{G", "Renamed ");
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
      Node node0 = compiler0.parseInputs();
      assertEquals(3, compiler0.getErrorCount());
      assertNull(node0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.jscomp.mozilla.rhino.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("bEPJA)");
      boolean boolean0 = compiler_CodeBuilder1.endsWith("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.append("com.google.javascript.jscomp.Compiler$7");
      boolean boolean0 = compiler_CodeBuilder0.endsWith("bEPJA)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("9G[$");
      arrayList0.add(jSSourceFile0);
      CompilerOptions compilerOptions0 = compiler0.options;
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      compiler0.parse();
      compiler0.optimize();
      assertEquals(2, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      boolean boolean0 = compiler0.isInliningForbidden();
      assertFalse(compiler0.hasErrors());
      assertFalse(boolean0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      compilerOptions0.setCodingConvention(defaultCodingConvention0);
      compiler0.init((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
      compiler0.parse();
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      boolean boolean0 = compiler0.acceptEcmaScript5();
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      String[] stringArray0 = new String[4];
      JSError jSError0 = JSError.make("HF}", 0, 13, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
      compiler0.report(jSError0);
      assertEquals(13, jSError0.getCharno());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.throwInternalError((String) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "} pTK hc$1%v`{G", "Renamed ");
      Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        compiler0.compileModules(stack0, (List<JSModule>) null, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Region region0 = compiler0.getSourceRegion("", (-2009));
      assertNull(region0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "required entry point \"{0}\" never provided", "required entry point \"{0}\" never provided");
      compiler0.getSourceRegion("com.google.javascript.jscomp.Compiler$9", 16);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSModule jSModule0 = new JSModule("4!g)NP4w|Q]");
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Root module has no inputs
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = compiler0.getAstDotGraph();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PriorityQueue<JSSourceFile> priorityQueue0 = new PriorityQueue<JSSourceFile>();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>(priorityQueue0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.compile((List<JSSourceFile>) vector0, (List<JSSourceFile>) vector0, compilerOptions0);
      compiler0.getErrorManager();
      assertFalse(compiler0.hasErrors());
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ErrorManager errorManager0 = compiler0.getErrorManager();
      assertNotNull(errorManager0);
      assertFalse(compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "required entry point \"{0}\" never provided", "required entry point \"{0}\" never provided");
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      // Undeclared exception!
      try { 
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("Z(EU}4j", 0, 2);
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      // Undeclared exception!
      try { 
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
