/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 05:51:01 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "Np#6tTj[@gRzu6x~d", false);
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module$.sooow.jaascrip.jnwomp.DBfaultPssConfi$9");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module$.sooow.jaascrip.jnwomp.DBfaultPssConfi$9", "./");
      Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, "module.exports", "module$.sooow.jaascrip.jnwomp.DBfaultPssConfi$9");
      node0.addChildToBack(node1);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT):  [synthetic:1] :1:0
         // module.exports
         //   Parent: NULL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.VariableVisibilityAnalysis");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "!m+a$:x/9/", true);
      String string0 = processCommonJSModules0.guessCJSModuleName("!m+a$:x/9/");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("./", "./");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName(".sooow.jaascrip.jnwomp.DBfaultPssConfi$9", ".sooow.jaascrip.jnwomp.DBfaultPssConfi$9");
      assertEquals("module$.sooow.jaascrip.jnwomp.DBfaultPssConfi$9", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName("../)yL${ ru3@\"NZm!;2Y", "xx~|/@GU~@</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 3: xx~|/@GU~@</
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "");
      Node node0 = Node.newString(37, "provide", 50, 32);
      processCommonJSModules0.process(node0, node0);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "Np#6tTj[@gRzu6x~d", false);
      SyntheticAst syntheticAst0 = new SyntheticAst("module$module$Np#6tTj[@gRzu6x~d");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module$com.gogle.common.collect.Itrators");
      Normalize.parseAndNormalizeTestCode(compiler0, "module$com.gogle.common.collect.Itrators", "./");
      Node node0 = compiler0.parseSyntheticCode("exports");
      processCommonJSModules0.process(node0, node0);
      assertEquals(54, Node.LAST_PROP);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module$com.gogle.common.collect.Itrators");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module$com.gogle.common.collect.Itrators", "./");
      processCommonJSModules0.process(node0, node0);
      node0.setSourceFileForTesting("com.gogle.common.collect.Itrators");
      processCommonJSModules0.process(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }
}
