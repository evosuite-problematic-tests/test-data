/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 09:05:34 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.AnalyzeNameReferences;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodeRemoval;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CoalesceVariableNames;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DeadAssignmentsElimination;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LineNumberCheck;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MarkNoSideEffectCalls;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.MessageFormatter;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.OperaCompoundAssignFix;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.jscomp.VariableShadowDeclarationCheck;
import com.google.javascript.jscomp.VerboseMessageFormatter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.protobuf.ByteString;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.SQLNonTransientConnectionException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Deque;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.MissingResourceException;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.function.Supplier;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("const");
      Logger logger1 = logger0.getParent();
      lightweightMessageFormatter0.setColorize(false);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger1);
      Logger.getLogger("At least one module must be provided");
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.disableThreads();
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      loggerErrorManager0.setTypedPercent(2.147483647E9);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initModules(vector0, arrayList0, compilerOptions0);
      compiler0.getMessages();
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("R@[+JFr");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      compiler0.getState();
      DiagnosticType diagnosticType0 = CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R@[+JFr";
      stringArray0[1] = "JSC_SUSPICIOUS_SEMICOLON";
      compiler0.parseSyntheticCode("R@[+JFr", "JSC_SUSPICIOUS_SEMICOLON");
      JSError jSError0 = JSError.make("R@[+JFr", 0, 1033, diagnosticType0, stringArray0);
      loggerErrorManager0.println(checkLevel0, jSError0);
      compiler0.getState();
      compiler0.getState();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = new Compiler.CodeBuilder();
      compiler_CodeBuilder1.getColumnIndex();
      Compiler.CodeBuilder compiler_CodeBuilder2 = compiler_CodeBuilder1.append("'{5G)[n");
      assertFalse(compiler_CodeBuilder2.equals((Object)compiler_CodeBuilder0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Lo0urce");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) compiler0;
      objectArray0[1] = (Object) "Lo0urce";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "Lo0urce";
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, true, false);
      objectArray0[4] = null;
      objectArray0[5] = (Object) compiler0;
      objectArray0[6] = (Object) "Lo0urce";
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = " [testcode] ";
      stringArray0[1] = "com.google.javascript.jscomp.mozilla.rhino.FunctionObject";
      stringArray0[2] = "Lo0urce";
      stringArray0[3] = "Lo0urce";
      stringArray0[4] = "prepareAst";
      stringArray0[5] = "Lo0urce";
      stringArray0[6] = " [testcode] ";
      stringArray0[7] = " [testcode] ";
      stringArray0[8] = "Lo0urce";
      JSError jSError0 = JSError.make(" [testcode] ", 0, 1824, checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
      lightweightMessageFormatter0.formatError(jSError0);
      objectArray0[7] = (Object) "Lo0urce";
      PrintStream printStream0 = mockPrintStream0.format("Lo0urce", objectArray0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, printStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
      try { 
        compiler1.parseInputs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("k/aOpQ6CtZ");
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.compile(jSSourceFile0, jSSourceFile0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder0.getColumnIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("runCustomPasses");
      compiler_CodeBuilder1.getLength();
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      // Undeclared exception!
      try { 
        Logger.getAnonymousLogger("");
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find  bundle
         //
         verifyException("java.util.logging.Logger", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      compiler_CodeBuilder0.reset();
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
      TypeCheck typeCheck0 = null;
      try {
        typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("");
      compiler_CodeBuilder0.endsWith("");
      compiler_CodeBuilder0.getLength();
      compiler_CodeBuilder0.endsWith("");
      compiler_CodeBuilder1.getLength();
      String string0 = "[singleton]";
      compiler_CodeBuilder1.endsWith("[singleton]");
      compiler_CodeBuilder1.toString();
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getSourceLine("~jmdUF,<S:uWJ%", 0);
      OperaCompoundAssignFix operaCompoundAssignFix0 = new OperaCompoundAssignFix(compiler0);
      Compiler compiler1 = null;
      try {
        compiler1 = new Compiler((ErrorManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the error manager cannot be null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Callable<ConstCheck> callable0 = (Callable<ConstCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallableWithLargeStack(callable0);
      Compiler compiler0 = new Compiler();
      TypedScopeCreator typedScopeCreator0 = null;
      try {
        typedScopeCreator0 = new TypedScopeCreator(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getUniqueNameIdSupplier();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(0, (-1), (-3510));
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.tryFoldFor(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.buildKnownSymbolTable();
      VariableMap variableMap0 = compiler0.getPropertyMap();
      assertNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Callable<ReferenceCollectingCallback> callable0 = (Callable<ReferenceCollectingCallback>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, true);
      Compiler compiler0 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      MemoizedScopeCreator memoizedScopeCreator0 = compiler1.getTypedScopeCreator();
      assertNull(memoizedScopeCreator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Callable<VariableShadowDeclarationCheck> callable0 = (Callable<VariableShadowDeclarationCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, false);
      Compiler compiler0 = new Compiler();
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, syntacticScopeCreator0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler1.process(optimizeArgumentsArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.toSourceArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "Duplicate input: {0}";
      int int0 = (-1547);
      compiler0.getSourceRegion("Duplicate input: {0}", (-1547));
      // Undeclared exception!
      try { 
        compiler0.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.getWarnings();
      compiler0.addToDebugLog("$self");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#*TJk_2+.Dq");
      MockFile.createTempFile("6 0o?vDDO", "6 0o?vDDO");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      mockPrintStream0.write(byteArray0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Scope scope0 = compiler0.getTopScope();
      assertNull(scope0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.reportCodeChange();
      compiler0.getPropertyMap();
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
      codeChangeHandler_RecentChange0.reset();
      codeChangeHandler_RecentChange0.reportChange();
      codeChangeHandler_RecentChange0.reportChange();
      compiler0.addChangeHandler(codeChangeHandler_RecentChange0);
      String string0 = "com.google.javascript.jscomp.Compiler";
      // Undeclared exception!
      try { 
        CompilerOptions.LanguageMode.valueOf("com.google.javascript.jscomp.Compiler");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.javascript.jscomp.CompilerOptions.LanguageMode.com.google.javascript.jscomp.Compiler
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler.setLoggingLevel((Level) null);
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
      JSSourceFile[] jSSourceFileArray1 = new JSSourceFile[5];
      String string0 = "y!)+LY>F=rLi";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("y!)+LY>F=rLi", "y!)+LY>F=rLi");
      jSSourceFileArray1[0] = jSSourceFile0;
      String string1 = "?1<I|%OMaACZKS@";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      loggerErrorManager0.generateReport();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.acceptConstKeyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try { 
        compiler0.getWarnings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.rhino.jstype.PrototypeObjectType$Property");
      PrintStream printStream0 = mockPrintStream0.append('S');
      Compiler compiler0 = new Compiler(printStream0);
      Vector<JSSourceFile> vector0 = new Vector<JSSourceFile>();
      ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.compileModules(vector0, arrayList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("toSourceArray", "toSourceArray");
      jSSourceFileArray0[0] = jSSourceFile0;
      JSSourceFile jSSourceFile1 = JSSourceFile.fromCode("toSourceArray", "");
      jSSourceFileArray0[1] = jSSourceFile1;
      JSSourceFile jSSourceFile2 = JSSourceFile.fromFile("Bad module input: ");
      jSSourceFileArray0[2] = jSSourceFile2;
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.removeTryCatchFinally();
      compiler0.resetUniqueNameId();
      compiler0.getTypeRegistry();
      String string0 = "h>>r&(1";
      compiler0.startPass(string0);
      compiler0.endPass();
      JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
      jSModuleGraph0.coalesceDuplicateFiles();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference(node0, node0);
      JSModule jSModule0 = nameReferenceGraph_Reference0.getModule();
      compiler0.getPropertyMap();
      JSModule jSModule1 = jSModuleGraph0.getDeepestCommonDependency(jSModule0, jSModule0);
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      compiler1.ensureDefaultPassConfig();
      jSModule1.sortInputsByDeps(compiler1);
      Level level0 = Level.FINER;
      logger0.logp(level0, string0, string0, string0);
      compiler0.toSource(jSModule1);
      compiler0.rebuildInputsFromModules();
      compiler0.getWarnings();
      compiler1.getWarnings();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler1.getState();
      compiler0.setState(compiler_IntermediateState0);
      CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.CHECK;
      compilerOptions_TweakProcessing0.shouldStrip();
      String string1 = "K&";
      Tracer tracer0 = compiler0.newTracer(string1);
      String string2 = "";
      compiler1.stopTracer(tracer0, string2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      // Undeclared exception!
      try { 
        defaultPassConfig0.makeTypeCheck(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString.Output byteString_Output0 = ByteString.newOutput();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteString_Output0);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '4';
      charArray0[2] = '~';
      charArray0[3] = 'c';
      mockPrintStream0.append((CharSequence) null);
      charArray0[4] = 'B';
      charArray0[5] = 'L';
      charArray0[6] = 'i';
      mockPrintStream0.println(charArray0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      compiler0.precheck();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        mockPrintStream0.write(byteArray0, (int) (byte)122, (int) (byte)122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Logger logger0 = Logger.getLogger("x|C~1");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.setTypedPercent(0.0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      logger0.finer(supplier0);
      compiler0.getExternsForTesting();
      compiler0.getFunctionalInformationMap();
      compiler0.getInputsForTesting();
      Callable<PeepholeOptimizationsPass> callable0 = (Callable<PeepholeOptimizationsPass>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, true, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 101;
      intArray0[1] = 1;
      intArray0[2] = 101;
      intArray0[3] = 1;
      intArray0[4] = 101;
      intArray0[5] = 101;
      intArray0[6] = 1;
      intArray0[7] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.google.common.collect.Multimaps$CustomMultimap", intArray0);
      // Undeclared exception!
      try { 
        compiler0.throwInternalError("ea#H>wXE=xBd", batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      Compiler compiler1 = new Compiler();
      Node node0 = compiler1.parseSyntheticCode("/;[)ILcR-sx8Q", "");
      checkAccidentalSemicolon0.visit(nodeTraversal0, node0, node0);
      compiler0.getTypedScopeCreator();
      NodeTraversal nodeTraversal1 = new NodeTraversal(compiler0, checkAccidentalSemicolon0, (ScopeCreator) null);
      Compiler compiler2 = nodeTraversal1.getCompiler();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node1 = compiler2.externsRoot;
      // Undeclared exception!
      try { 
        peepholeSubstituteAlternateSyntax0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("R@[+JFr");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      Compiler.IntermediateState compiler_IntermediateState0 = compiler1.getState();
      compiler0.setState(compiler_IntermediateState0);
      DiagnosticType diagnosticType0 = CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R@[+JFr";
      stringArray0[1] = "JSC_SUSPICIOUS_SEMICOLON";
      compiler1.parseSyntheticCode("R@[+JFr", "JSC_SUSPICIOUS_SEMICOLON");
      JSError jSError0 = JSError.make("R@[+JFr", 0, 1033, diagnosticType0, stringArray0);
      lightweightMessageFormatter0.formatError(jSError0);
      loggerErrorManager0.println(checkLevel0, jSError0);
      Compiler.IntermediateState compiler_IntermediateState1 = compiler1.getState();
      compiler0.setState(compiler_IntermediateState1);
      compiler0.getTopScope();
      compiler0.getFunctionalInformationMap();
      compiler0.resetUniqueNameId();
      compiler1.getState();
      // Undeclared exception!
      try { 
        compiler0.getInputsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler1, true);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, coalesceVariableNames0, (ScopeCreator) null);
      Compiler compiler2 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler2.languageMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Callable<CheckAccessControls> callable0 = (Callable<CheckAccessControls>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, true);
      Compiler compiler0 = new Compiler();
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0);
      MockFile mockFile0 = new MockFile("`4eS2Hjsw|9LV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      peepholeSubstituteAlternateSyntax0.isEcmaScript5OrGreater();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "[hQM#xq]\r", "6x3T8#=");
      Node node1 = peepholeSubstituteAlternateSyntax0.getExceptionHandler(node0);
      compiler1.toSource(node1);
      compiler1.getWarnings();
      compiler0.getMessages();
      compiler1.toSource(node1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler1.getExternsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler((PrintStream) null);
      compiler0.computeCFG();
      TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Vector<JSType> vector0 = new Vector<JSType>();
      JSType jSType0 = null;
      vector0.add(jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      int int0 = (-466);
      node0.setSideEffectFlags(int0);
      compiler0.updateGlobalVarReferences(treeMap0, node0);
      compiler0.toSourceArray();
      compiler0.getSourceMap();
      compiler0.getFunctionalInformationMap();
      compiler0.getTypeRegistry();
      String string0 = " z*p;BFcr6";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromInputStream(string0, (InputStream) sequenceInputStream0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0, boolean0);
      PrintStream printStream1 = mockPrintStream0.append((CharSequence) string0);
      Compiler compiler1 = new Compiler(printStream1);
      CompilerOptions compilerOptions0 = compiler1.getOptions();
      SourceFile.fromFile(compilerOptions0.aliasStringsBlacklist);
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      compiler1.setState(compiler_IntermediateState0);
      compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
      compiler0.addToDebugLog(compilerOptions0.nameReferenceReportPath);
      compiler1.setCssRenamingMap(compilerOptions0.cssRenamingMap);
      compiler1.stripCode(compilerOptions0.stripTypePrefixes, compilerOptions0.stripTypePrefixes, compilerOptions0.stripTypes, compilerOptions0.stripNameSuffixes);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("kyMls4");
      compiler_CodeBuilder0.endsWith("");
      File file0 = MockFile.createTempFile("kyMls4", "kyMls4");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "kyMls4";
      objectArray0[1] = (Object) compiler_CodeBuilder1;
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintStream0.printf("D&9?Ue~2=ii", objectArray0);
      PrintStream printStream0 = mockPrintStream0.append('I');
      Compiler compiler0 = new Compiler(printStream0);
      CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
      compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.normalize();
      String string0 = "com.google.javascript.jscomp.Compiler$2";
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      compiler0.defaultCodingConvention = (CodingConvention) defaultCodingConvention0;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      String string1 = null;
      Node node0 = compiler0.parseSyntheticCode(string0, string1);
      Node node1 = null;
      node0.removeChild(node1);
      Node node2 = peepholeRemoveDeadCode0.tryFoldFor(node0);
      defaultCodingConvention0.isOptionalParameter(node2);
      int int0 = 0;
      compiler0.getWarnings();
      compiler0.startPass(string0);
      String string2 = compiler0.getSourceLine(string0, int0);
      compiler0.parse();
      defaultCodingConvention0.getAssertionFunctions();
      compiler0.getTopScope();
      compiler0.acceptEcmaScript5();
      compiler0.getTopScope();
      compiler0.getExternsInOrder();
      Level level0 = Level.FINE;
      Compiler.setLoggingLevel(level0);
      CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
      compilerOptions_TracerMode0.isOn();
      compiler0.newTracer(string0);
      compiler0.processDefines();
      int int1 = (-4059);
      compiler0.getSourceLine(string2, int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      compiler1.getModuleGraph();
      LineNumberCheck lineNumberCheck0 = new LineNumberCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, lineNumberCheck0);
      // Undeclared exception!
      try { 
        nodeTraversal0.getModule();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      RenameLabels.DefaultNameSupplier renameLabels_DefaultNameSupplier0 = new RenameLabels.DefaultNameSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(renameLabels_DefaultNameSupplier0);
      RenameLabels renameLabels0 = new RenameLabels(compiler0, functionToBlockMutator_LabelNameSupplier0, false);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      nodeTraversal0.traverseRoots((List<Node>) arrayList0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      compiler1.getVariableMap();
      String string0 = "";
      Tracer tracer0 = new Tracer("<1IpP<", "");
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
      Node node0 = Node.newString(173, "<1IpP<");
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "com.google.javascript.jscomp.SanityCheck";
      stringArray0[2] = "side_effect_flags";
      stringArray0[3] = "";
      stringArray0[4] = "<1IpP<";
      stringArray0[5] = "<1IpP<";
      stringArray0[6] = "<1IpP<";
      stringArray0[7] = "";
      stringArray0[8] = "<1IpP<";
      JSError jSError0 = nodeTraversal0.makeError(node1, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
      lightweightMessageFormatter0.formatWarning(jSError0);
      // Undeclared exception!
      try { 
        compiler0.stopTracer(tracer0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.hasRegExpGlobalReferences();
      // Undeclared exception!
      try { 
        compiler0.getExternsInOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(":?g1");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(":?g1", objectArray0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((MessageFormatter) null, printStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      // Undeclared exception!
      try { 
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DefaultPassConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.endPass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tracer should not be null at the end of a pass.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      OperaCompoundAssignFix operaCompoundAssignFix0 = new OperaCompoundAssignFix(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, operaCompoundAssignFix0);
      // Undeclared exception!
      try { 
        compiler0.getSourceLine("size must be non-negative", 1148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getDefaultErrorReporter();
      PassConfig passConfig0 = compiler0.createPassConfigInternal();
      compiler0.setPassConfig(passConfig0);
      CompilerOptions.TracerMode.values();
      compiler0.getUniqueNameIdSupplier();
      JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[9];
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      Callable<MarkNoSideEffectCalls> callable0 = (Callable<MarkNoSideEffectCalls>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, false);
      compiler0.getReverseAbstractInterpreter();
      compiler0.initCompilerOptionsIfTesting();
      compiler0.setHasRegExpGlobalReferences(false);
      compiler0.buildKnownSymbolTable();
      Callable<ClosureCodeRemoval> callable1 = (Callable<ClosureCodeRemoval>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      Compiler.runCallable(callable1, false, false);
      compiler0.getResult();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      compiler0.getFunctionalInformationMap();
      // Undeclared exception!
      try { 
        compiler0.hasErrors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedInputStream0;
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Compiler.runCallable(callable0, false, false);
      objectArray0[1] = null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) pipedInputStream0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      Compiler compiler0 = new Compiler(printStream0);
      compiler0.getErrorManager();
      LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
      Stack<JSModule> stack0 = new Stack<JSModule>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.replaceStringsPlaceholderToken = null;
      mockPrintStream0.flush();
      compiler0.compileModules(linkedList0, stack0, compilerOptions0);
      compiler0.getErrorCount();
      compiler0.getResult();
      assertEquals(71, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(125);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.createPassConfigInternal();
      byteArrayOutputStream0.write(1265);
      compiler0.getDefaultErrorReporter();
      // Undeclared exception!
      try { 
        compiler0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      JSError jSError0 = JSError.make("JSC_OPTIMIZE_LOOP_ERROR", (-36), (-36), compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
      // Undeclared exception!
      try { 
        compiler0.report(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("inlineFunctions");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      SourceMap sourceMap0 = compiler0.getSourceMap();
      assertNull(sourceMap0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VerboseMessageFormatter verboseMessageFormatter0 = new VerboseMessageFormatter((SourceExcerptProvider) null);
      verboseMessageFormatter0.setColorize(true);
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(verboseMessageFormatter0, logger0);
      loggerErrorManager0.getErrors();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      String string0 = "";
      compiler0.addToDebugLog("");
      compiler0.getMessages();
      String string1 = "";
      int int0 = 1875;
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      loggerErrorManager0.generateReport();
      String string2 = "(unknown column)";
      FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
      JSSourceFile[] jSSourceFileArray0 = null;
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.compile((JSSourceFile[]) null, (JSSourceFile[]) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Logger logger0 = Tracer.logger;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((MessageFormatter) null, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getAstDotGraph();
      List<JSSourceFile> list0 = null;
      Stack<JSModule> stack0 = new Stack<JSModule>();
      compiler0.getModuleGraph();
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
      Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler1, referenceCollectingCallback_Behavior0, predicate0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, referenceCollectingCallback0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        nodeTraversal0.getModule();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler1.toSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeSyntheticCode(compiler0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getRoot();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = TypeCheck.CONFLICTING_IMPLEMENTED_TYPE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSC_CONFLICTING_IMPLEMENTED_TYPE";
      stringArray0[1] = "Parsing: ";
      stringArray0[2] = "JSC_CONFLICTING_IMPLEMENTED_TYPE";
      stringArray0[3] = "Parsing: ";
      stringArray0[4] = "JSC_CONFLICTING_IMPLEMENTED_TYPE";
      stringArray0[5] = "Parsing: ";
      stringArray0[6] = "JSC_CONFLICTING_IMPLEMENTED_TYPE";
      stringArray0[7] = "JSC_CONFLICTING_IMPLEMENTED_TYPE";
      stringArray0[8] = "Parsing: ";
      // Undeclared exception!
      try { 
        JSError.make("Parsing: ", (Node) null, checkLevel0, diagnosticType0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.JSError", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Logger logger0 = Logger.getLogger("");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      DiagnosticType diagnosticType0 = ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSError jSError0 = JSError.make("", 827, 132, diagnosticType0, stringArray0);
      // Undeclared exception!
      try { 
        compiler0.getErrorLevel(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.getOptions();
      // Undeclared exception!
      try { 
        compiler0.compile((JSSourceFile[]) null, (JSModule[]) null, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "h>>r&(1";
      Node node0 = null;
      MockFile mockFile0 = new MockFile("h>>r&(1", "h>>r&(1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
      CompilerOptions compilerOptions0 = compiler0.options;
      // Undeclared exception!
      try { 
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, (CompilerOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      // Undeclared exception!
      try { 
        compiler0.toSource((Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
         verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      MarkNoSideEffectCalls markNoSideEffectCalls0 = new MarkNoSideEffectCalls(compiler0);
      Callable<MarkNoSideEffectCalls> callable0 = (Callable<MarkNoSideEffectCalls>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(markNoSideEffectCalls0).when(callable0).call();
      Compiler.runCallable(callable0, false, false);
      compiler0.getReverseAbstractInterpreter();
      compiler0.initCompilerOptionsIfTesting();
      compiler0.buildKnownSymbolTable();
      ClosureCodeRemoval closureCodeRemoval0 = new ClosureCodeRemoval(compiler0, false, false);
      Callable<ClosureCodeRemoval> callable1 = (Callable<ClosureCodeRemoval>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(closureCodeRemoval0).when(callable1).call();
      compiler0.getTypeValidator();
      compiler0.getCssRenamingMap();
      compiler0.getTypeRegistry();
      Compiler.runCallable(callable1, false, false);
      compiler0.getResult();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Logger logger0 = Logger.getLogger("x|C~1");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.setTypedPercent(0.0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      logger0.finer(supplier0);
      compiler0.getExternsForTesting();
      compiler0.getFunctionalInformationMap();
      compiler0.getInputsForTesting();
      Callable<PeepholeOptimizationsPass> callable0 = (Callable<PeepholeOptimizationsPass>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((PeepholeOptimizationsPass) null).when(callable0).call();
      Compiler.runCallable(callable0, true, true);
      String string0 = "ea#H>wXE=xBd";
      int[] intArray0 = new int[18];
      intArray0[0] = 101;
      intArray0[1] = 1;
      intArray0[2] = 101;
      intArray0[3] = 1;
      intArray0[4] = 101;
      intArray0[5] = 101;
      loggerErrorManager0.getWarnings();
      intArray0[6] = 1;
      intArray0[7] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.google.common.collect.Multimaps$CustomMultimap", intArray0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compiler0.initOptions(compilerOptions0);
      // Undeclared exception!
      try { 
        compiler0.rebuildInputsFromModules();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      boolean boolean0 = compiler_CodeBuilder0.endsWith("DC'Q#|Jm");
      assertFalse(boolean0);
      
      compilerOptions0.markAsCompiled = true;
      compilerOptions0.checkSuspiciousCode = true;
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("");
      int int0 = compiler_CodeBuilder1.getLineIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("R@[+JFr");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.getState();
      DiagnosticType diagnosticType0 = CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      loggerErrorManager0.getWarnings();
      stringArray0[0] = "R@[+JFr";
      stringArray0[1] = "JSC_SUSPICIOUS_SEMICOLON";
      compiler0.parseSyntheticCode("R@[+JFr", "JSC_SUSPICIOUS_SEMICOLON");
      compiler0.getState();
      compiler0.getState();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.javascript.jscomp.MethodCompilerPass$1");
      compiler_CodeBuilder1.getColumnIndex();
      compiler_CodeBuilder0.endsWith("R@[+JFr");
      Compiler.CodeBuilder compiler_CodeBuilder2 = compiler_CodeBuilder1.append("'{5G)[n");
      assertEquals("com.google.javascript.jscomp.MethodCompilerPass$1'{5G)[n", compiler_CodeBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Logger logger0 = Logger.getLogger("x|C~1");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      loggerErrorManager0.printSummary();
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.setTypedPercent(0.0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      logger0.finer(supplier0);
      compiler0.getExternsForTesting();
      compiler0.getFunctionalInformationMap();
      compiler0.getInputsForTesting();
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[7];
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) peepholeSubstituteAlternateSyntax0;
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      abstractPeepholeOptimizationArray0[1] = (AbstractPeepholeOptimization) exploitAssigns0;
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax1 = new PeepholeSubstituteAlternateSyntax(true);
      abstractPeepholeOptimizationArray0[2] = (AbstractPeepholeOptimization) peepholeSubstituteAlternateSyntax1;
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax2 = new PeepholeSubstituteAlternateSyntax(true);
      abstractPeepholeOptimizationArray0[3] = (AbstractPeepholeOptimization) peepholeSubstituteAlternateSyntax2;
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      abstractPeepholeOptimizationArray0[4] = (AbstractPeepholeOptimization) peepholeFoldWithTypes0;
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      abstractPeepholeOptimizationArray0[5] = (AbstractPeepholeOptimization) peepholeFoldConstants0;
      int int0 = compiler0.getWarningCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("R@[+JFr");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      compiler0.getState();
      DiagnosticType diagnosticType0 = CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R@[+JFr";
      stringArray0[1] = "JSC_SUSPICIOUS_SEMICOLON";
      Node node0 = compiler0.parseSyntheticCode("R@[+JFr", "JSC_SUSPICIOUS_SEMICOLON");
      assertEquals("R@[+JFr", node0.getSourceFileName());
      
      JSError jSError0 = JSError.make("R@[+JFr", 0, 1033, diagnosticType0, stringArray0);
      loggerErrorManager0.println(checkLevel0, jSError0);
      compiler0.getState();
      compiler0.getState();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.javascript.jscomp.MethodCompilerPass$1");
      int int0 = compiler_CodeBuilder1.getColumnIndex();
      assertEquals(49, int0);
      
      compiler_CodeBuilder1.append("'{5G)[n");
      CompilerOptions compilerOptions0 = compiler0.options;
      CssRenamingMap cssRenamingMap0 = compilerOptions0.cssRenamingMap;
      compiler0.setCssRenamingMap((CssRenamingMap) null);
      compiler0.newTracer((String) null);
      assertFalse(compiler0.isTypeCheckingEnabled());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9z$+)d");
      // Undeclared exception!
      try { 
        Compiler.runCallable((Callable<DeadAssignmentsElimination>) null, true, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      String string0 = "R@[+JFr";
      Logger logger0 = Logger.getLogger("R@[+JFr");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      compiler0.getState();
      DiagnosticType diagnosticType0 = CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R@[+JFr";
      compiler0.parseSyntheticCode("R@[+JFr", "JSC_SUSPICIOUS_SEMICOLON");
      JSError jSError0 = JSError.make("R@[+JFr", 0, 1033, diagnosticType0, stringArray0);
      loggerErrorManager0.println(checkLevel0, jSError0);
      compiler0.getState();
      compiler0.getState();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.javascript.jscomp.MethodCompilerPass$1");
      compiler_CodeBuilder1.getColumnIndex();
      compiler_CodeBuilder1.append("JSC_SUSPICIOUS_SEMICOLON");
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      // Undeclared exception!
      try { 
        compiler0.setPassConfig(defaultPassConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // this.passes has already been assigned
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("R@[+JFr");
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      compiler0.getState();
      DiagnosticType diagnosticType0 = CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON;
      DiagnosticType.disabled("JSC_SUSPICIOUS_SEMICOLON", "erPass$1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R@[+JFr";
      stringArray0[1] = "JSC_SUSPICIOUS_SEMICOLON";
      Node node0 = compiler0.parseSyntheticCode("R@[+JFr", "JSC_SUSPICIOUS_SEMICOLON");
      assertEquals("R@[+JFr", node0.getSourceFileName());
      
      JSError jSError0 = JSError.make("R@[+JFr", 0, 1033, diagnosticType0, stringArray0);
      loggerErrorManager0.println(checkLevel0, jSError0);
      compiler0.getState();
      compiler0.getState();
      Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
      Compiler.CodeBuilder compiler_CodeBuilder1 = new Compiler.CodeBuilder();
      int int0 = compiler_CodeBuilder1.getColumnIndex();
      assertEquals(0, int0);
      
      compiler_CodeBuilder1.append("'{5G)[n");
      boolean boolean0 = compiler0.isTypeCheckingEnabled();
      assertFalse(boolean0);
      assertFalse(compiler0.hasErrors());
  }
}
