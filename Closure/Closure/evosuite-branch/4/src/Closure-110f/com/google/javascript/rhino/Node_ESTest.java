/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 11:00:17 GMT 2019
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber((double) 450, 450, 450);
      node0.siblings();
      assertEquals(1843650, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      node0.setSourceFileForTesting("");
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      assertEquals((-3021), node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setSourceFileForTesting((String) null);
      node0.addSuppression((String) null);
      node0.setSourceFileForTesting((String) null);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-976), 512, 0);
      node0.getJsDocBuilderForNode();
      assertEquals(2097152, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("lYpL\"IZx]v", (-323), (-323));
      node0.setQuotedString();
      try { 
        node0.setDouble(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING lYpL\"IZx]v [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableEntry");
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newNumber((double) 256, 256, 256);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1135));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals((-1135), node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-467));
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals((-472), node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1135));
      node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1434));
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals((-1438), node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1434));
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals((-1425), node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1434));
      node_SideEffectFlags0.setMutatesThis();
      assertEquals((-1436), node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1434));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertEquals((-1434), node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setVarArgs(true);
      boolean boolean0 = node0.isVarArgs();
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      node0.putBooleanProp(40, true);
      // Undeclared exception!
      try { 
        node0.copyInformationFrom(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber((-1404.6167915853), 30, 30);
      node0.setDouble(407.1166230418826);
      assertEquals(122910, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Z,P [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.getInputId();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      node0.isSyntheticBlock();
      assertEquals(454767, node0.getSourcePosition());
      assertEquals(111, node0.getType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber(2084.061, 0, 0);
      Node node1 = Node.newString(4649, "/s,L&2QQ@Um-UHD2!z", 15, 0);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4649
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(15.79190187, (-1589), (-1589));
      node0.setSourceEncodedPosition((-1589));
      assertEquals(1048575, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(2084.061, 0, 0);
      node0.getChangeTime();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-976), 512, 0);
      node0.setIsSyntheticBlock(false);
      assertEquals(2097152, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1843);
      node0.setType(108);
      boolean boolean0 = node0.isIf();
      assertEquals(108, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newNumber((double) 450, 450, 450);
      boolean boolean0 = node0.isQuotedString();
      assertFalse(boolean0);
      assertEquals(1843650, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableEntry");
      Node node1 = node0.srcrefTree(node0);
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(15.79190187, (-1589), (-1589));
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertEquals(0, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      assertEquals(454767, node0.getSourcePosition());
      assertEquals(111, node0.getType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableEntry");
      node0.getDirectives();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(531, 392, 0);
      int int0 = node0.getSourcePosition();
      assertEquals(1605632, int0);
      assertEquals(531, node0.getType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(618);
      int int0 = node0.getLength();
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, int0);
      assertEquals(618, node0.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber(2084.061, 0, 0);
      node0.setCharno(38);
      assertEquals(38, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(0, "U+A*#E", 1401, (-1045));
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("", (-915), (-915));
      Node node1 = new Node((-92), node0, node0, node0, node0, (-4281), 0);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString(757, "hg(}.l8[TM|1", 757, 40);
      boolean boolean0 = node0.isEquivalentTo(node0);
      assertTrue(boolean0);
      assertEquals(0, node0.getChildCount());
      assertEquals(3100712, node0.getSourcePosition());
      assertEquals(757, node0.getType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      Node node1 = new Node(3299, node0, node0, node0);
      Node node2 = node1.cloneTree();
      assertEquals(3299, node2.getType());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node2.hasOneChild());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber((double) 450, 450, 450);
      node0.setLength(0);
      assertEquals(1843650, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      boolean boolean0 = node0.isLocalResultCall();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      node0.getSourceFileName();
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setLineno(51);
      assertEquals(51, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.toString();
      assertEquals(0, node1.getLineno());
      assertEquals(1839, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("lYpL\"IZx]v", (-323), (-323));
      node0.setVarArgs(true);
      try { 
        node0.setDouble(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING lYpL\"IZx]v [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber(45.991161, 55, 102);
      node0.setOptionalArg(true);
      try { 
        node0.setString("new child has existing sibling");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 45.991161 55 [opt_arg: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(155, "pvJ#iPwdIk6=R/Ii$-E", (-4171), 155);
      node0.setIsSyntheticBlock(true);
      try { 
        node0.setDouble(30);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CAST pvJ#iPwdIk6=R/Ii$-E [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      node0.setWasEmptyNode(true);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1.2 [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      try { 
        node0.setDouble(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  108 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((-1113.9), 152, 152);
      node0.setLength(31);
      try { 
        node0.setString("yVwgM88'VJOQN5");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1113.9 152 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      node0.setChangeTime(108);
      try { 
        node0.setDouble(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  108 [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      node0.putIntProp(3000, (byte)3);
      // Undeclared exception!
      try { 
        node0.setDouble(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 3000
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 57);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      assertNotNull(node_NodeMismatch0);
      assertEquals(39, node1.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((-1447), (String) null, 612, (-1447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString((-4866), "new child has existing parent", (-4866), 54);
      node0.setString("com.google.common.collect.ArrayListMultimap");
      assertEquals((-1), node0.getLineno());
      assertEquals((-4866), node0.getType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(1977, "7t)3w?80");
      node1.isEquivalentTo(node0, false, false, true);
      assertEquals(1977, node1.getType());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-142), 97, (-142));
      Node node1 = new Node((-142), node0, 16, 301);
      Node node2 = null;
      try {
        node2 = new Node(15, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("KVKqs", (-196), (-196));
      Node node1 = new Node(47, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(8, node0, node0, (-1259), (-521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("");
      nodeArray0[0] = node0;
      Node node1 = Node.newString("", 52, 0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber((double) 38, 242, 29);
      nodeArray0[2] = node2;
      Node node3 = new Node(48, nodeArray0);
      Node node4 = null;
      try {
        node4 = new Node(48, node3, node0, 1, 49);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      node0.addChildrenToBack(node0);
      Node node1 = null;
      try {
        node1 = new Node(119, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 0);
      Node node1 = new Node(40, node0, node0, 41, (-343));
      Node node2 = null;
      try {
        node2 = new Node(54, node1, node0, node0, 8, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(1173, "5xEq", 2814, 1017);
      Node node1 = new Node((-2426), node0, 1173, 4095);
      Node node2 = null;
      try {
        node2 = new Node(1048575, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(12, node0);
      Node node2 = null;
      try {
        node2 = new Node(2, node0, node1, node0, node1, 57, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(120, node0, node0, node0, 640, 0);
      Node node2 = null;
      try {
        node2 = new Node(120, node1, node0, node1, node1, 42, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newNumber((-760.397613504), 1039, 940);
      Node node1 = new Node((-4074), node0, node0, node0, node0, 0, 8);
      Node node2 = null;
      try {
        node2 = new Node((-4074), node1, node1, node0, node1, 38, 441);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2159);
      Node node1 = new Node(318, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(2159, node1, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(152, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(0, 311, 311);
      Node[] nodeArray0 = new Node[5];
      Node node1 = new Node(40, node0, node0, node0, node0);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = null;
      try {
        node2 = new Node(51, nodeArray0, 48, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((double) (-2799), 306654252, 33);
      Node node1 = new Node(33, node0, node0, node0);
      nodeArray0[0] = node0;
      Node node2 = null;
      try {
        node2 = new Node((-2799), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0, 450, 450);
      boolean boolean0 = node0.hasChildren();
      assertEquals(1843650, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString(844, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      node0.addChildrenToFront(node0);
      boolean boolean0 = node0.hasChildren();
      assertEquals(1, node0.getChildCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("");
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
      
      nodeArray0[0] = node0;
      Node node1 = Node.newString("", 52, 0);
      nodeArray0[1] = node1;
      Node node2 = Node.newNumber((double) 38, 242, 29);
      assertEquals(991261, node2.getSourcePosition());
      assertEquals(39, node2.getType());
      
      nodeArray0[2] = node2;
      Node node3 = new Node(48, nodeArray0);
      assertEquals(3, node3.getChildCount());
      assertEquals(48, node3.getType());
      
      Node node4 = nodeArray0[1].detachFromParent();
      assertEquals(212992, node4.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = Node.newString("");
      assertTrue(node0.isString());
      
      nodeArray0[0] = node0;
      Node node1 = Node.newString("", 52, 0);
      assertEquals(40, node1.getType());
      assertEquals(212992, node1.getSourcePosition());
      
      nodeArray0[1] = node1;
      Node node2 = new Node((-492), 53, 4067);
      nodeArray0[2] = node2;
      Node node3 = new Node(48, nodeArray0);
      assertEquals(3, node3.getChildCount());
      assertEquals(48, node3.getType());
      
      Node node4 = node2.detachFromParent();
      assertEquals(221155, node4.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      Node node1 = new Node(53, node0, node0, 49, 92);
      // Undeclared exception!
      try { 
        node1.replaceChild(node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(38);
      Node node1 = node0.getChildAtIndex(0);
      assertNull(node1);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString(29, "");
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(152);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      Node node1 = new Node(47, node0, node0, node0, node0);
      int int0 = node1.getIndexOfChild(node1);
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.hasOneChild());
      assertEquals((-1), int0);
      assertEquals(39, node0.getType());
      assertEquals(47, node1.getType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1981, 1981, (-1612));
      Node node1 = new Node(1981, node0, node0, 42, 1);
      int int0 = node1.getIndexOfChild(node0);
      assertEquals(1981, node1.getType());
      assertEquals(0, int0);
      assertEquals(172033, node1.getSourcePosition());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      Node node1 = new Node(0, node0, node0, 29, 2);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-976), 512, 0);
      Node node1 = new Node((-976), node0, node0, node0, (-976), 1);
      node1.addChildToFront(node1);
      assertEquals((-976), node1.getType());
      assertEquals(39, node0.getType());
      assertEquals(2097152, node0.getSourcePosition());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, Integer.MIN_VALUE, (-73));
      Node node1 = new Node(0, node0, node0, (-73), 40);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(5, 1, 1);
      Node node1 = new Node(1, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      Node node1 = Node.newString("");
      node0.addChildrenToFront(node0);
      node0.addChildrenToFront(node1);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber((-1113.9), 2461, (-1111));
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0, 450, 450);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(39, node1, node0, node0);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2832), (-2832), 33);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node0.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      Node node1 = new Node(49, 46, 2);
      node0.addChildToFront(node1);
      node0.addChildrenToBack(node0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber((-1113.9), 152, 152);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.addChildBefore(node1, node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString((-1859), "Number node not created with Node.newNumber");
      Node node1 = new Node((-1368), node0, node0, node0, 57, (-2567));
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString("er", 1, 37);
      Node node2 = new Node(1, node0, node0, 8, (-519));
      node2.replaceChild(node0, node1);
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(42, nodeArray0, 0, 0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      node0.addChildrenToFront(node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(528, "65'i1;iq=L#S", 528, 1925365760);
      Node node1 = new Node(31, node0, (-569), (-1714));
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setWasEmptyNode(true);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString("", (-915), (-915));
      Node node1 = node0.clonePropsFrom(node0);
      assertTrue(node1.isString());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      // Undeclared exception!
      try { 
        node0.getExistingIntProp((-1783));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1783
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$15", 41, 41);
      Node node1 = new Node(39, node0, 43, 16);
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(39, "6N3");
      // Undeclared exception!
      try { 
        node0.setDouble(1.2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(105, 105, 132);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> 105 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.ImmutableEntry");
      String string0 = node0.toString(false, false, true);
      assertEquals("STRING com.google.common.collect.ImmutableEntry", string0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      String string0 = node0.toString(true, false, false);
      assertEquals("STRING Z,P", string0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2799), 306654252, 33);
      Node node1 = new Node(33, node0, node0, node0);
      String string0 = node1.toStringTree();
      assertEquals("GETPROP\n    NUMBER -2799.0 470060\n", string0);
      assertTrue(node1.isGetProp());
      assertEquals(33, node0.getCharno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 53);
      node0.setSourceFileForTesting("");
      String string0 = node0.getSourceFileName();
      assertEquals((-1), node0.getCharno());
      assertNotNull(string0);
      assertEquals((-3021), node0.getType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      node0.setSourceFileForTesting("");
      boolean boolean0 = node0.isFromExterns();
      assertEquals((-3021), node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(155, "pvJ#iPwdIk6=R/Ii$-E", (-4171), 155);
      node0.isFromExterns();
      assertTrue(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(53);
      node0.setSourceFileForTesting("");
      int int0 = node0.getSourceOffset();
      assertEquals(53, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-976), 512, 0);
      node0.getSourceOffset();
      assertEquals(39, node0.getType());
      assertEquals(2097152, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(1952, node0, 155, 15);
      node1.setSourceFileForTesting((String) null);
      int int0 = node1.getSourceOffset();
      assertEquals((-2147483633), int0);
      assertEquals(155, node1.getLineno());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertEquals(1952, node1.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString(5321, "RegExp", 5321, 5321);
      assertEquals(5321, node0.getLineno());
      
      node0.setLineno(0);
      assertEquals(4095, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 7, 122);
      Node node1 = new Node(122, node0, (-3122), 37);
      node1.setSourceEncodedPositionForTree(64);
      assertEquals(0, node0.getLineno());
      assertEquals(64, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[3];
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], (List<JSType>) immutableList0);
      JSType jSType0 = modificationVisitor0.caseFunctionType(functionType1);
      assertFalse(jSType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      node0.children();
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(" [");
      // Undeclared exception!
      try { 
        node0.getAncestor((-3367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      Node node1 = node0.getAncestor(2776);
      assertNull(node1);
      assertEquals(1839, node0.getSourcePosition());
      assertTrue(node0.isNull());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      node0.addChildrenToFront(node0);
      Node node1 = node0.getAncestor(2776);
      assertEquals(41, node1.getType());
      assertEquals(1839, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newNumber(1.0, 1529, 1529);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      assertEquals(6264313, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("", (-136), (-136));
      node0.hasOneChild();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 25, 122);
      Node node1 = new Node(46, node0, node0, node0);
      boolean boolean0 = node1.hasOneChild();
      assertEquals(46, node1.getType());
      assertTrue(boolean0);
      assertTrue(node0.isNumber());
      assertEquals(102522, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 25, 122);
      Node node1 = new Node(56, 39, 54);
      Node node2 = new Node(46, node0, node0, node1);
      node2.hasOneChild();
      assertEquals(102522, node0.getSourcePosition());
      assertEquals(56, node1.getType());
      assertEquals(46, node2.getType());
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      node0.addChildrenToFront(node0);
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertEquals(41, node0.getType());
      assertFalse(boolean0);
      assertEquals(1839, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseStringType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.addChildToBack(node0);
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      Node node1 = new Node(3299, node0, node0, node0);
      Node node2 = node1.srcref(node0);
      boolean boolean0 = node2.isEquivalentToTyped(node2);
      assertEquals(1, node2.getChildCount());
      assertEquals(3299, node2.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertEquals(0, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString("/A@i4_");
      node0.addChildToBack(node0);
      boolean boolean0 = node0.hasChild(node0);
      assertTrue(node0.hasOneChild());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("/A@i4_");
      Node node1 = new Node(12, node0, 4095, 29);
      node0.addChildToBack(node1);
      assertEquals(16773149, node1.getSourcePosition());
      assertEquals(12, node1.getType());
      
      boolean boolean0 = node0.hasChild(node0);
      assertTrue(node0.isString());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      Node node1 = new Node(3299, node0, node0, node0);
      node1.checkTreeEquals(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(3299, node1.getType());
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      Node node1 = Node.newString("CharMatcher.SINGLE_WIDTH");
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals((Object) null);
      assertEquals(39, node0.getType());
      assertTrue(node1.isString());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node1.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 7, 122);
      Node node1 = new Node(0, node0, node0);
      assertFalse(node1.hasMoreThanOneChild());
      
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(28794, node0.getSourcePosition());
      assertNull(node_NodeMismatch0);
      assertEquals(0, node1.getType());
      assertEquals(39, node0.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 7, 122);
      Node node1 = new Node(0, node0, node0);
      node1.type = 122;
      Node node2 = new Node(122, node1, (-3122), 37);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      assertTrue(node1.isVoid());
      assertEquals(28794, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      Node node1 = node0.cloneTree();
      node1.addChildToBack(node0);
      boolean boolean0 = node0.isEquivalentToTyped(node1);
      assertTrue(node1.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(35, "com.google.javascript.rhino.jstype.NumberType");
      Node node1 = new Node(35, node0, node0, 0, 0);
      node1.removeFirstChild();
      boolean boolean0 = node1.isEquivalentToShallow(node0);
      assertFalse(node1.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      boolean boolean0 = node0.isEquivalentTo(node0, false, false, false);
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
      assertEquals(442368, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0);
      node0.type = 37;
      node0.checkTreeEquals(node0);
      assertEquals(37, node0.getType());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(618);
      Node node1 = new Node(1, node0, node0, node0);
      boolean boolean0 = node1.isEquivalentTo(node1, true, true, true);
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertEquals(1, node1.getType());
      assertEquals(618, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node(618);
      Node node1 = new Node(1, node0, node0, node0);
      Node node2 = new Node(1, node1, node1);
      node1.isEquivalentTo(node2, true, true, true);
      assertEquals(618, node0.getType());
      assertEquals(1, node2.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertEquals(1, node1.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(528, "65'i1;iq=L#S", 528, 1925365760);
      node0.getQualifiedName();
      assertEquals(528, node0.getType());
      assertEquals(2166783, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      boolean boolean0 = node0.isQualifiedName();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      Node node1 = new Node(42, node0, node0, 36, 37);
      boolean boolean0 = node1.isQualifiedName();
      assertTrue(node0.isString());
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(147493, node1.getSourcePosition());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2832), (-2832), 33);
      Node node1 = new Node(33, node0, node0, node0);
      node1.isUnscopedQualifiedName();
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertEquals(33, node1.getType());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(38, 38, 653);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 38 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newNumber((-1770.711285125), (-285), (-285));
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newNumber((-1770.711285125), (-285), (-285));
      node0.removeFirstChild();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1843);
      node0.addChildrenToFront(node0);
      assertTrue(node0.hasOneChild());
      
      node0.removeChildren();
      assertEquals(1843, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newNumber((double) 0);
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((double) 42);
      nodeArray0[1] = node1;
      Node node2 = new Node(0, nodeArray0);
      assertEquals(2, node2.getChildCount());
      
      node2.detachChildren();
      assertFalse(node2.isName());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber(659.351263105081);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      Node node1 = new Node(1, node0, node0, node0, 16, 8);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      node0.setSourceFileForTesting("");
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newString(844, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
      Node node1 = new Node(342, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node1);
      assertEquals(342, node2.getType());
      assertEquals(844, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(103, (-1), 103);
      Node node1 = new Node((-4334), node0, node0, node0, (-1), 1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      assertEquals((-4334), node2.getType());
      assertTrue(node2.hasChildren());
      assertEquals(103, node0.getType());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(1048576, node0, node0, 1960, 47);
      assertEquals(47, node1.getCharno());
      
      node1.useSourceInfoIfMissingFromForTree(node0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("2u$xB'a%pe`uvosCmOP");
      node_FileLevelJsDocBuilder0.append("Object#Element");
      assertEquals(83, node0.getType());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.addSuppression((String) null);
      node0.addSuppression((String) null);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber((double) 37, 3063, 86);
      Node node1 = new Node(37, node0);
      assertEquals(37, node1.getType());
      
      node1.setSideEffectFlags(4);
      assertTrue(node0.isNumber());
      assertEquals(12546134, node0.getSourcePosition());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-467));
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals((-467), node_SideEffectFlags0.valueOf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node_SideEffectFlags0.setAllFlags();
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("lYpL\"IZx]v", (-323), (-323));
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      boolean boolean0 = node0.isAdd();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      node0.isAnd();
      assertEquals((-3021), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = node0.isAnd();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      node0.isArrayLit();
      assertEquals(442368, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      boolean boolean0 = node0.isAssign();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newNumber(45.991161, 55, 102);
      node0.isAssignAdd();
      assertEquals(225382, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newNumber((-1113.9), 152, 152);
      node0.isBlock();
      assertTrue(node0.isNumber());
      assertEquals(622744, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = Node.newString("", (-915), (-915));
      node0.isBreak();
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      boolean boolean0 = node0.isCall();
      assertEquals((-3021), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      boolean boolean0 = node0.isCase();
      assertFalse(boolean0);
      assertEquals(1839, node0.getSourcePosition());
      assertTrue(node0.isNull());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      boolean boolean0 = node0.isCase();
      assertTrue(boolean0);
      assertEquals(454767, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      boolean boolean0 = node0.isCast();
      assertEquals(40, node0.getType());
      assertEquals(442368, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(155, 155, 155);
      boolean boolean0 = node0.isCast();
      assertTrue(boolean0);
      assertEquals(635035, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      boolean boolean0 = node0.isCatch();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isComma();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      boolean boolean0 = node0.isContinue();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0);
      boolean boolean0 = node0.isDebugger();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = node0.isDec();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(101, node0.getType());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0, 450, 450);
      node0.isDefaultCase();
      assertEquals(1843650, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      node0.isDelProp();
      assertEquals(40, node0.getType());
      assertEquals(442368, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString(528, "65'i1;iq=L#S", 528, 1925365760);
      Node node1 = new Node(31, node0, (-569), (-1714));
      boolean boolean0 = node1.isDelProp();
      assertEquals(2166783, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertTrue(boolean0);
      assertEquals(528, node0.getType());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      boolean boolean0 = node0.isDo();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isEmpty();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      node0.isExprResult();
      assertEquals((-3021), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      boolean boolean0 = node0.isFalse();
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-3021), node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isFor();
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(115, 115, 1969);
      boolean boolean0 = node0.isFor();
      assertEquals(473009, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber((-1113.9), 152, 152);
      boolean boolean0 = node0.isGetterDef();
      assertEquals(622744, node0.getSourcePosition());
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString(528, "65'i1;iq=L#S", 528, 1925365760);
      node0.isGetElem();
      assertEquals(2166783, node0.getSourcePosition());
      assertEquals(528, node0.getType());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      boolean boolean0 = node0.isGetProp();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0, 450, 450);
      node0.isHook();
      assertEquals(1843650, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber(2084.061, 0, 0);
      node0.isIf();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString("KVKqs", (-196), (-196));
      node0.isIn();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(528, "65'i1;iq=L#S", 528, 1925365760);
      Node node1 = new Node(51, node0, 12, 2);
      boolean boolean0 = node1.isIn();
      assertTrue(boolean0);
      assertEquals(528, node0.getType());
      assertEquals(2166783, node0.getSourcePosition());
      assertEquals(49154, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      node0.isInc();
      assertEquals(442368, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      boolean boolean0 = node0.isInstanceOf();
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = Node.newString("lYpL\"IZx]v", (-323), (-323));
      boolean boolean0 = node0.isLabel();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0, 450, 450);
      node0.isLabelName();
      assertEquals(1843650, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      boolean boolean0 = node0.isName();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = new Node(38, 38, 653);
      boolean boolean0 = node0.isName();
      assertEquals(156301, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNull());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("Z,P");
      boolean boolean0 = node0.isNew();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = new Node(30, 54, 56);
      boolean boolean0 = node0.isNew();
      assertEquals(221240, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      boolean boolean0 = node0.isNot();
      assertFalse(boolean0);
      assertTrue(node0.isNull());
      assertEquals(1839, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      node0.isNull();
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = node0.isNull();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      boolean boolean0 = node0.isNumber();
      assertEquals(442368, node0.getSourcePosition());
      assertFalse(boolean0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newNumber((-1113.9), 152, 79);
      boolean boolean0 = node0.isNumber();
      assertEquals(622671, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(41, nodeArray0, 0, 1839);
      node0.isObjectLit();
      assertEquals(1839, node0.getSourcePosition());
      assertEquals(41, node0.getType());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0);
      boolean boolean0 = node0.isOr();
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber(3081.0, (-1511), (-1511));
      node0.isParamList();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      boolean boolean0 = node0.isParamList();
      assertTrue(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      boolean boolean0 = node0.isRegExp();
      assertEquals(442368, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(47, (-4171), (-815));
      boolean boolean0 = node0.isRegExp();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      boolean boolean0 = node0.isReturn();
      assertEquals((-3021), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString(4, "");
      boolean boolean0 = node0.isReturn();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber(1.2, (-1094), 112);
      boolean boolean0 = node0.isScript();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(111, 111, 111);
      node0.isSetterDef();
      assertTrue(node0.isCase());
      assertEquals(454767, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber((double) 450, 450, 450);
      node0.isString();
      assertEquals(1843650, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      boolean boolean0 = node0.isString();
      assertTrue(boolean0);
      assertEquals(442368, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      boolean boolean0 = node0.isStringKey();
      assertEquals(442368, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(154);
      boolean boolean0 = node0.isStringKey();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newNumber((-1113.9), 152, 152);
      node0.isSwitch();
      assertTrue(node0.isNumber());
      assertEquals(622744, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = new Node(0, 3299, (-2541));
      boolean boolean0 = node0.isThis();
      assertFalse(boolean0);
      assertEquals(0, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newString("", 108, 0);
      node0.isThrow();
      assertEquals(442368, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = Node.newNumber(2084.061, 0, 0);
      boolean boolean0 = node0.isTrue();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString((-3021), "", (-3021), 8);
      node0.isTry();
      assertEquals((-3021), node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 7, 122);
      boolean boolean0 = node0.isTypeOf();
      assertEquals(28794, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      boolean boolean0 = node0.isVar();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString(528, "65'i1;iq=L#S", 528, 1925365760);
      node0.isVoid();
      assertEquals(2166783, node0.getSourcePosition());
      assertEquals(528, node0.getType());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newNumber((double) 450, 450, 450);
      boolean boolean0 = node0.isWhile();
      assertTrue(node0.isNumber());
      assertFalse(boolean0);
      assertEquals(1843650, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString(155, "pvJ#iPwdIk6=R/Ii$-E", (-4171), 155);
      node0.isWith();
      assertTrue(node0.isCast());
      assertEquals((-1), node0.getCharno());
  }
}
