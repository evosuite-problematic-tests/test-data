/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 05:08:52 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, "Not declared as a type name");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectString(nodeTraversal0, node0, functionType0, (String) null);
      assertTrue(functionType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      boolean boolean0 = typeCheck0.shouldTraverse(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, (JSError) null);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, "Named type with empty name component");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(unknownType0, (JSType) null);
      typeValidator0.expectActualObject(nodeTraversal0, node0, parameterizedType0, "Not declared as a constructor");
      assertFalse(node0.isCatch());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, "Not declared as a constructor");
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectString(nodeTraversal0, node0, jSType0, (String) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "[7Q");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "$r qLp!^6~9i,},AJq");
      assertFalse(node0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "Not declared as a constructor");
      assertTrue(jSType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[5] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, true, jSTypeArray0);
      // Undeclared exception!
      try { 
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, functionType0, "com.google.common.io.Files");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(unknownType0, (JSType) null);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, parameterizedType0, "Unknown class name", unknownType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, functionType0, "\n parenI^t:", jSType0);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(unknownType0, (JSType) null);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, unknownType0, parameterizedType0);
      assertFalse(node0.isExprResult());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(unknownType0, (JSType) null);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, parameterizedType0, unknownType0, node0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, 39);
      assertFalse(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, "remove() already called for current element", jSType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      JSType[] jSTypeArray0 = new JSType[6];
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(unknownType0, (JSType) null);
      jSTypeArray0[5] = (JSType) unknownType0;
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) unknownType0, jSTypeArray0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, parameterizedType0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      Scope scope0 = Scope.createLatticeBottom(node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(unknownType0, (JSType) null);
      typeValidator0.expectCanCast(nodeTraversal0, node0, unknownType0, parameterizedType0);
      assertFalse(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SourceFile sourceFile0 = SourceFile.fromFile("Not declared as a constructor");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
      doReturn(jSType0).when(scope_Var0).getType();
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable("Not declared as a constructor", compilerInput0, node0, node0, scope_Var0, "Unknown class name", jSType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SourceFile sourceFile0 = SourceFile.fromFile("Not declared as a constructor");
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
      Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
      doReturn((JSType) null).when(scope_Var0).getType();
      doReturn((String) null).when(scope_Var0).toString();
      Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable("Not declared as a constructor", compilerInput0, node0, node0, scope_Var0, "Unknown class name", jSType0);
      assertNull(scope_Var1.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, diagnosticType0.level, diagnosticType0.defaultLevel);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("h#6}Yntw+l&ds&,,", node0, jSType0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, (Node) null, enumType0, enumType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      String string0 = typeValidator0.getReadableJSTypeName(node0, false);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Unknown class name", "JSC_EXPECTED_STRING_ERROR");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      String string0 = typeValidator0.getReadableJSTypeName(node0, true);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      String[] stringArray0 = new String[6];
      JSError jSError0 = JSError.make("Named type with empty name component", 3854, 3854, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) immutableList0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(functionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
      String[] stringArray0 = new String[6];
      JSError jSError0 = JSError.make("Named type with empty name component", 3854, 3854, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }
}
