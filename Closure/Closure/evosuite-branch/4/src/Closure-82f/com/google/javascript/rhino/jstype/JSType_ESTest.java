/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 09:58:09 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "number", noObjectType0);
      boolean boolean0 = noObjectType0.canTestForEqualityWith(enumType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING_BOOLEAN;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isRecordType());
      
      jSType_TypePair0.typeB.getTypesUnderShallowEquality(jSType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.isResolved();
      assertFalse(boolean0);
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noObjectType0, noObjectType0);
      boolean boolean0 = functionPrototypeType0.isStringValueType();
      assertFalse(functionPrototypeType0.isAllType());
      assertFalse(functionPrototypeType0.isNoType());
      assertFalse(boolean0);
      assertFalse(functionPrototypeType0.isNoObjectType());
      assertFalse(functionPrototypeType0.isNoResolvedType());
      assertFalse(functionPrototypeType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(errorFunctionType0);
      boolean boolean0 = jSType_TypePair0.typeA.matchesNumberContext();
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ObjectType objectType0 = errorFunctionType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getJSDocInfo();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "rWiv',-5", (String) null, (-227), 357);
      String string0 = namedType0.toDebugHashCodeString();
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isAllType());
      assertEquals("{proxy:{9}}", string0);
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.matchesStringContext();
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      boolean boolean0 = objectType0.isString();
      assertTrue(objectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.matchesObjectContext();
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "\"1eq7BNLITl]&V$");
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      errorFunctionType0.getTypesUnderShallowEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, noType0, false);
      boolean boolean0 = arrowType0.matchesStringContext();
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.common.base.CharMatcher$LookupTable", (Node) null);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, functionType0, true);
      arrowType0.unboxesTo();
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "T7`", "Not declared as a constructor", (-4391), 0);
      boolean boolean0 = namedType0.isConstructor();
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(namedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      // Undeclared exception!
      try { 
        numberType0.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      boolean boolean0 = jSType0.isBooleanValueType();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canBeCalled();
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      unionType0.getDisplayName();
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      boolean boolean0 = nullType0.isNumber();
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.isTemplateType();
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(boolean0);
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      JSType jSType0 = errorFunctionType0.getReturnType();
      boolean boolean0 = jSType0.isOrdinaryFunction();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.isNamedType();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, (ObjectType) null, voidType0);
      // Undeclared exception!
      try { 
        parameterizedType0.matchesInt32Context();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "T7`", "Not declared as a constructor", (-4391), 0);
      boolean boolean0 = namedType0.isInterface();
      assertFalse(boolean0);
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      boolean boolean0 = functionPrototypeType0.isInstanceType();
      assertFalse(functionPrototypeType0.isNoType());
      assertFalse(functionPrototypeType0.isResolved());
      assertFalse(functionPrototypeType0.isNoObjectType());
      assertFalse(functionPrototypeType0.isAllType());
      assertFalse(boolean0);
      assertFalse(functionPrototypeType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.isCheckedUnknownType();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "$l\"gVZHuG*");
      boolean boolean0 = errorFunctionType0.matchesUint32Context();
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(2742, "CZI`", (-5311), (-5311));
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, voidType0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("CZI`", arrowType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      boolean boolean0 = enumElementType0.matchesNumberContext();
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      boolean boolean0 = proxyObjectType0.isEnumType();
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.isNumberValueType();
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(noObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType0 = unknownType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertSame(jSType0, unknownType0);
      assertTrue(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VoidType voidType0 = new VoidType((JSTypeRegistry) null);
      voidType0.forgiveUnknownNames();
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "number", noObjectType0);
      enumType0.clearResolved();
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "", 33, 41);
      boolean boolean0 = namedType0.isFunctionPrototypeType();
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNoType());
      assertFalse(boolean0);
      assertFalse(namedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
      ((UnionType) jSType0).toString();
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      boolean boolean0 = proxyObjectType0.hasDisplayName();
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType("Unknown class name", (Node) null, (Node) null, (JSType) stringType0);
      boolean boolean0 = functionType0.hasDisplayName();
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-986), (-986));
      boolean boolean0 = namedType0.hasDisplayName();
      assertFalse(boolean0);
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = JSType.isSubtype((JSType) stringType0, (JSType) proxyObjectType0);
      assertTrue(objectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
      assertFalse(booleanType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<XDM>#+");
      Node node0 = errorFunctionType0.getParametersNode();
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "", false);
      boolean boolean0 = JSType.isEquivalent(unresolvedTypeExpression0, (JSType) null);
      assertFalse(boolean0);
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = errorFunctionType0.equals(simpleErrorReporter0);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      JSType jSType0 = arrowType0.getNativeType(jSTypeNative0);
      errorFunctionType0.equals(jSType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      
      jSType_TypePair0.typeA.findPropertyType("com.google.javascript.rhino.jstype.JSType$TypePair");
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.findPropertyType("Named type with empty name component");
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "\"1eq7BNLITl]&V$");
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = (JSType) errorFunctionType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) errorFunctionType0, true, jSTypeArray0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      boolean boolean0 = functionType0.canAssignTo(errorFunctionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
      boolean boolean0 = functionPrototypeType0.canAssignTo(allType0);
      assertFalse(functionPrototypeType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(functionPrototypeType0.isResolved());
      assertFalse(functionPrototypeType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ObjectType objectType0 = booleanType0.dereference();
      assertNotNull(objectType0);
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.testForEquality(allType0);
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      recordType0.testForEquality(unknownType0);
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noResolvedType0, true);
      functionPrototypeType0.getTypesUnderEquality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
      JSType.TypePair jSType_TypePair0 = functionPrototypeType0.getTypesUnderEquality(noType0);
      jSType_TypePair0.typeB.testForEqualityHelper(allType0, functionPrototypeType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Unknown class name", 2, 1);
      arrowType0.testForEqualityHelper(namedType0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoType noType0 = (NoType)unionType0.getRestrictedUnion(noResolvedType0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(noResolvedType0);
      jSType_TypePair0.typeB.testForEqualityHelper(noResolvedType0, noType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noType0, noType0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, functionType0, true);
      JSType.TypePair jSType_TypePair0 = functionPrototypeType0.getTypesUnderEquality(functionType0);
      boolean boolean0 = jSType_TypePair0.typeA.canTestForShallowEqualityWith(noType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[4];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], jSTypeArray0);
      boolean boolean0 = nullType0.canTestForEqualityWith(functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noType0, noType0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, (FunctionType) null, noType0, true);
      functionPrototypeType0.getTypesUnderEquality(functionType0);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.testForEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(booleanType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      voidType0.testForEquality(unionType0);
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(unknownType0);
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(arrowType0);
      assertFalse(arrowType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "|");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      JSType jSType1 = errorFunctionType0.getLeastSupertype(jSType0);
      assertSame(jSType0, jSType1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) allType0, (JSType) allType0);
      assertSame(jSType0, allType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      errorFunctionType0.getGreatestSubtype(recordType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.common.base.CharMatcher$4");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = templateType0.getGreatestSubtype(errorFunctionType0);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) templateType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) errorFunctionType0, (List<JSType>) linkedList0);
      jSType0.getGreatestSubtype(functionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = recordType0.getGreatestSubtype(numberType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(recordType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      recordType0.getGreatestSubtype(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      linkedList0.offer(noResolvedType0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) noResolvedType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, true, jSTypeArray0);
      JSType.getGreatestSubtype((JSType) functionType0, (JSType) unionType0);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      JSType jSType1 = JSType.getLeastSupertype((JSType) errorFunctionType0, jSType0);
      assertTrue(jSType1.equals((Object)jSType0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      recordType0.getLeastSupertype(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[0], jSTypeArray0);
      JSType jSType0 = functionType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(functionType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType jSType0 = allType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", unionType0);
      enumType0.getTypesUnderEquality(unionType0);
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noType0, "Named type with empty name component");
      enumElementType0.getTypesUnderEquality(noType0);
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
      allType0.getTypesUnderInequality(functionPrototypeType0);
      assertFalse(functionPrototypeType0.isNoObjectType());
      assertFalse(functionPrototypeType0.isResolved());
      assertFalse(functionPrototypeType0.isNoResolvedType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      recordType0.getTypesUnderInequality(unionType0);
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(recordType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      nullType0.getTypesUnderInequality(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(nullType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.getTypesUnderInequality(nullType0);
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(jSType0);
      nullType0.getTypesUnderShallowInequality(jSType_TypePair0.typeA);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(nullType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      recordType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.differsFrom(stringType0);
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
      JSType.TypePair jSType_TypePair0 = functionPrototypeType0.getTypesUnderEquality(noType0);
      assertTrue(noType0.hasCachedValues());
      
      boolean boolean0 = jSType_TypePair0.typeA.differsFrom(noType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, ">7}l)c", unknownType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      boolean boolean0 = enumElementType0.differsFrom(unknownType0);
      assertTrue(boolean0);
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
      JSType.TypePair jSType_TypePair0 = functionPrototypeType0.getTypesUnderEquality(noType0);
      JSType.TypePair jSType_TypePair1 = jSType_TypePair0.typeB.getTypesUnderShallowInequality(noType0);
      assertTrue(noType0.hasCachedValues());
      
      boolean boolean0 = jSType_TypePair1.typeA.differsFrom(noType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "number", noObjectType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.testForEquality(enumType0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
  }
}
