/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 10:03:50 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("US~", "jqRAW");
      unreachableCodeElimination0.process(node0, node0);
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, syntacticScopeCreator0);
      Node node0 = compiler0.parseSyntheticCode("S", "/{OEs\"");
      Node node1 = new Node(105, node0);
      unreachableCodeElimination0.visit(nodeTraversal0, node1, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("US~", "jqRAW");
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, typedScopeCreator0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, syntacticScopeCreator0);
      Node node0 = compiler0.parseSyntheticCode("S", "/{OEs\"");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      nodeTraversal0.traverseInnerNode(node0, node0, scope0);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javcriptjdcomp.UnreachableCodeElimination", "com.google.javcriptjdcomp.UnreachableCodeElimination");
      Node node1 = new Node(4, 29, 9);
      node0.addChildToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("com.google.javcriptjdcomp.UnreachableCodeElimination", "com.google.javcriptjdcomp.UnreachableCodeElimination");
      Node node1 = new Node(4, 29, 9);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node1.addChildrenToBack(node2);
      node0.addChildToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("com.google.javc!i<tjdcomp.UnreachableCodeEliina}ion", "com.google.javc!i<tjdcomp.UnreachableCodeEliina}ion");
      Node node1 = new Node(4, 29, 9);
      node0.addChildToFront(node1);
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode(";", ";");
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("_f", "RAW");
      unreachableCodeElimination0.process(node0, node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
  }
}
