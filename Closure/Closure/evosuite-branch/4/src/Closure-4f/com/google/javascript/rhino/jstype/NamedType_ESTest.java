/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 05:04:45 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.Property;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.VoidType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "zRg]]{*TtSr", "zRg]]{*TtSr", 0, 0);
      jSTypeRegistry0.forwardDeclareType("zRg]]{*TtSr");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) namedType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      namedType0.defineProperty("Not declared as a type name", objectType0, true, node0);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "zRg]]{*TtSr", "zRg]]{*TtSr", 0, 0);
      boolean boolean0 = namedType0.isNamedType();
      assertTrue(boolean0);
      assertEquals("zRg]]{*TtSr", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&dX{Fie%Wh4O2TQ", "enum{", 0, 512);
      String string0 = namedType0.toStringHelper(false);
      assertEquals("&dX{Fie%Wh4O2TQ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&dX{Fie%Wh4O2TQ", "enum{", 0, 512);
      boolean boolean0 = namedType0.isNominalType();
      assertEquals("&dX{Fie%Wh4O2TQ", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&dX{Fie%Wh4O2TQ", "enum{", 0, 512);
      boolean boolean0 = namedType0.hasReferenceName();
      assertEquals("&dX{Fie%Wh4O2TQ", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&dX{Fie%Wh4O2TQ", "enum{", 0, 512);
      namedType0.hashCode();
      assertEquals("&dX{Fie%Wh4O2TQ", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&dX{Fie%Wh4O2TQ", "enum{", 0, 512);
      String string0 = namedType0.getReferenceName();
      assertEquals("&dX{Fie%Wh4O2TQ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, 0);
      JSType[] jSTypeArray0 = new JSType[8];
      jSTypeArray0[3] = (JSType) namedType0;
      jSTypeArray0[7] = (JSType) namedType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, jSTypeArray0[3]);
      namedType0.defineProperty("]:e=xSS", enumType0, false, node0);
      boolean boolean0 = namedType0.defineProperty(".", jSTypeArray0[7], true, node0);
      assertEquals("", namedType0.getReferenceName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "zRg]]{*TtSr", "zRg]]{*TtSr", 0, 0);
      jSTypeRegistry0.forwardDeclareType("zRg]]{*TtSr");
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) namedType0);
      namedType0.resolveInternal(simpleErrorReporter0, objectType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a type name", 1, 1);
      jSTypeRegistry0.declareType("\t\n\u000B\f\r w\u1680\u2028\u2029*\u3000", voidType0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType1 = new NamedType(jSTypeRegistry0, "\t\n\u000B\f\r w\u1680\u2028\u2029*\u3000", "Not declared as a constructor", 1, 1);
      NamedType namedType2 = (NamedType)namedType1.resolveInternal(simpleErrorReporter0, namedType0);
      assertEquals("\t\n\u000B\f\r w\u1680\u2028\u2029*\u3000", namedType2.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a type name", 1, 1);
      jSTypeRegistry0.setLastGeneration(false);
      namedType0.resolveInternal(simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "Cycle detected in inheritance chain of type ", 0, 131072);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "prototype", 0, 131072);
      NoType noType0 = new NoType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "pWdpX~-PZmGK>4Ih", 0, (-1));
      // Undeclared exception!
      try { 
        namedType0.resolveInternal((ErrorReporter) null, (StaticScope<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NamedType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "U9S@w|eOxI", "Not declared as a type name", 1687, 1687);
      jSTypeRegistry0.declareType("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", voidType0);
      NamedType namedType1 = new NamedType(jSTypeRegistry0, "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", "com.google.javascript.rhino.jstype.NamedType$PropertyContinuation", (-58), (-58));
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = namedType1.setValidator(predicate0);
      assertTrue(boolean0);
      
      namedType1.resolveInternal(simpleErrorReporter0, namedType0);
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", namedType1.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "zRg]]{*TtSr", "zRg]]{*TtSr", 0, 0);
      jSTypeRegistry0.forwardDeclareType("zRg]]{*TtSr");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      namedType0.setValidator(predicate0);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(namedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "&dX{Fie%Wh4O2TQ", "enum{", 0, 512);
      Property property0 = new Property("", (JSType) null, true, (Node) null);
      namedType0.getTypedefType(simpleErrorReporter0, property0, "");
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "zRg]]{*TtSr", "zRg]]{*TtSr", 0, 0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((String) null, node0, (ObjectType) namedType0);
      namedType0.resolveInternal(simpleErrorReporter0, objectType0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      namedType0.setValidator(predicate0);
      assertTrue(namedType0.isResolved());
  }
}
