/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 10:23:52 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
      Node node0 = compiler0.parseSyntheticCode("-s$+u!", "-s$+u!");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, syntacticScopeCreator0);
      Scope scope0 = new Scope(node0, compiler0);
      nodeTraversal0.traverseInnerNode(node0, node0, scope0);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode("com.google.javascrip.jscomp.CheckProvides$CheckProvidesCallback");
      unreachableCodeElimination0.process(node0, node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination((AbstractCompiler) null, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, unreachableCodeElimination0);
      Node node0 = new Node(105, (-5522), 1387);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode("com.google.javascrip.jscomp.CheckProvides$CheckProvidesCallback");
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
      unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=g<D");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("=g<D", "com.google.javascript.jscomp.CheckProvides$CheckProvidesCallback");
      node0.setType(52);
      // Undeclared exception!
      try { 
        unreachableCodeElimination0.process(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // Invalid attempt to remove node: EXPR_RESULT 1 [sourcename: java.lang.String@0000000706] of INSTANCEOF 1 [sourcename: java.lang.String@0000000706] [synthetic: 1]
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode("-s$u!");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, syntacticScopeCreator0);
      Node node1 = new Node(4);
      node0.addChildToBack(node1);
      Scope scope0 = new Scope(node0, compiler0);
      nodeTraversal0.traverseInnerNode(node0, node0, scope0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode("-s$u!");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, syntacticScopeCreator0);
      Node node1 = new Node(4);
      node0.addChildToBack(node1);
      Node node2 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.UnreachableCodeElimination", "`F!Q1D");
      node0.addChildrenToBack(node2);
      Scope scope0 = new Scope(node0, compiler0);
      nodeTraversal0.traverseInnerNode(node0, node0, scope0);
      assertFalse(node0.hasOneChild());
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseTestCode("-s$u!");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, syntacticScopeCreator0);
      Node node1 = new Node(4);
      node1.addChildAfter(node0, node0);
      node0.addChildToBack(node1);
      Scope scope0 = new Scope(node0, compiler0);
      nodeTraversal0.traverseInnerNode(node0, node0, scope0);
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
      Node node0 = compiler0.parseSyntheticCode("9s\"K~+6", "9s\"K~+6");
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      Node node1 = compiler0.parseSyntheticCode("9s\"K~+6", "9s\"K~+6");
      node0.addChildToBack(node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, syntacticScopeCreator0);
      Scope scope0 = new Scope(node0, compiler0);
      node1.addChildAfter(node0, node0);
      nodeTraversal0.traverseInnerNode(node0, node0, scope0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
  }
}
