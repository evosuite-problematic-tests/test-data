/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 09:54:42 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DeadAssignmentsElimination;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RenameLabels_ESTest extends RenameLabels_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0, (ScopeCreator) null);
      Node node0 = new Node((-60), (-1334), (-1334));
      Node node1 = new Node(117, node0, node0, 6, 303);
      // Undeclared exception!
      try { 
        renameLabels_ProcessLabels0.visit(nodeTraversal0, node1, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -60
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
      Node node0 = Node.newString("(");
      Node node1 = new Node(116, 116, 116);
      node1.addChildrenToBack(node0);
      renameLabels0.process(node1, node1);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      Node node0 = Node.newString("IgY`/e3zD=M'^x", 3738, 126);
      Node node1 = new Node(126, node0, node0, node0, node0);
      renameLabels_ProcessLabels0.shouldTraverse(nodeTraversal0, node1, (Node) null);
      // Undeclared exception!
      try { 
        renameLabels_ProcessLabels0.shouldTraverse(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
      Node node0 = Node.newString("waHM>6nEM5'9r", 126, 126);
      Node node1 = new Node(126, node0, node0, 37, 4);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, renameLabels_ProcessLabels0);
      // Undeclared exception!
      try { 
        renameLabels_ProcessLabels0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.RenameLabels$ProcessLabels", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
      Node node0 = new Node(116, 116, 116);
      renameLabels0.process(node0, node0);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null);
      Node node0 = Node.newString(125, "", 2642, 40);
      Node node1 = new Node(116, 116, 116);
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        renameLabels0.process(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Node node0 = Node.newString("waHM>6nEM5'9r", 126, 126);
      Node node1 = new Node(126, node0, node0, 37, 4);
      node1.removeChildren();
      RenameLabels renameLabels0 = new RenameLabels((AbstractCompiler) null, (Supplier<String>) null, true);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, renameLabels_ProcessLabels0);
      // Undeclared exception!
      try { 
        renameLabels_ProcessLabels0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
