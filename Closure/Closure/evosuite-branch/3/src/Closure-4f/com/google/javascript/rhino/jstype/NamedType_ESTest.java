/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 07:28:20 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.Property;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnknownType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NamedType_ESTest extends NamedType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.forwardDeclareType("");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-30), (-30));
      JSType jSType0 = namedType0.getRestrictedTypeGivenToBooleanOutcome(false);
      Node node0 = Node.newString((-65), "Unknown class name", 0, 49);
      namedType0.defineInferredProperty("", jSType0, node0);
      namedType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, (-1906));
      boolean boolean0 = namedType0.isNamedType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "STRING_VALUE_OR_OBJECT_TYPE", "STRING_VALUE_OR_OBJECT_TYPE", 1, 634);
      String string0 = namedType0.toStringHelper(true);
      assertEquals("STRING_VALUE_OR_OBJECT_TYPE", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "ue", "ue", (-28), (-28));
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Unknown class name", namedType0);
      namedType0.setReferencedType(prototypeObjectType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(namedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "da{mSDxEY[I", "da{mSDxEY[I", 354, 0);
      boolean boolean0 = namedType0.isNominalType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "da{mSDxEY[I", "da{mSDxEY[I", 354, 0);
      namedType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "da{mSDxEY[I", "da{mSDxEY[I", 354, 0);
      JSType jSType0 = namedType0.getTemplatizedType("da{mSDxEY[I");
      Node node0 = Node.newString(0, "+Y?:B:k$m$K");
      namedType0.defineProperty("4@os}e#\"6`", functionType0, false, node0);
      boolean boolean0 = namedType0.defineProperty("Not declared as a constructor", jSType0, true, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "string", "u^K>/)BV9j.", (-875), (-276));
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, namedType0, namedType0);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) parameterizedType0, jSTypeArray0);
      namedType0.resolveInternal(simpleErrorReporter0, functionType0);
      assertEquals("string", namedType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.forwardDeclareType("ue");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "ue", "ue", (-28), (-28));
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "String", "String", 7, 7);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      assertTrue(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.setLastGeneration(false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NamedType", "com.google.javascript.rhino.jstype.NamedType", 307, 4192);
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedTypeInternal();
      namedType0.resolveInternal(simpleErrorReporter0, unknownType0);
      assertTrue(unknownType0.isResolved());
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "prototype", 0, 1);
      namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "prototype", "NJ{2X%p'))HXl;?[ J", 0, 552);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NJ{2X%p'))HXl;?[ J");
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.forwardDeclareType("r");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "r", "r", (-12), (-12));
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      namedType0.setValidator(predicate0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      namedType0.resolveInternal(simpleErrorReporter0, noObjectType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-2800), (-2800));
      Node node0 = Node.newString(0, "|n/TAQ@:3");
      Property property0 = new Property("Not declared as a constructor", (JSType) null, true, node0);
      namedType0.getTypedefType(simpleErrorReporter0, property0, "Not declared as a type name");
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "L&?pC1^+O-3s#z", (String) null, (-4608), 16384);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "]");
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(namedType0.isResolved());
      assertFalse(boolean0);
  }
}
