/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 10:51:12 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-827.3591551880904));
      Node node1 = new Node(29, node0, node0, node0, 3, 12);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(32, 1, 51);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(33, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
      
      node2.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(36);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(28, 28, 2329);
      Node node1 = new Node(37, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(28, 28, 2329);
      Node node1 = Node.newString(30, "", 47, 28);
      Node node2 = new Node(31, node0, node0, 28, 1);
      node2.addChildToBack(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(31, node3.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(9, 9, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(10, 10, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString((-2), "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(11, 11, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(12, node0, 29, (-2));
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(13, node0, node0, 25, 5);
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(16, node0);
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(16, node2.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(18, 18, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString((-2), "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(18, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-827.3591551880904));
      Node node1 = new Node(19, node0);
      node1.addChildrenToBack(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(19, node2.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(20, node0, node0, node0, node0, 0, 46);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(21, 21, 21);
      node0.addChildToFront(node0);
      Node node1 = Node.newString("7l='BsMpuO", 45, 20);
      node0.addChildAfter(node1, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-827.3591551880904));
      Node node1 = new Node(22, node0, 46, 9);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node1.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(23, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(24, 24, 2351);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "com.google.common.collect.Iterators");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(25, 25, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(28, 28, 2329);
      Node node1 = Node.newString("67l='BnMpuO", (-4562), 4735);
      node0.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      node2.addChildToBack(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(28, node3.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(30, 30, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString((-2), "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(30, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(34, 34, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString("7l='BsMpuO", 50, 4735);
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(35, 35, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "l=BsFpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(36, node0);
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(36, node2.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(9, 9, 2329);
      Node node1 = Node.newString(32, "7l='BnMpuO");
      Node node2 = new Node(38, node0, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(39, node0, node0, node0, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node1.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("G785");
      node0.addChildToFront(node0);
      Node node1 = Node.newString((-2), "l='BsMO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(41);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(42, node0, node0, node0, node0, 1, 38);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node2.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(43, 43, 2359);
      Node node1 = Node.newString("7l='BsMpuO", 29, 0);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(43, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(44, 44, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(46, 46, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(47, 47, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(48, 48, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(49, 49, 2363);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(51, node2.getType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(52, 52, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2359, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(53, 53, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString("7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(53, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(55, 55, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2359, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(60, 60, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(62, 62, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(64, 64, 2359);
      Node node1 = Node.newString("G785", 2, 0);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(67, 67, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(68, 68, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(70, 70, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString((-2), "G785");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(71, 71, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4606), 4735);
      node0.addChildToFront(node1);
      Node node2 = new Node(2, node0, (-2), 3);
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(73, 73, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(73, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(75, 75, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(76, 76, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 37);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(78, 78, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString((-2), "G785");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(80, 80, 2343);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(82, 82, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString((-2), "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2359, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(83, 83, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(84, 84, 2359);
      Node node1 = Node.newString("7l='BsMpuO", 29, 0);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(84, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(85, 85, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2359, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(86, 86, 2329);
      Node node1 = Node.newString("67l='BnMpuO", (-4562), 4735);
      node0.addChildToFront(node1);
      node0.addChildToBack(node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(87, 87, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(88, 88, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(90, 90, 2318);
      Node node1 = new Node(1, 2, 6);
      node0.addChildToFront(node1);
      node0.addChildToBack(node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(92, 92, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(92, node2.getType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(94, 94, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(95, 95, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(96, 96, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(96, node2.getType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(97, 97, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(98, 98, 2347);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(101, 101, 2359);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node1, node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node((-1722), node0);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      node1.addChildToFront(node2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1722), node3.getType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(55, 55, 2359);
      Node node1 = new Node(32, node0, node0, node0, 4, 49);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newNumber((-828.3934205));
      Node node1 = new Node(32, node0, node0, 2, 29);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(32);
      Node node1 = Node.newString("7l='BnMuO", 29, 4735);
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(64, 64, 2337);
      Node node1 = new Node(27, node0, 44, 46);
      node0.addChildToFront(node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(9, 9, 9);
      Node node1 = new Node(26, node0, node0, node0, 0, 27);
      Node node2 = new Node(6, node1, 13, 26);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(27, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(52, 52, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4606), 4735);
      node0.addChildToFront(node1);
      Node node2 = new Node(2, node0, (-2), 3);
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(86, 86, 2329);
      node0.addChildToFront(node0);
      Node node1 = Node.newString(30, "", 47, 28);
      node0.addChildToBack(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(86, node2.getLineno());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(101, 101, 2359);
      Node node1 = Node.newString("7l='BsMpuO");
      node0.addChildToFront(node1);
      node0.addChildAfter(node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(21, 21, 21);
      Node node1 = Node.newString("7l='BsMpuO", 15, 1);
      node0.addChildToFront(node1);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node0);
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(21, 21, 21);
      Node node1 = Node.newString("7l='BsMpuO", 15, 1);
      node0.addChildToFront(node1);
      Node node2 = Node.newString("7l='BsMpuO", 45, 20);
      node0.addChildAfter(node2, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(15, 15, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      Node node2 = Node.newString(37, "7l='BsMpuO");
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(15, 15, 2359);
      Node node1 = Node.newString("7l='BsMpuO", (-4573), 4735);
      node0.addChildToFront(node1);
      Node node2 = Node.newString("7l='BsMpuO", 50, 4735);
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(14, 14, 2351);
      Node node1 = Node.newString("com.google.common.collect.Iterators", (-4594), 0);
      node0.addChildToFront(node1);
      Node node2 = Node.newString(37, "com.google.common.collect.Iterators");
      node0.addChildAfter(node2, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(37, "7l='BsMpuO");
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(28, 28, 2329);
      Node node1 = Node.newString("67l='BnMpuO", (-4562), 4735);
      Node node2 = new Node(37, node0);
      node2.addChildToBack(node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }
}
