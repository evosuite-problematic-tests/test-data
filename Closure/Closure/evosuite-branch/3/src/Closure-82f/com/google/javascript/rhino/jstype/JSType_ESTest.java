/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 10:18:07 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      instanceObjectType0.getTypesUnderInequality(allType0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(noType0.hasCachedValues());
      assertFalse(instanceObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
      boolean boolean0 = instanceObjectType0.isResolved();
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "V3Ch*g<O7wqfR's");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumElementType0, enumElementType0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, (ObjectType) null, indexedType0);
      boolean boolean0 = parameterizedType0.isStringValueType();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(indexedType0.isNoType());
      assertFalse(parameterizedType0.isAllType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ObjectType objectType0 = noType0.dereference();
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoResolvedType());
      assertNotNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.getJSDocInfo();
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      String string0 = objectType0.toDebugHashCodeString();
      assertFalse(objectType0.isResolved());
      assertEquals("{240}", string0);
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      unknownType0.isString();
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "i4ezu0hVA", noType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "i4ezu0hVA");
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowInequality(objectType0);
      jSType_TypePair0.typeA.getTypesUnderInequality(numberType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(numberType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isNullable();
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "i4ezu0hVA", noType0);
      JSType jSType0 = enumType0.unboxesTo();
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertNull(jSType0);
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "i4ezu0hVA", noType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      boolean boolean0 = noType0.canTestForEqualityWith(objectType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "lt!g==K#DJC(=?[$B@k", "lt!g==K#DJC(=?[$B@k", 4758, 4758);
      boolean boolean0 = namedType0.isConstructor();
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, recordType0);
      boolean boolean0 = proxyObjectType0.matchesStringContext();
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.UnmodifiableIterator");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      functionPrototypeType0.setValidator(predicate0);
      assertFalse(functionPrototypeType0.isAllType());
      assertFalse(functionPrototypeType0.isNoObjectType());
      assertFalse(functionPrototypeType0.isResolved());
      assertFalse(functionPrototypeType0.isNoResolvedType());
      assertFalse(functionPrototypeType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.isBooleanValueType();
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(boolean0);
      assertFalse(noObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, numberType0, "Unknown class name");
      boolean boolean0 = enumElementType0.canBeCalled();
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      unionType0.getDisplayName();
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
      jSType0.isNumber();
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      boolean boolean0 = unionType0.isTemplateType();
      assertFalse(unionType0.isResolved());
      assertFalse(boolean0);
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.UnmodifiableIterator");
      JSType jSType0 = errorFunctionType0.getPropertyType("Named type with empty name component");
      boolean boolean0 = jSType0.isOrdinaryFunction();
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(boolean0);
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNamedType();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.isInterface();
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(5237.0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "T.krvWJ^}9", false);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, unresolvedTypeExpression0);
      boolean boolean0 = proxyObjectType0.isInstanceType();
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "nCc)e4:e.vE,?+j[k%U");
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, errorFunctionType0);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isNoObjectType());
      assertFalse(parameterizedType0.isNoType());
      assertFalse(parameterizedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "i4ezu0hVA", noType0);
      assertFalse(enumType0.isResolved());
      
      enumType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(enumType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.matchesUint32Context();
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "i4ezu0hVA", noType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      assertFalse(objectType0.isEnumElementType());
      
      JSType.TypePair jSType_TypePair0 = enumType0.getTypesUnderEquality(objectType0);
      boolean boolean0 = jSType_TypePair0.typeA.differsFrom(enumType0);
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(boolean0);
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("i@t]j-9\"\"Hwz<WM:zDE");
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, (JSType) null);
      boolean boolean0 = arrowType0.matchesInt32Context();
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isResolved());
      assertFalse(boolean0);
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(5237.0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "T.krvWJ^}9", false);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, unresolvedTypeExpression0);
      boolean boolean0 = proxyObjectType0.isEnumType();
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(boolean0);
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isNumberValueType();
      assertFalse(boolean0);
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)recordType0.getImplicitPrototype();
      instanceObjectType0.forgiveUnknownNames();
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newNumber((double) 0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "dv0~Ie*XQ2}Zi", false);
      unresolvedTypeExpression0.clearResolved();
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isNoType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(5237.0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "T.krvWJ^}9", false);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) unresolvedTypeExpression0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unresolvedTypeExpression0, true, jSTypeArray0);
      boolean boolean0 = functionType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add((JSType) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      // Undeclared exception!
      try { 
        unionType0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, unionType0);
      boolean boolean0 = parameterizedType0.hasDisplayName();
      assertFalse(parameterizedType0.isAllType());
      assertFalse(parameterizedType0.isNoType());
      assertFalse(parameterizedType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isNoResolvedType());
      assertFalse(parameterizedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.UnmodifiableIterator");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      assertFalse(functionPrototypeType0.isFunctionType());
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) functionPrototypeType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(errorFunctionType0);
      boolean boolean0 = jSType_TypePair0.typeB.hasDisplayName();
      assertTrue(boolean0);
      assertFalse(functionPrototypeType0.isNoResolvedType());
      assertFalse(functionPrototypeType0.isAllType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "0w9TGd3,:j]TK", unknownType0, true);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", prototypeObjectType0);
      boolean boolean0 = enumType0.hasDisplayName();
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      instanceObjectType0.getTypesUnderEquality(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isEmptyType();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      JSType.isEquivalent(unionType0, unionType0);
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      boolean boolean0 = JSType.isEquivalent(jSType0, (JSType) null);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.getPropertyType("");
      boolean boolean0 = jSType0.equals("");
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.UnmodifiableIterator");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      JSType jSType0 = errorFunctionType0.getPropertyType("Named type with empty name component");
      assertFalse(jSType0.isRecordType());
      
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowEquality(errorFunctionType0);
      boolean boolean0 = jSType_TypePair0.typeB.equals(functionPrototypeType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.findPropertyType(": ");
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", numberType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.findPropertyType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, nullType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, "Unknown class name");
      boolean boolean0 = proxyObjectType0.canAssignTo(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.canAssignTo(nullType0);
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ObjectType objectType0 = numberType0.dereference();
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoResolvedType());
      assertNotNull(objectType0);
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "(e9.TW-\"r>oKmZ");
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.testForEquality(templateType0);
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.UnmodifiableIterator");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      JSType jSType0 = JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) functionPrototypeType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(errorFunctionType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderEquality(jSType_TypePair0.typeA);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.testForEqualityHelper(allType0, noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.UnmodifiableIterator");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      JSType jSType0 = JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) functionPrototypeType0);
      JSType jSType1 = errorFunctionType0.getPropertyType("Named type with empty name component");
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(errorFunctionType0);
      jSType_TypePair0.typeB.testForEqualityHelper(jSType1, jSType_TypePair0.typeA);
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isNoType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noObjectType0);
      parameterizedType0.testForEquality(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      noType0.getTypesUnderEquality(noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", numberType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.testForEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(numberType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.testForEquality(unionType0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) unionType0, (List<JSType>) linkedList0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, unionType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, unionType0, "Unknown class name");
      boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(parameterizedType0);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, voidType0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.canTestForShallowEqualityWith(proxyObjectType0);
      assertFalse(allType0.isResolved());
      assertTrue(boolean0);
      assertFalse(allType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, (ObjectType) null, (JSType) null);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, parameterizedType0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      linkedHashSet0.add(enumType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(unionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      JSType jSType1 = JSType.getLeastSupertype((JSType) numberType0, jSType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getLeastSupertype(jSType1);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) recordType0, (JSType) recordType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ">FX}x9og1!K ;");
      errorFunctionType0.getGreatestSubtype(recordType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "i4ezu0hVA", noType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noType0, objectType0);
      boolean boolean0 = functionType0.canTestForEqualityWith(objectType0);
      assertTrue(functionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.getPropertyType("T");
      JSType.getGreatestSubtype((JSType) noResolvedType0, jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      JSType jSType0 = JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) functionPrototypeType0);
      JSType jSType1 = JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) functionPrototypeType0);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = jSType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSTypeArray0[0], false);
      NoType noType0 = (NoType)JSType.getGreatestSubtype(jSType1, (JSType) arrowType0);
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      JSType jSType0 = JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) functionPrototypeType0);
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "kh&+!/6.T}<a");
      errorFunctionType1.getGreatestSubtype(jSType0);
      assertTrue(errorFunctionType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      JSType jSType1 = JSType.getGreatestSubtype(jSType0, (JSType) numberType0);
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      NoResolvedType noResolvedType1 = (NoResolvedType)unionType0.getLeastSupertype(noResolvedType0);
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      recordType0.getLeastSupertype(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "1XI)|JGB[.moQr-A");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      JSType jSType0 = objectType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isResolved());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(objectType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      JSType[] jSTypeArray0 = new JSType[9];
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionPrototypeType0, noResolvedType0);
      jSTypeArray0[7] = (JSType) functionPrototypeType0;
      indexedType0.getTypesUnderEquality(jSTypeArray0[7]);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.UnmodifiableIterator");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      JSType jSType0 = JSType.getLeastSupertype((JSType) errorFunctionType0, (JSType) functionPrototypeType0);
      assertFalse(functionPrototypeType0.isNoType());
      assertFalse(functionPrototypeType0.isAllType());
      
      jSType0.getTypesUnderInequality(jSType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, voidType0);
      proxyObjectType0.getTypesUnderInequality(voidType0);
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 307);
      namedType0.getTypesUnderShallowInequality(unionType0);
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
      voidType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.getPropertyType("3DS");
      boolean boolean0 = jSType0.differsFrom(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.differsFrom(numberType0);
      assertTrue(boolean0);
      assertFalse(noType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(noType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "6%rzB?E-MeCAPUJ*au@", unknownType0, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("6%rzB?E-MeCAPUJ*au@", prototypeObjectType0);
      boolean boolean0 = enumType0.differsFrom(unknownType0);
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "0#>rKU?Iw($Z,Bj");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      boolean boolean0 = recordType0.isSubtype(templateType0);
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(recordType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("=WZ''Y", allType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      JSType jSType0 = enumElementType0.resolveInternal((ErrorReporter) null, (StaticScope<JSType>) null);
      assertTrue(allType0.isResolved());
      assertFalse(jSType0.isResolved());
  }
}
