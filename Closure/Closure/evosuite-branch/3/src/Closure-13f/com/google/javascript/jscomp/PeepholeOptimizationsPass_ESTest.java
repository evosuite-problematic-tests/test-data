/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 07:46:48 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.rhino.Node;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeepholeOptimizationsPass_ESTest extends PeepholeOptimizationsPass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[0];
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      Node node0 = compiler0.parseTestCode("volatile");
      peepholeOptimizationsPass0.process(node0, node0);
      peepholeOptimizationsPass0.process(node0, node0);
      assertFalse(node0.isHook());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, (AbstractPeepholeOptimization[]) null);
      AbstractCompiler abstractCompiler0 = peepholeOptimizationsPass0.getCompiler();
      assertSame(compiler0, abstractCompiler0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[5];
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) reorderConstantExpression0;
      StatementFusion statementFusion0 = new StatementFusion();
      abstractPeepholeOptimizationArray0[1] = (AbstractPeepholeOptimization) statementFusion0;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      abstractPeepholeOptimizationArray0[2] = (AbstractPeepholeOptimization) peepholeRemoveDeadCode0;
      abstractPeepholeOptimizationArray0[3] = (AbstractPeepholeOptimization) statementFusion0;
      abstractPeepholeOptimizationArray0[4] = (AbstractPeepholeOptimization) peepholeRemoveDeadCode0;
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      Node node0 = new Node(1135);
      Node node1 = new Node(0, node0, node0, 52, 48);
      // Undeclared exception!
      try { 
        peepholeOptimizationsPass0.process(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[4];
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      abstractPeepholeOptimizationArray0[0] = (AbstractPeepholeOptimization) reorderConstantExpression0;
      StatementFusion statementFusion0 = new StatementFusion();
      abstractPeepholeOptimizationArray0[1] = (AbstractPeepholeOptimization) statementFusion0;
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      abstractPeepholeOptimizationArray0[2] = (AbstractPeepholeOptimization) peepholeRemoveDeadCode0;
      abstractPeepholeOptimizationArray0[3] = (AbstractPeepholeOptimization) statementFusion0;
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      Node node0 = new Node((-1059));
      Node node1 = new Node(4, node0, node0, node0, node0, 50, 38);
      peepholeOptimizationsPass0.process(node1, node0);
      assertFalse(node1.isThrow());
  }
}
