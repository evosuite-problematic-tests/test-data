/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 10:25:59 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableSet;
import com.google.javascript.jscomp.AstParallelizer;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.getNodeTypeReferenceCount((Node) null, (-2), nodeUtil_MatchDeclaration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("Jug[QD>)j+' ");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "Jug[QD>)j+' ", nodeUtil_MatchNotFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "First argument must be 'this'.", 761, 761);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, (-1447));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 51, 51);
      boolean boolean0 = NodeUtil.containsFunction(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString("I");
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.canBeSideEffected((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("<t>@f", "<t>@f");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("-=", "Ct) Ja9r*");
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString("I");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "valueOf", 49, 49);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M[", "agkIvJq3KseB-6");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "40?bs", node0, "jsConstructor");
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M[", "agkIvJq3KseB-6");
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 29);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "First argument must be 'this'.", 761, 761);
      Node node1 = NodeUtil.newName(googleCodingConvention0, "First argument must be 'this'.", node0, "First argument must be 'this'.");
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(761, node1.getLineno());
      assertEquals(38, node1.getType());
      assertEquals(33, node0.getType());
      assertEquals(761, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isNameReferenced((Node) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, "XMLHttpRequest");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M[", "agkIvJq3KseB-6");
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got BLOCK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "LITE_RUNTIME", "IGt.MO4V8RlLsX~");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber(3553.00295535795);
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("MzDow");
      String[] stringArray0 = new String[2];
      ImmutableSet<String> immutableSet0 = ImmutableSet.of("Infinity", "Invalid attemt to remove node: ", "DxW", " does not have a condition.", "e?(s|!D++Et('K_+", "DxW", stringArray0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ">", 97, (-47));
      NodeUtil.getExpressionBooleanValue(node0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber(1083.6023819397487, 30, 30);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M[", "M[");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getExpressionBooleanValue(node1);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0, supplier0, node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("", list0, node0, 0, 43);
      NodeUtil.getExpressionBooleanValue(node1);
      assertEquals(3, node1.getChildCount());
      assertEquals(105, node1.getType());
      assertEquals(0, node1.getLineno());
      assertEquals(43, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("");
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 59, 59);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newString("bxcEd!", 33, 0);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("bxcEd!", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newNumber(1083.6023819397487);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("1083.6023819397487", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      String string0 = NodeUtil.getStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber(32.0);
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("32", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">", 543, 90);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(90, node0.getCharno());
      assertEquals(543, node0.getLineno());
      assertNull(double0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString((-972), "", (-972), (-436));
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber(3897.594);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(3897.594, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("bxnd!");
      node0.setType(41);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "undefined", 543, 90);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertEquals(90, node0.getCharno());
      assertEquals(543, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "NaN", 543, 90);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(90, node0.getCharno());
      assertEquals(543, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "o'", 543, 110);
      assertEquals(38, node0.getType());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(110, node0.getCharno());
      assertEquals(543, node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 51, 51);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node(69, 69, 69);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeREF_SPECIAL 69
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "M[", "agkIvJq3KseB-6");
      CompilerOptions compilerOptions0 = compiler0.options;
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypes);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("bxnEd!", 33, 0);
      Node node1 = new Node(15, node0, node0);
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
      Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("bxcEd!", 33, 0);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString(12, "com.google.common.collect.HashBasedTable", 12, 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(13, "com.google.common.collect.HashBasedTable", 13, 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("bxnEd!", 33, 0);
      Node node1 = new Node(15, node0, node0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(22, "com.google.common.colect.HashBasedTable", 22, 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(24, "com.google.common.collect.HashBasedTable", 24, (-21));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newString(33, "bxnEd!");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(46, 46, 46);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(74, "com.google.common.collect.HashBasedTable", 74, 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(114);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString(121, "com.google.common.collect.HashBasedTable");
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ">", 543, 90);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(543, node0.getLineno());
      assertEquals(90, node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(41, "com.google.common.collect.HashBasedTable", 41, 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString(77, "com.google.common.collect.HashBasedTable", 77, 0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0, supplier0, node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("", list0, node0, 0, 43);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber(1083.6023819397487, 30, 30);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.common.collect.HashBasedTable");
      String[] stringArray0 = new String[2];
      ImmutableSet<String> immutableSet0 = ImmutableSet.of("Infinity", "Invalid attemt to remove node: ", "DxW", " does not have a condition.", "e?(s|!D++Et('K_+", "DxW", stringArray0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("MzDow");
      String[] stringArray0 = new String[2];
      ImmutableSet<String> immutableSet0 = ImmutableSet.of("Infinity", "Invalid attemt to remove node: ", "DxW", "MzDow", "e?(s|!D++Et('K_+", "DxW", stringArray0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0, immutableSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-571));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-571> (type -571)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(100);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(3897.594);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("bxnd!");
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(3553.00295535795);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(88, 88, 88);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Invalid attemt to remove node: ", 77, 77);
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      assertTrue(boolean0);
      assertEquals(77, node0.getLineno());
      assertEquals(77, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(122);
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ConcreteType$1", "akIvJq3KseB-6");
      Node node1 = NodeUtil.newVarNode("5Z<kRlU6TC]f@", node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node1.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ConcreteType$1", "akIvJq3KseB-6");
      CompilerOptions compilerOptions0 = compiler0.options;
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNotFunction0, compilerOptions0.sourceMapDetailLevel);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.collect.HashBasedTable", 0, 0);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.collect.HashBasedTable", 0, 0);
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newNumber((-1172.74), 769, 944);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("bxnEd!", 33, 0);
      Node node1 = new Node(15, node0, node0);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.collect.HashBasedTable", 0, 0);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0, supplier0, node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("", list0, node0, 0, 43);
      assertEquals(3, node1.getChildCount());
      assertEquals(0, node1.getLineno());
      assertEquals(43, node1.getCharno());
      assertEquals(105, node1.getType());
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("bxnEd!", 33, 0);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(113, 18, 18);
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(114, 25, 25);
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(115, 25, 25);
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR 25
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "", "");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SCRIPT 1 [sourcename: java.lang.String@0000000429] [synthetic: 1] does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Invalid attemt to remove node: ", 79, 79);
      Node node1 = NodeUtil.newVarNode("Invalid attemt to remove node: ", node0);
      assertEquals(118, node1.getType());
      assertEquals(79, node1.getCharno());
      
      boolean boolean0 = NodeUtil.isStatement(node0);
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
      assertEquals(79, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString(74, "com.google.common.collect.HashBasedTable", 74, 0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: REF_NS_MEMBER com.google.common.collect.HashBasedTable 74 of REF_NS_MEMBER com.google.common.collect.HashBasedTable 74
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString("bxnEd!", 33, 0);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(77, "com.google.common.collect.HashBasedTable", 77, 0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: TRY com.google.common.collect.HashBasedTable 77 of TRY com.google.common.collect.HashBasedTable 77
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "Na:N", 512, 90);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("F/");
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
      Compiler compiler0 = new Compiler(printStreamErrorManager0);
      Node node0 = compiler0.parseSyntheticCode("F/", "F/");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(24, "com.google.common.collect.HashBasedTable", 24, (-21));
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString(7, "com.google.common.collect.HashBasedable", 7, 0);
      node0.setType(42);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0, supplier0, node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("", list0, node0, 0, 43);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.has(node1, nodeUtil_MatchNotFunction0, nodeUtil_MatchDeclaration0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(122);
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ConcreteType$1", "com.google.javascript.jscomp.ConcreteType$1");
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber(1083.6023819397487, 30, 30);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("bxcEd!", 33, 0);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newNumber(2425.9);
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = Node.newString("bxnEd!", 33, 0);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertNotNull(string0);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = NodeUtil.opToStr(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = NodeUtil.opToStr(11);
      assertEquals("&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = NodeUtil.opToStr(29);
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = NodeUtil.opToStr(60);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 113: WHILE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 117: CONTINUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = NodeUtil.opToStr((-2004));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ConcreteType$1", "akIvJq3KseB-6");
      Node node1 = NodeUtil.newVarNode("5Z<kRlU6TC]f@", node0);
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ">", 97, (-47));
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0, supplier0, node0, true);
      List<Node> list0 = astParallelizer0.split();
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("", list0, node0, 0, 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.NodeUtil$MatchNotFunction", 1332, 83);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Inv}lid a|temtdto remove.node: ", 77, 77);
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertFalse(node0.hasOneChild());
      assertEquals(77, node1.getCharno());
      assertEquals(33, node0.getType());
      assertEquals(77, node0.getCharno());
      assertEquals(77, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node((-2286));
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "LITE_RUNTIME", "IGt.MO4V8RlLsX~");
      Node node1 = NodeUtil.newName(googleCodingConvention0, "LITE_RUNTIME", node0, "com.google.javascript.jscomp.CheckAccidentalSemicolon");
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getCharno());
      assertTrue(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("Number");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("{main}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Invalid attemt to remove node: ", 77, 77);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(77, node0.getCharno());
      assertEquals(77, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("bxnEd!", 33, 0);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertEquals(122, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("in", (Node) null);
      assertEquals(118, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString("bxcEd!", 33, 0);
      Node node1 = new Node(15, node0, node0);
      boolean boolean0 = NodeUtil.containsType(node1, 15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(23);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      int int0 = NodeUtil.getCount(node1, nodeUtil_MatchShallowStatement0, nodeUtil_MatchShallowStatement0);
      assertEquals(122, node1.getType());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.ConcreteType$1", "akIvJq3KseB-6");
      boolean boolean0 = NodeUtil.referencesThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 51, 51);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "Invalid attemt to remove node: ", 77, 77);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(9, 25, 25);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 51, 51);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 51, 51);
      Node node1 = new Node(1422, node0);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0, supplier0, node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("", list0, node0, 0, 43);
      assertEquals(0, node1.getLineno());
      assertEquals(43, node1.getCharno());
      assertEquals(105, node1.getType());
      assertEquals(3, node1.getChildCount());
      
      NodeUtil.getInfoForNameNode(node0);
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newNumber((-0.4732443424683209), 69, 69);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("", 31, 31);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(86, 63, 86);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newString("-", 106, 113);
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(51, 51, 51);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("I");
      NodeUtil.MatchNotFunction nodeUtil_MatchNotFunction0 = new NodeUtil.MatchNotFunction();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      Supplier<Node> supplier0 = (Supplier<Node>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      AstParallelizer astParallelizer0 = new AstParallelizer(nodeUtil_MatchNotFunction0, sourceMap_DetailLevel0, supplier0, node0, false);
      List<Node> list0 = astParallelizer0.split();
      Node node1 = NodeUtil.newFunctionNode("", list0, node0, 0, 43);
      NodeUtil.evaluatesToLocalValue(node1);
      assertEquals(105, node1.getType());
      assertEquals(0, node1.getLineno());
      assertEquals(3, node1.getChildCount());
      assertEquals(43, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(0, "com.google.common.collect.HashBasedTable", 0, 0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeEOF com.google.common.collect.HashBasedTable 0
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }
}
