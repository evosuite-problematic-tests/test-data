/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 07:32:18 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.ProcessTweaks;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.initCompilerOptionsIfTesting();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.setShouldReport(false);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      DiagnosticType diagnosticType0 = ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR;
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make("Unknown class name", 1, 0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(diagnosticType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      DiagnosticType diagnosticType0 = TypedScopeCreator.UNKNOWN_LENDS;
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make("timers:\n{0}", 0, 1, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(boolean, boolean)", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      DiagnosticType diagnosticType0 = ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR;
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make("Unknown class name", 1, 0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeArray0);
      DiagnosticType diagnosticType0 = ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR;
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make("Unknown class name", 1, 0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(noType0, noType0, jSError0);
      Node node0 = Node.newString("=))llr_6 PgC9)aQZn=");
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, noType0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(noType0, enumType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertTrue(noType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeArray0);
      DiagnosticType diagnosticType0 = CheckAccessControls.DEPRECATED_NAME;
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make("Unknown class name", 1, 0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(noType0, noType0, jSError0);
      Node node0 = Node.newString(1, "Not declared as a type name");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(stringArray0[2], node0, noType0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(noType0, enumType0, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch1.equals(typeValidator_TypeMismatch0);
      assertTrue(noType0.hasCachedValues());
      assertFalse(boolean0);
  }
}
