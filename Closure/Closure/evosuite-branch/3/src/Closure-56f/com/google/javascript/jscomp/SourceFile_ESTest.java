/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 09:20:27 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated(".Ph32302Ssm-y)EA0", (SourceFile.Generator) null);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("UTF-16BE", "UTF-8");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 0
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "UTF-16LE");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile sourceFile0 = SourceFile.fromGenerator(" [", sourceFile_Generator0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UTF-8");
      SourceFile sourceFile0 = SourceFile.fromReader("UTF-8", stringReader0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("=V[Ifj(/bk`6kwio", "s`utm>Yq");
      SourceFile sourceFile0 = SourceFile.fromFile(file0);
      sourceFile0.getLine(493);
      sourceFile0.getCodeReader();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.SourceFile$Generated", "com.google.javascript.jscomp.SourceFile$Generated", "}2']/+8`Ag4;itY*hM");
      sourceFile0.clearCachedSource();
      assertEquals("com.google.javascript.jscomp.SourceFile$Generated", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$Generated", sourceFile0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("C/AiC", "Expected line number between 1 and ");
      String string0 = sourceFile_Preloaded0.getCodeNoCache();
      assertEquals("Expected line number between 1 and ", string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("C/AiC", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}2']/+8`Ag4;itY*hM", "");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.getName();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("C/AiC", "Expected line number between 1 and ");
      sourceFile_Preloaded0.setIsExtern(false);
      assertEquals("C/AiC", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";S:k?x^4{2g'P_e,VKI", "Expected line number between 1 and ");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      sourceFile0.toString();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("UTF-8", charset0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SourceFile.fromInputStream("+@UiMc2L\"xnc7@b)", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("%G4RQ");
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = null;
      try {
        sourceFile_Generated0 = new SourceFile.Generated((String) null, (SourceFile.Generator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile sourceFile0 = null;
      try {
        sourceFile0 = new SourceFile("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("x}&VXMn(sz!8rWbV", "x}&VXMn(sz!8rWbV");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.getNumLines();
      int int0 = sourceFile_OnDisk0.getLineOffset(1);
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("j!@u`/}OD-7t1Jz", "j!@u`/}OD-7t1Jz", "j!@u`/}OD-7t1Jz");
      sourceFile_Preloaded0.getNumLines();
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("oT>Wk%c>}w/JSYUO@/F", "oT>Wk%c>}w/JSYUO@/F", (InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset((byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 2
         // Actual: 10
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("TV%j.<*xB50", sourceFile_Generator0);
      String string0 = sourceFile_Generated0.getOriginalPath();
      assertFalse(sourceFile_Generated0.isExtern());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("C/AiC", "Expected line number between 1 and ");
      String string0 = sourceFile_Preloaded0.getOriginalPath();
      assertEquals("C/AiC", string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tdb^0D_`QEC%#kF}");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      try { 
        sourceFile_OnDisk0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("UTF-16BE", "UTF-8");
      String string0 = sourceFile0.getLine(0);
      assertEquals("UTF-16BE", sourceFile0.getOriginalPath());
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tdb^0D_`QEC%#kF}");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tdb^0D_`QEC%#kF}");
      String string0 = sourceFile_OnDisk0.getLine(3);
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tdb^0D_`QEC%#kF}");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iCNRhly:AwkH#v4vPt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tdb^0D_`QEC%#kF}");
      String string0 = sourceFile_OnDisk0.getLine(3);
      assertNotNull(string0);
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertEquals("tdb^0D_`QEC%#kF}", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("}2']/+8`Ag4;itY*hM", "");
      File file0 = MockFile.createTempFile("}2']/+8`Ag4;itY*hM", "}2']/+8`Ag4;itY*hM", (File) mockFile0);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      String string0 = sourceFile_OnDisk0.getLine(0);
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tdb^0D_`QEC%#kF}");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tdb^0D_`QEC%#kF}");
      sourceFile_OnDisk0.getRegion(54);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tdb^0D_`QEC%#kF}");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iCNRhly:AwkH#v4vPt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\n");
      Region region0 = sourceFile_OnDisk0.getRegion((-1646));
      assertEquals(6, region0.getEndingLineNumber());
      assertEquals("\ntdb^0D_`QEC%#kF}\niCNRhly:AwkH#v4vPt\n\n\n", region0.getSourceExcerpt());
      assertNotNull(region0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("tdb^0D_`QEC%#kF}");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tdb^0D_`QEC%#kF}");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "iCNRhly:AwkH#v4vPt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tdb^0D_`QEC%#kF}");
      Region region0 = sourceFile_OnDisk0.getRegion(3);
      assertNotNull(region0);
      assertEquals(4, region0.getEndingLineNumber());
      assertFalse(sourceFile_OnDisk0.isExtern());
      assertEquals(1, region0.getBeginningLineNumber());
      assertEquals("tdb^0D_`QEC%#kF}\niCNRhly:AwkH#v4vPt\ntdb^0D_`QEC%#kF}", region0.getSourceExcerpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("UTF-16BE", "UTF-8");
      Region region0 = sourceFile0.getRegion(0);
      assertEquals("UTF-8", region0.getSourceExcerpt());
      assertEquals(1, region0.getEndingLineNumber());
      assertEquals("UTF-16BE", sourceFile0.getOriginalPath());
      assertNotNull(region0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("B").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("TV%j.<*xB50", sourceFile_Generator0);
      String string0 = sourceFile_Generated0.getCode();
      assertNotNull(string0);
      
      sourceFile_Generated0.getNumLines();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "^:auKv0bkG1l_~/3r");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0, (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }
}
