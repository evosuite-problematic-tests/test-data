/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 11:21:09 GMT 2019
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber((-1275.8539), 91, (-1342));
      node0.siblings();
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2097, 2097);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.iterator();
      assertEquals(8591409, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.addSuppression("");
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(29);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node0.setSourceFileForTesting("I-AX#d#n 0^q");
      node_FileLevelJsDocBuilder0.append((String) null);
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newString(40, "!");
      node0.setQuotedString();
      try { 
        node0.setDouble(0.5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING ! [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newString((int) (byte)101, ".(|qlINDX");
      node0.isQuotedString();
      assertEquals(101, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("d)W");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1860));
      node_SideEffectFlags0.setMutatesGlobalState();
      assertEquals((-1864), node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1860));
      node_SideEffectFlags0.clearAllFlags();
      assertEquals(31, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1860));
      node_SideEffectFlags0.setMutatesArguments();
      assertEquals((-1864), node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertEquals(0, node_SideEffectFlags1.valueOf());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setType(37);
      node0.setSideEffectFlags(308);
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(node0.isCall());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      node0.addSuppression("");
      node0.setChangeTime(2585);
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      assertEquals(35353, node1.getSourcePosition());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      node0.setSourceFileForTesting("missing prop: ");
      int int0 = node0.getSourceOffset();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      node0.setDouble(627);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      InputId inputId0 = new InputId((String) null);
      node0.setInputId(inputId0);
      assertTrue(node0.isNumber());
      
      node0.toString(true, true, true);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newString(")N0-$Oe{T9)x37>77");
      node0.getJsDocBuilderForNode();
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setWasEmptyNode(true);
      boolean boolean0 = node0.wasEmptyNode();
      assertTrue(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 2097, 2097);
      node0.getInputId();
      assertEquals(39, node0.getType());
      assertEquals(8591409, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(1105.7692);
      boolean boolean0 = node0.isSyntheticBlock();
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.setSourceEncodedPosition(30);
      assertEquals(30, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber(1351.3559703915232, (-433), (-433));
      Node node1 = node0.getAncestor(40);
      assertNull(node1);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("FL5ViBHbSZ+^%dH[2V", 1284, 1284);
      node0.getChangeTime();
      assertTrue(node0.isString());
      assertEquals(5260548, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newString("FL5ViBHbSZ+^%dH[2V", 1284, 1284);
      boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals(5260548, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      node0.setIsSyntheticBlock(true);
      try { 
        node0.setString((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 627.0 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(302);
      Node node1 = new Node(1, node0, node0, node0, 12, 2097152);
      // Undeclared exception!
      try { 
        node0.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.getAncestors();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = Node.newString((-1053), "Fo+}OPu5+fp", (-1053), (-1053));
      Node node1 = new Node(51, node0);
      node1.isQuotedString();
      assertEquals(51, node1.getType());
      assertEquals((-1053), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertEquals(417894, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(102, node0.getType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(31, "", 4194304, 13);
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertEquals(31, node0.getType());
      assertFalse(boolean0);
      assertEquals(13, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.getDirectives();
      assertEquals(2514952, node0.getSourcePosition());
      assertEquals(2585, node0.getType());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newNumber(39.3093, 1072, 1072);
      node0.setOptionalArg(false);
      assertEquals(4391984, node0.getSourcePosition());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      int int0 = node0.getSourcePosition();
      assertEquals(83, node0.getType());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(103, 968, 0);
      node0.getLength();
      assertEquals(3964928, node0.getSourcePosition());
      assertEquals(103, node0.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString((-1053), "Fo+}OPu5+fp", (-1053), (-1053));
      node0.setCharno(8);
      assertEquals((-1053), node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(103, 968, 0);
      boolean boolean0 = node0.isEquivalentToTyped(node0);
      assertEquals(3964928, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isDec());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.setDirectives((Set<String>) null);
      assertEquals(2585, node0.getType());
      assertEquals(2514952, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(103, 968, 0);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(33);
      boolean boolean0 = node0.isEquivalentTo(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(33, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      boolean boolean0 = node0.isLocalResultCall();
      assertEquals(0, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(0, node0.getType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-475), nodeArray0);
      node0.setStaticSourceFile((StaticSourceFile) null);
      assertEquals((-475), node0.getType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      node0.getSourceFileName();
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(153, "`~uf}!*", 153, 153);
      node0.setLineno(153);
      assertEquals(626841, node0.getSourcePosition());
      assertEquals(153, node0.getType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString(153, "`~uf}!*", 153, 153);
      node0.addSuppression("`~uf}!*");
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME `~uf}!* 153 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(31, "", 4194304, 13);
      node0.setVarArgs(true);
      node0.toString();
      assertEquals(13, node0.getSourcePosition());
      assertEquals(31, node0.getType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(90, "k`WV!-dXnMey~8nVwHa", 90, 90);
      node0.setOptionalArg(true);
      node0.toString();
      assertEquals(90, node0.getType());
      assertEquals(90, node0.getLineno());
      assertEquals(90, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newNumber((-536.7676793062502), (-615), (-615));
      node0.setWasEmptyNode(true);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -536.7676793062502 [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(154);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(154, node0, 84, 73);
      node1.putProp(47, fileSystemHandling0);
      String string0 = node0.checkTreeEquals(node1);
      assertEquals(154, node0.getType());
      assertEquals(73, node1.getCharno());
      assertNotNull(string0);
      assertEquals(84, node1.getLineno());
      assertEquals((-1), node0.getLineno());
      assertEquals(154, node1.getType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newNumber(1351.3559703915232, (-433), (-433));
      node0.setSourceFileForTesting("jsdoc_info");
      try { 
        node0.setString("jsdoc_info");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1351.3559703915232 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newString(153, "`~uf}!*", 153, 153);
      node0.setLength(153);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME `~uf}!* 153 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString(40, "!");
      node0.setChangeTime(40);
      try { 
        node0.setDouble(0.5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING ! [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.putBooleanProp((-3943), true);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id -3943
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newNumber(1351.3559703915232, (-433), (-433));
      Node node1 = Node.newString(39, "jsdoc_info", 31, 1);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(126977, node1.getSourcePosition());
      assertNotNull(node_NodeMismatch0);
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isNumber());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newNumber(1351.3559703915232, (-433), (-433));
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertNull(node_NodeMismatch0);
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newNumber(1351.3559703915232, (-433), (-433));
      Node node1 = Node.newNumber((double) 15);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      assertNotNull(node_NodeMismatch0);
      assertEquals(0, node1.getChildCount());
      assertTrue(node0.isNumber());
      assertTrue(node1.isNumber());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertNull(node_NodeMismatch0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(999, (String) null, 200, 200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.setString("");
      assertEquals(2585, node0.getType());
      assertEquals(2514952, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$11");
      Node node1 = Node.newString("RcFXp8k", 29, (-1219));
      boolean boolean0 = node0.isEquivalentTo(node1, false, false, false);
      assertTrue(node1.isString());
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(100, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(1, node0, 0, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("unexpected prop id ");
      Node node1 = new Node((-1358), node0, node0, node0, 0, 0);
      Node node2 = null;
      try {
        node2 = new Node(0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("-6ag9za51x?2`{PD0r");
      Node node1 = new Node(0, node0, node0, node0, node0, 1264, 0);
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = new Node(47, 53, 47);
      Node node1 = new Node(53, node0, 30, 12);
      node1.removeChild(node0);
      node1.addChildToFront(node0);
      Node node2 = null;
      try {
        node2 = new Node(37, node0, node0, node0, 43, 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = Node.newNumber((double) 41);
      Node node1 = new Node(2246, node0, (-1425), 51);
      Node node2 = null;
      try {
        node2 = new Node(41, node1, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(49, node0);
      Node node2 = null;
      try {
        node2 = new Node(1, node1, node1, node0, 52, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString(0, "pt42_/zn*ssy", 0, 301);
      Node node1 = new Node(55, node0, 4, 0);
      Node node2 = null;
      try {
        node2 = new Node(0, node0, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(3014, 0, 3014);
      Node node1 = new Node(0, node0, node0, 30, 55);
      Node node2 = null;
      try {
        node2 = new Node(3014, node1, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(301, node0, node0, node0, 48, 57);
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2485));
      Node node1 = new Node((-2485), node0, 47, 47);
      Node node2 = null;
      try {
        node2 = new Node(0, node1, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString(0, "", 0, 0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(57, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      Node node0 = Node.newNumber((double) (-1362));
      nodeArray0[0] = node0;
      Node node1 = new Node(53, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(43, nodeArray0, 43, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(" Bb7c=t~", (-1777), 6);
      Node node1 = new Node(42, node0, node0, 12, (-2245));
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = null;
      try {
        node2 = new Node(49, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node((-881), 1037, (-881));
      assertEquals((-881), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      
      nodeArray0[0] = node0;
      Node node1 = Node.newString(12, "{QHIy(^%MB]5P&R#^#c");
      assertEquals(12, node1.getType());
      
      nodeArray0[1] = node1;
      Node node2 = new Node(4, nodeArray0, 48, 1316);
      assertEquals(197924, node2.getSourcePosition());
      assertTrue(node2.isReturn());
      assertEquals(2, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node((-556), 306, (-2714));
      boolean boolean0 = node0.hasChildren();
      assertEquals((-556), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = new Node(0, node0, 30, 12);
      boolean boolean0 = node1.hasChildren();
      assertEquals(122892, node1.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(0, node1.getType());
      assertEquals(47, node0.getType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newNumber(824.9375083);
      // Undeclared exception!
      try { 
        node0.removeChild(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(155, "sPo5?$i4|b195w ~<t", 16, 155);
      Node node1 = new Node(56, node0, 1, 49);
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      linkedList0.add(jSType0);
      linkedList0.add(jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node0, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(")N0-$Oe{T9)x37>77");
      Node node1 = node0.getChildAtIndex((-1259));
      assertNull(node1);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newNumber(15.0, 1610612736, 47);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString(0, "0T");
      Node node1 = new Node(9, node0, node0, node0, node0, 1, 56);
      Node node2 = new Node(2178, node1, node1);
      node2.getIndexOfChild(node0);
      assertEquals(4152, node1.getSourcePosition());
      assertEquals(0, node0.getType());
      assertEquals(2178, node2.getType());
      assertEquals(9, node1.getType());
      assertTrue(node2.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node2.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(38, "RD ;R");
      Node node1 = new Node(153, node0, node0, node0, 5048, 110);
      int int0 = node1.getIndexOfChild(node0);
      assertEquals(0, int0);
      assertEquals(20676718, node1.getSourcePosition());
      assertTrue(node0.isName());
      assertEquals(153, node1.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node((-2772));
      Node node1 = new Node(40, 1, 52);
      Node node2 = new Node((-2772), node0, node1);
      assertEquals((-2772), node2.getType());
      assertTrue(node2.hasMoreThanOneChild());
      
      Node node3 = node0.getLastSibling();
      assertEquals((-2772), node0.getType());
      assertEquals(40, node3.getType());
      assertEquals(4148, node3.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = new Node(0, node0, 30, 12);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber((-1275.8539), 91, (-1342));
      Node node1 = Node.newString((-369), "O]gVKGwyrEuNB*");
      node0.addChildrenToFront(node1);
      node0.addChildToFront(node0);
      assertEquals(2, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(13, node0, node0, node0, 55, (-1313));
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString((-244), "ASSIGN_URUH", (-2341), (-244));
      Node node1 = Node.newString(36, "ASSIGN_URUH");
      node0.addChildrenToBack(node1);
      Node node2 = node1.detachFromParent();
      Node node3 = new Node((-244), node0, 1, 0);
      assertEquals(0, node3.getCharno());
      
      Node node4 = node3.srcref(node2);
      node4.addChildrenToFront(node1);
      assertEquals((-244), node3.getType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(2178, node0, node0, node0, node0, 38, 0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(117, "enum{", (-3717), 117);
      Node node1 = new Node(117, node0, node0, node0);
      node1.addChildBefore(node1, node0);
      node1.hasOneChild();
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1.0);
      Node node2 = new Node(100, node0, node1, node0);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newNumber(2786.5945850754924);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(103, 968, 0);
      Node node1 = new Node(103, node0, node0, node0, node0);
      node1.addChildrenAfter(node1, node0);
      assertEquals(2, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString("", (-1), 0);
      Node node1 = new Node(56, node0, node0, 31, 51);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString((-244), "ASSIGN_URUH", (-2341), (-244));
      Node node1 = Node.newString(36, "ASSIGN_URUH");
      node0.addChildrenToBack(node1);
      assertTrue(node0.hasOneChild());
      
      node1.detachFromParent();
      Node node2 = new Node((-244), node0, 1, 0);
      node2.addChildrenToFront(node1);
      node2.removeChild(node1);
      assertFalse(node0.isInstanceOf());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString("The new child node already has a parent.");
      Node node1 = Node.newString("", 15, 12);
      Node node2 = new Node(147, node0, node1, 147, (-1870));
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString((-862048943), "wC9D4NKX}]_e]N");
      Node node1 = new Node((-3796), node0, 32, 8);
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(0, "unknown");
      Node node1 = new Node(0, node0, node0, node0);
      node1.replaceChild(node0, node1);
      assertEquals(0, node1.getType());
      assertEquals(0, node0.getType());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(3683, (-398), (-398));
      Node node1 = new Node(3683, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node((-644), 39, 39);
      Node node1 = Node.newNumber((double) 1);
      node1.addChildToFront(node0);
      node1.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("", 472, (-991));
      Node node1 = new Node((-1313), node0, 38, (-4331));
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(47);
      node0.setVarArgs(true);
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(47, 53, 47);
      Node node1 = node0.clonePropsFrom(node0);
      assertEquals(217135, node1.getSourcePosition());
      assertTrue(node1.isRegExp());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(2149);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 2149
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString(39, "S3N1il[fW%hpf", 57, 32);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(40, 40, (-1827));
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(40, node0, node0, node0, node0, 38, 0);
      // Undeclared exception!
      try { 
        node1.setString("STRING ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newString("");
      String string0 = node0.toString(false, false, false);
      assertEquals(40, node0.getType());
      assertEquals("STRING ", string0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("dTYS", 13, 20);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node0.setJSType(templateType0);
      try { 
        node0.setDouble(312.7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING dTYS 13 : Object#Element is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newNumber(1351.35597, (-433), (-433));
      node0.setSourceFileForTesting("jvdoc_in(o");
      String string0 = node0.getSourceFileName();
      assertNotNull(string0);
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString("4h");
      node0.setSourceFileForTesting("4h");
      node0.isFromExterns();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(47, 53, 47);
      node0.isFromExterns();
      assertEquals(217135, node0.getSourcePosition());
      assertEquals(47, node0.getType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.setSourceFileForTesting("missing prop: ");
      int int0 = node0.getSourceOffset();
      assertEquals(614, node0.getLineno());
      assertEquals((-2147483640), int0);
      assertEquals(2585, node0.getType());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      node0.getSourceOffset();
      assertEquals(4, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber((-536.7676793062502), (-615), (-615));
      node0.setLineno(124);
      assertEquals(124, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(45, node0, node0, 2882, 38);
      node1.setSourceEncodedPositionForTree(2);
      assertEquals(2, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString((-244), "", (-2341), (-244));
      Node node1 = new Node(0, node0, node0, node0, node0, 23, 57);
      node1.children();
      assertEquals(94265, node1.getSourcePosition());
      assertEquals((-244), node0.getType());
      assertEquals(0, node1.getType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.children();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, false, jSTypeArray0);
      // Undeclared exception!
      try { 
        modificationVisitor0.caseFunctionType(functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      // Undeclared exception!
      try { 
        node0.getAncestor((-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node((-556), 306, (-2714));
      node0.addChildToFront(node0);
      node0.getAncestor(2901);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      node0.hasOneChild();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString(117, "enum{", (-3717), 117);
      Node node1 = new Node(117, node0, node0, node0);
      boolean boolean0 = node1.hasOneChild();
      assertEquals(117, node0.getType());
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(117, node1.getType());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      boolean boolean0 = node0.hasMoreThanOneChild();
      assertFalse(boolean0);
      assertEquals(35353, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      Node node1 = new Node(57, node0, node0, node0, node0);
      boolean boolean0 = node1.hasMoreThanOneChild();
      assertEquals(2585, node0.getType());
      assertEquals(2514952, node0.getSourcePosition());
      assertEquals(57, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      Node node1 = node0.cloneNode();
      Node node2 = new Node(57, node0, node0, node1, node1);
      boolean boolean0 = node2.hasMoreThanOneChild();
      assertTrue(boolean0);
      assertEquals(2514952, node1.getSourcePosition());
      assertEquals(2585, node1.getType());
      assertEquals(57, node2.getType());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.hasChild(node0);
      assertEquals(2514952, node0.getSourcePosition());
      assertEquals(2585, node0.getType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node((-2772));
      Node node1 = new Node(40, 1, 52);
      Node node2 = new Node((-2772), node0, node1);
      boolean boolean0 = node2.hasChild(node1);
      assertTrue(boolean0);
      assertEquals(4148, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertEquals((-2772), node0.getType());
      assertEquals((-2772), node2.getType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(154, node0, 84, 73);
      String string0 = node1.checkTreeEquals(node1);
      assertEquals(344137, node1.getSourcePosition());
      assertEquals(154, node0.getType());
      assertNull(string0);
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.isStringKey());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(154, node0, 84, 73);
      Node node2 = new Node(154, node1);
      assertEquals(1, node2.getChildCount());
      
      String string0 = node2.checkTreeEquals(node1);
      assertEquals(73, node1.getCharno());
      assertEquals("Node tree inequality:\nTree1:\nSTRING_KEY\n    STRING_KEY 84\n        STRING_KEY\n\n\nTree2:\nSTRING_KEY 84\n    STRING_KEY\n\n\nSubtree1: STRING_KEY 84\n    STRING_KEY\n\n\nSubtree2: STRING_KEY\n", string0);
      assertTrue(node2.isStringKey());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("F", 472, (-991));
      Node node1 = new Node(42, node0, node0, 48, 30);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(196638, node1.getSourcePosition());
      assertTrue(node1.isThis());
      assertNull(node_NodeMismatch0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(2124, 56, 54);
      Node node1 = new Node(54, node0);
      Node node2 = new Node(54, node1, 8, 2);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
      assertEquals(32770, node2.getSourcePosition());
      assertEquals(229430, node0.getSourcePosition());
      assertNotNull(node_NodeMismatch0);
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(54, node2.getType());
      assertEquals(2124, node0.getType());
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
      assertNull(node_NodeMismatch0);
      assertEquals(0, node0.getChildCount());
      assertEquals(102, node0.getType());
      assertEquals(417894, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      node0.setType(37);
      node0.checkTreeEqualsImpl(node0);
      assertTrue(node0.isCall());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(47, 53, 47);
      Node node1 = new Node(47, node0, node0, 0, 49);
      boolean boolean0 = node1.isEquivalentToTyped(node1);
      assertEquals(1, node1.getChildCount());
      assertEquals(47, node1.getType());
      assertTrue(node0.isRegExp());
      assertEquals(49, node1.getSourcePosition());
      assertTrue(boolean0);
      assertEquals(217135, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newString(155, "com.google.javascript.rhino.Node$NodeMismatch");
      Node node1 = new Node(0, node0, 8, 39);
      boolean boolean0 = node1.isEquivalentToShallow(node1);
      assertEquals(32807, node1.getSourcePosition());
      assertEquals(0, node1.getType());
      assertTrue(node0.isCast());
      assertTrue(boolean0);
      assertEquals(1, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      String string0 = node0.getQualifiedName();
      assertEquals(4, node0.getType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      String string0 = node0.getQualifiedName();
      assertNotNull(string0);
      assertEquals(172074, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(33);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(154);
      boolean boolean0 = node0.isQualifiedName();
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertTrue(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("F", 472, (-991));
      Node node1 = new Node(42, node0, node0, 48, 30);
      boolean boolean0 = node1.isQualifiedName();
      assertEquals(196638, node1.getSourcePosition());
      assertTrue(node0.isString());
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(33);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber((-536.7676793062502), (-615), (-615));
      node0.isUnscopedQualifiedName();
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(64, 791, 0);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(42, 42, 42);
      node0.removeFirstChild();
      assertEquals(172074, node0.getSourcePosition());
      assertTrue(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node((-556), 306, (-2714));
      Node node1 = new Node(0, node0, node0);
      node1.removeFirstChild();
      assertFalse(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = new Node(47, node0, node0, 0, 49);
      assertTrue(node1.hasChildren());
      
      node1.removeChildren();
      assertEquals(49, node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString(155, "com.google.javascript.rhino.Node$NodeMismatch");
      Node node1 = new Node(0, node0, 8, 39);
      assertTrue(node1.hasOneChild());
      
      node1.detachChildren();
      assertEquals(8, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber(1.6751043271612773);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber(1.0);
      Node node2 = new Node(100, node0, node1, node0);
      Node node3 = node1.srcrefTree(node0);
      node2.removeChildAfter(node3);
      assertFalse(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      linkedList0.add(jSType0);
      linkedList0.add(jSType0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = node0.cloneTree();
      assertEquals(2, node1.getChildCount());
      assertEquals(83, node1.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.setSourceFileForTesting("O]gVKGwyrEuNB*");
      Node node1 = node0.copyInformationFrom(node0);
      assertEquals(2514952, node1.getSourcePosition());
      assertEquals(2585, node1.getType());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      Node node1 = node0.copyInformationFromForTree(node0);
      assertEquals((-1), node1.getCharno());
      assertEquals(4, node1.getType());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber((-248.83918726), (-1227), 43);
      node0.addChildToBack(node0);
      // Undeclared exception!
      node0.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = Node.newString("", (-1), 0);
      Node node1 = new Node(56, node0, node0, 31, 51);
      assertEquals(51, node1.getCharno());
      
      node1.useSourceInfoFromForTree(node0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newString((-1053), "Fo+}OPu5+fp", (-1053), (-1053));
      node0.setSourceFileForTesting("Fo+}OPu5+fp");
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      assertEquals((-1053), node1.getType());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(47);
      Node node1 = new Node(47, node0, node0, 0, 49);
      assertEquals(0, node1.getLineno());
      
      node1.useSourceInfoIfMissingFromForTree(node0);
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.addSuppression("");
      node0.addSuppression("0Kb-z%%");
      assertEquals(2585, node0.getType());
      assertEquals(2514952, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(83);
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertEquals(83, node_SideEffectFlags0.valueOf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      boolean boolean0 = node0.mayMutateArguments();
      assertTrue(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getLineno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      Node node1 = new Node(40, 40, (-1827));
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = jSTypeRegistry0.getObjectElementKey();
      node_NodeMismatch0.equals(templateType0);
      assertEquals(4, node0.getType());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      boolean boolean0 = node0.isAdd();
      assertEquals(417894, node0.getSourcePosition());
      assertTrue(node0.isInc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newString(21, "");
      boolean boolean0 = node0.isAdd();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      node0.isAnd();
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(101);
      boolean boolean0 = node0.isAnd();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      boolean boolean0 = node0.isArrayLit();
      assertFalse(boolean0);
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$11");
      node0.type = 63;
      boolean boolean0 = node0.isArrayLit();
      assertEquals(63, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      node0.isAssign();
      assertEquals(35353, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      boolean boolean0 = node0.isAssignAdd();
      assertFalse(boolean0);
      assertEquals(4, node0.getType());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isBlock();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString(125, "t;f", 1754, 125);
      boolean boolean0 = node0.isBlock();
      assertTrue(boolean0);
      assertEquals(7184509, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      boolean boolean0 = node0.isBreak();
      assertFalse(boolean0);
      assertEquals(2514952, node0.getSourcePosition());
      assertEquals(2585, node0.getType());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      node0.isCall();
      assertEquals(35353, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      node0.isCase();
      assertTrue(node0.isInc());
      assertEquals(417894, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isCast();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString(2585, "", 614, 8);
      node0.isCatch();
      assertEquals(2585, node0.getType());
      assertEquals(2514952, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(120, "k`WV!-dXnMey~8nVwHa", 120, 120);
      boolean boolean0 = node0.isCatch();
      assertEquals(491640, node0.getSourcePosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      boolean boolean0 = node0.isComma();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isContinue();
      assertTrue(node0.isString());
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(117, "enum{", (-3717), 117);
      boolean boolean0 = node0.isContinue();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      node0.isDebugger();
      assertEquals(102, node0.getType());
      assertEquals(417894, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$11");
      boolean boolean0 = node0.isDec();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      node0.isDefaultCase();
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      boolean boolean0 = node0.isDelProp();
      assertEquals(417894, node0.getSourcePosition());
      assertTrue(node0.isInc());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = Node.newString(31, "", 4194304, 13);
      boolean boolean0 = node0.isDelProp();
      assertTrue(boolean0);
      assertEquals(13, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString(117, "enum{", (-3717), 117);
      boolean boolean0 = node0.isDo();
      assertFalse(boolean0);
      assertEquals(117, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(154);
      boolean boolean0 = node0.isEmpty();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newNumber((-1275.8539), 91, (-1342));
      boolean boolean0 = node0.isExprResult();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber((-1640.0803891450157));
      node0.setType(130);
      boolean boolean0 = node0.isExprResult();
      assertEquals(130, node0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isFalse();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString(120, "k`WV!-dXnMey~8nVwHa", 120, 120);
      boolean boolean0 = node0.isFor();
      assertEquals(491640, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(120, node0.getType());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isGetterDef();
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isGetElem();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      node0.isGetProp();
      assertEquals(35353, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isHook();
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(1382);
      boolean boolean0 = node0.isIf();
      assertEquals(1382, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      node0.isIn();
      assertTrue(node0.isReturn());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      node0.isInc();
      assertEquals(35353, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      boolean boolean0 = node0.isInc();
      assertTrue(boolean0);
      assertEquals(417894, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber((double) 627, 9, (-3717));
      boolean boolean0 = node0.isInstanceOf();
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber((-248.83918726), (-1227), 43);
      boolean boolean0 = node0.isLabel();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = new Node(33);
      boolean boolean0 = node0.isLabelName();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      node0.isName();
      assertTrue(node0.isString());
      assertEquals(35353, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = new Node(38);
      boolean boolean0 = node0.isName();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isNE();
      assertFalse(boolean0);
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(103, 968, 0);
      boolean boolean0 = node0.isNew();
      assertEquals(3964928, node0.getSourcePosition());
      assertFalse(boolean0);
      assertEquals(103, node0.getType());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isNot();
      assertFalse(boolean0);
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(154);
      boolean boolean0 = node0.isNull();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(154, node0.getType());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString("F", 472, (-991));
      boolean boolean0 = node0.isNumber();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newNumber(2786.5945850754924);
      boolean boolean0 = node0.isNumber();
      assertTrue(boolean0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isObjectLit();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getLineno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isOr();
      assertEquals(40, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(458, 458, 458);
      boolean boolean0 = node0.isParamList();
      assertFalse(boolean0);
      assertEquals(458, node0.getType());
      assertEquals(1876426, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      boolean boolean0 = node0.isParamList();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = node0.isRegExp();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = node0.isRegExp();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString(120, "k`WV!-dXnMey~8nVwHa", 120, 120);
      node0.isReturn();
      assertTrue(node0.isCatch());
      assertEquals(491640, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      boolean boolean0 = node0.isReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(33);
      boolean boolean0 = node0.isScript();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = new Node(154);
      boolean boolean0 = node0.isSetterDef();
      assertFalse(boolean0);
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newString("F", 472, (-991));
      Node node1 = new Node(42, node0, node0, 48, 30);
      node1.isString();
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertEquals(196638, node1.getSourcePosition());
      assertEquals(42, node1.getType());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isString();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.isStringKey();
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      boolean boolean0 = node0.isSwitch();
      assertFalse(boolean0);
      assertEquals(4, node0.getType());
      assertEquals((-1), node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      Node node1 = new Node(110, node0, node0, node0);
      boolean boolean0 = node1.isSwitch();
      assertTrue(boolean0);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(4, node0.getType());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isThis();
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = Node.newString(102, "k`WV!-dXnMey~8nVwHa", 102, 102);
      node0.isThrow();
      assertEquals(102, node0.getType());
      assertEquals(417894, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node node1 = new Node(49, node0);
      boolean boolean0 = node1.isThrow();
      assertTrue(boolean0);
      assertTrue(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertTrue(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("");
      boolean boolean0 = node0.isTrue();
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString(31, "", 4194304, 13);
      boolean boolean0 = node0.isTry();
      assertEquals(13, node0.getSourcePosition());
      assertEquals(31, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newString(4, "", (-307), (-1827));
      boolean boolean0 = node0.isTypeOf();
      assertFalse(boolean0);
      assertEquals(4, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      boolean boolean0 = node0.isVar();
      assertFalse(boolean0);
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isVoid();
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newString("", 8, 2585);
      boolean boolean0 = node0.isWhile();
      assertFalse(boolean0);
      assertEquals(35353, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = Node.newString(31, "", 4194304, 13);
      boolean boolean0 = node0.isWith();
      assertEquals(31, node0.getType());
      assertFalse(boolean0);
      assertEquals(13, node0.getSourcePosition());
  }
}
