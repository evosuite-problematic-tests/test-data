/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 08:31:02 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodePrinter;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodePrinter_ESTest extends CodePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newNumber((-2829.49478));
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      Charset charset0 = Charset.defaultCharset();
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setOutputCharset(charset0);
      assertSame(codePrinter_Builder1, codePrinter_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newNumber(5630.6580839076);
      Node node1 = new Node((-1276), node0, node0, node0, 128, 0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      codePrinter_Builder0.setSourceMap(sourceMap0);
      node0.setSourceFileForTesting("6\"Wx");
      String string0 = codePrinter_Builder0.build();
      assertEquals("5630.6580839076", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodePrinter codePrinter0 = new CodePrinter();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = Node.newNumber((-2976.457693232), 0, 0);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setLineLengthThreshold((-1418));
      String string0 = codePrinter_Builder0.build();
      assertEquals("-2976.457693232", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = Node.newNumber(5646.08163382121);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      codePrinter_Builder0.setSourceMap(sourceMap0);
      String string0 = codePrinter_Builder0.build();
      assertEquals("5646.08163382121", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = Node.newNumber(5646.08163382121);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      codePrinter_Builder0.setSourceMap(sourceMap0);
      node0.setSourceFileForTesting("");
      String string0 = codePrinter_Builder0.build();
      assertEquals("5646.08163382121", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newNumber(5630.6580839076);
      Node node1 = new Node((-1276), node0, node0, node0, 128, 0);
      node0.useSourceInfoIfMissingFromForTree(node1);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
      codePrinter_Builder0.setSourceMap(sourceMap0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      codePrinter_Builder0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
      node0.setSourceFileForTesting("6\"Wx");
      String string0 = codePrinter_Builder0.build();
      assertEquals("5630.6580839076", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = Node.newString("", 59, 59);
      Node node1 = new Node(4, node0, node0, node0, node0);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setPrettyPrint(true);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setLineLengthThreshold(2);
      String string0 = codePrinter_Builder1.build();
      assertEquals("return\"\";\n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = Node.newString("", 59, 59);
      Node node1 = new Node(32, node0, node0, 54, 42);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setPrettyPrint(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("typeof\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newNumber((-0.30790672561742843));
      Node node1 = new Node(36, 2, 52);
      Node node2 = new Node(51, node0, node0, node1);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node2);
      codePrinter_Builder0.setPrettyPrint(true);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newNumber((-0.30790672561742843));
      Node node1 = new Node(36, 2, 52);
      Node node2 = new Node(15, node0, node1, 41, 30);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node2);
      codePrinter_Builder0.setPrettyPrint(true);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newNumber(5646.08163382121);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setLineLengthThreshold(36);
      codePrinter_Builder1.setTagAsStrict(true);
      codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("'use strict';5646.08163382121;\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newNumber((-0.30790672561742843));
      Node node1 = new Node(49, node0, node0, node0, 43, 4);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw-0.30790672561742843;", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber((-0.30790672561742843));
      Node node1 = new Node(49, node0, node0, node0, 43, 4);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
      codePrinter_Builder0.setLineBreak(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("throw-0.30790672561742843;", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = Node.newNumber((-0.30790672561742843));
      Node node1 = new Node(36, 2, 52);
      Node node2 = new Node(51, node0, node0, node1);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node2);
      codePrinter_Builder0.setLineLengthThreshold(15);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newNumber((-2976.457693232), 0, 0);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("-2976.457693232", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = new Node((-2376));
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.setSourceMapDetailLevel((SourceMap.DetailLevel) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder((Node) null);
      // Undeclared exception!
      try { 
        codePrinter_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot build without root node being specified
         //
         verifyException("com.google.javascript.jscomp.CodePrinter$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = Node.newNumber(5646.08163382121);
      CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
      codePrinter_Builder0.setOutputTypes(true);
      String string0 = codePrinter_Builder0.build();
      assertEquals("5646.08163382121", string0);
  }
}
