/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 14:05:50 GMT 2018
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.sinh();
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.INF.asin();
      assertSame(complex3, complex1);
      
      Complex complex4 = Complex.valueOf((-1.222610751712412), (double) (-3887));
      assertFalse(complex4.equals((Object)complex3));
      assertEquals((-1.222610751712412), complex4.getReal(), 0.01);
      assertEquals((-3887.0), complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.I.subtract(1.5707963267948966);
      assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
      
      List<Complex> list0 = complex0.ZERO.nthRoot(4973);
      assertEquals(4973, list0.size());
      
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex0.add(1.5707963267948966);
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.cos();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.pow((double) 4973);
      Complex complex7 = complex6.I.conjugate();
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      
      complex3.equals((Object) null);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex7));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.acos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.6674572160283838, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.multiply(Double.NaN);
      Complex complex3 = complex1.I.tanh();
      complex0.getReal();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = Complex.valueOf((-2151.6));
      Complex complex6 = complex5.exp();
      Complex complex7 = complex3.sinh();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.9999103740052037, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.acos();
      assertEquals(1.5707963267948966, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex6.tan();
      Complex complex10 = complex1.subtract(complex9);
      assertSame(complex10, complex4);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.equals((Object)complex2));
      assertEquals(0.0, complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(7);
      assertEquals(7.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.NaN.tan();
      assertTrue(complex2.isNaN());
      
      Complex complex3 = complex0.divide(6.8190133180135345E289);
      double double0 = complex3.abs();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(1.4664878236244782E-290, complex3.getImaginary(), 0.01);
      assertEquals(1.4664878236244782E-290, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(1441);
      assertEquals(1441, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1.7320508075688772, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      assertSame(complex2, complex1);
      
      Complex complex3 = new Complex(20.0);
      Complex complex4 = complex0.add(complex3);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.equals((Object)complex3));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      assertTrue(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-2368.66151653545));
      Complex complex1 = complex0.add((-782.20913300303));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-3150.8706495384804), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.conjugate();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-3545.0847059));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3763.52));
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-3763.52), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.exp();
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      
      complex2.equals(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex4.INF.add(1679.86744508);
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex2.multiply(complex4);
      Complex complex8 = complex4.subtract(complex7);
      assertEquals(1.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.ZERO.sqrt();
      assertFalse(complex10.equals((Object)complex5));
      
      Complex complex11 = complex9.log();
      double double0 = complex11.getReal();
      assertEquals((-4.313381396503252), double0, 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.cosh();
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.acos();
      complex3.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex3, complex4);
      
      Complex complex5 = complex2.sin();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-896));
      assertEquals((-896.0), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(6.716441526213986E-8, 6.716441526213986E-8);
      complex0.ONE.createComplex(6.716441526213986E-8, (-3392));
      Complex complex1 = complex0.INF.multiply((-3392));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.subtract(complex2);
      double double0 = complex0.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex4 = complex3.ONE.tanh();
      assertEquals(0.7615941559557649, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(3145);
      assertEquals(3145, list0.size());
      
      Complex complex5 = complex3.sqrt1z();
      assertEquals(0.7861513777574233, complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1887.7117246237297);
      Complex complex1 = (Complex)complex0.INF.readResolve();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.cos();
      assertEquals((-0.9266255083389955), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(425.9171458, 425.9171458);
      Complex complex1 = complex0.multiply(425.9171458);
      assertFalse(complex0.isInfinite());
      assertEquals(425.9171458, complex0.getReal(), 0.01);
      assertEquals(181405.41508641848, complex1.getReal(), 0.01);
      assertEquals(181405.41508641848, complex1.getImaginary(), 0.01);
      assertEquals(425.9171458, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      try { 
        complex1.INF.nthRoot((-1750));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,750
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.sqrt1z();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(2119.852566958);
      Complex complex1 = complex0.ZERO.multiply(2119.852566958);
      complex1.INF.cos();
      Complex complex2 = complex0.INF.reciprocal();
      Complex complex3 = complex2.INF.multiply(2119.852566958);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      
      complex0.NaN.abs();
      Complex complex4 = complex0.asin();
      assertEquals((-8.35224894628746), complex4.getImaginary(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(2119.852566958, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2224.561957, (-1.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.I.reciprocal();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      
      Complex complex3 = (Complex)complex1.I.readResolve();
      assertFalse(complex3.equals((Object)complex2));
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      complex0.hashCode();
      double double0 = complex1.getImaginary();
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      
      boolean boolean0 = complex0.isNaN();
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(2224.561957, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex1 = complex0.ZERO.sqrt();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.ZERO.subtract(Double.NaN);
      Complex complex3 = complex2.ONE.reciprocal();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex4.I.add(complex2);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertSame(complex5, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      
      double double1 = complex0.getArgument();
      assertTrue(complex0.equals((Object)complex3));
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex1.I.asin();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.multiply((-1.802510054588344E-7));
      complex3.ONE.negate();
      Complex complex4 = complex3.createComplex((-1.802510054588344E-7), (-1.802510054588344E-7));
      assertEquals((-1.802510054588344E-7), complex4.getImaginary(), 0.01);
      assertSame(complex3, complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.5685313670430624E-8);
      Complex complex1 = complex0.subtract(1592.6163);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1592.6162999443145), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = Complex.NaN;
      double double0 = complex3.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex4 = complex0.INF.add(complex3);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex6.multiply(complex3);
      assertSame(complex7, complex6);
      
      Complex complex8 = complex2.sin();
      assertFalse(complex8.equals((Object)complex1));
      assertSame(complex8, complex4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2.2728753031387152E-10));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.ONE.sinh();
      complex2.ZERO.getArgument();
      complex2.NaN.multiply((-2242));
      Complex complex3 = complex0.pow((-837.376784659091));
      Complex complex4 = complex2.sqrt1z();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.6173312283870106, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.subtract(complex3);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(2.2728753031387152E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(1690.68, 1690.68);
      assertEquals(1690.68, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.ZERO.tan();
      Complex complex4 = complex3.NaN.atan();
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex0));
      
      complex3.ZERO.getArgument();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      
      double double0 = complex1.getImaginary();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, double0, 0.01);
      assertFalse(complex1.equals((Object)complex3));
      
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-4.588749093664028E-9));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      double double0 = complex2.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = complex1.getImaginary();
      assertEquals(0.0, double1, 0.01);
      
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.add(0.0);
      assertSame(complex5, complex3);
      assertFalse(complex1.isInfinite());
      assertSame(complex2, complex4);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(671.1512);
      Complex complex2 = complex1.INF.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.cosh();
      assertSame(complex4, complex2);
      
      Complex complex5 = Complex.valueOf(671.1512);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1597.83247702), (-1597.83247702));
      complex0.isInfinite();
      Complex complex1 = complex0.tan();
      double double0 = complex0.abs();
      assertEquals(2259.6763594018807, double0, 0.01);
      
      Complex complex2 = complex1.I.conjugate();
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      boolean boolean0 = complex0.equals(",=xP#]aCc*m[8fDMz?");
      assertFalse(boolean0);
      
      Complex complex3 = complex1.negate();
      boolean boolean1 = complex3.isInfinite();
      assertFalse(complex3.equals((Object)complex1));
      assertEquals((-1597.83247702), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.asin();
      complex0.toString();
      Complex complex3 = complex1.reciprocal();
      complex1.I.getArgument();
      complex2.getArgument();
      complex1.ONE.getField();
      Complex complex4 = complex3.createComplex(0.0, 0.0);
      complex4.ONE.createComplex(0.0, 1.5707963267948966);
      complex0.equals(complex1);
      complex2.sin();
      complex0.exp();
      try { 
        complex2.nthRoot((-769));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -769
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(612.51, 612.51);
      Complex complex1 = complex0.createComplex(612.51, (-2940.18));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.I.exp();
      Complex.valueOf(0.0, (-79.4896));
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex1.ZERO.reciprocal();
      complex5.ONE.abs();
      assertTrue(complex5.isInfinite());
      
      Complex complex6 = Complex.valueOf(1.3119103908538818, 2.2273635587196807E-39);
      complex6.ONE.subtract(612.51);
      Complex complex7 = complex3.NaN.pow(complex6);
      assertSame(complex7, complex4);
      
      complex1.isNaN();
      complex2.getImaginary();
      complex3.ONE.multiply((-2940.18));
      Complex complex8 = complex0.subtract(1.3119103908538818);
      Complex complex9 = complex8.sinh();
      assertEquals((-1.3700227314524547E265), complex9.getReal(), 0.01);
      assertEquals(1.3824607203418066E264, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex8.I.acos();
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      
      Complex complex11 = complex2.ONE.cosh();
      assertEquals(1.5430806348152437, complex11.getReal(), 0.01);
      
      Complex complex12 = complex2.multiply((-1435.0));
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex3.conjugate();
      complex13.hashCode();
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex3.getReal(), 0.01);
      
      Complex complex14 = complex2.createComplex(1.3119103908538818, 2.2273635587196807E-39);
      complex2.hashCode();
      Complex complex15 = complex1.multiply(0);
      Complex complex16 = complex8.tan();
      assertEquals(1.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex15.cos();
      Complex complex18 = complex14.acos();
      assertTrue(complex14.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex17));
      assertEquals(2.622954095872618E-39, complex18.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(Double.NaN);
      Complex complex2 = complex0.multiply(Double.NaN);
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex3 = complex0.pow(complex1);
      List<Complex> list0 = complex2.nthRoot(1);
      assertTrue(list0.contains(complex3));
      assertSame(complex2, complex3);
      
      Complex complex4 = complex1.pow(1364.31453699);
      assertSame(complex4, complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.subtract(complex1);
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getArgument();
      complex0.I.readResolve();
      Complex complex1 = complex0.multiply((-1648));
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex0.isNaN();
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex2.sinh();
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex1.acos();
      assertEquals(3.141592653589793, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-8.100464798978967), complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.tanh();
      double double1 = 1.4436686038970947;
      Complex complex1 = complex0.I.cosh();
      try { 
        complex1.I.nthRoot((-3850));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,850
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getField();
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.INF.subtract(complex0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.ZERO.divide(complex1);
      assertTrue(complex1.equals((Object)complex3));
      
      Complex complex6 = complex3.NaN.divide((double) 1);
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex3.isInfinite());
      assertNotSame(complex6, complex4);
      assertEquals(2.718281828459045, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex7 = complex0.multiply(0);
      double double0 = complex7.getArgument();
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.equals((Object)complex5));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.pow((-1199.615804412));
      complex3.NaN.divide(complex0);
      Complex complex4 = complex3.I.subtract((-1199.615804412));
      assertEquals(1199.615804412, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.NaN.cos();
      complex7.tanh();
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      
      complex0.add(complex2);
      Complex complex8 = complex6.atan();
      complex8.NaN.hashCode();
      assertEquals(1.2261911708835171, complex8.getImaginary(), 0.01);
      assertEquals(1.1332977722347788E-16, complex8.getReal(), 0.01);
      
      complex2.cos();
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(93.7018);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.createComplex((-1024.33121643), (-1024.33121643));
      assertEquals((-1024.33121643), complex2.getReal(), 0.01);
      assertEquals((-1024.33121643), complex2.getImaginary(), 0.01);
      
      Complex complex3 = Complex.valueOf(5.4445606140746644E-8);
      assertEquals(5.4445606140746644E-8, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.divide(complex1);
      assertFalse(complex0.isNaN());
      assertTrue(complex4.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      assertTrue(complex1.isNaN());
      
      String string0 = complex0.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex2 = complex0.ZERO.add(1848.1297230752646);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.multiply(1848.1297230752646);
      Complex complex4 = complex0.sqrt1z();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.sqrt1z();
      assertEquals(1848.1294525314654, complex5.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1431.65551539);
      Complex complex2 = complex1.createComplex((-20.0), Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.add(complex3);
      assertTrue(complex1.isInfinite());
      assertTrue(complex4.isInfinite());
      assertEquals((-20.0), complex2.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex2));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-419.4103));
      List<Complex> list0 = complex0.ZERO.nthRoot(1);
      assertEquals(1, list0.size());
      
      Complex complex1 = new Complex((-363.0));
      List<Complex> list1 = complex1.INF.nthRoot(1442);
      assertEquals(1, list1.size());
      
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(152245.9389, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.tanh();
      complex3.getField();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.0), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.ONE.exp();
      Complex complex2 = complex0.ZERO.acos();
      complex0.NaN.subtract(complex1);
      Complex.valueOf(1770.987973, (-1.0));
      Complex complex3 = complex0.atan();
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.asin();
      assertNotSame(complex5, complex4);
      
      Complex complex6 = complex2.exp();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(4.810477380965351, complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.INF.sinh();
      Complex complex2 = complex1.I.atan();
      double double0 = complex1.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex3 = complex0.sin();
      Complex complex4 = (Complex)complex3.readResolve();
      complex3.equals(complex4);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.tan();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.subtract(3.845535085273936E-242);
      assertSame(complex8, complex2);
      
      Complex complex9 = complex0.multiply(1628);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.sqrt1z();
      complex2.INF.toString();
      Complex complex3 = Complex.valueOf(1115.12587189182, Double.NaN);
      complex3.ONE.toString();
      Complex complex4 = complex1.ZERO.reciprocal();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex7.INF.multiply((-459));
      Complex complex9 = complex7.INF.pow(complex4);
      Complex complex10 = complex6.INF.pow(0.0);
      Complex complex11 = complex0.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      
      Complex complex12 = complex0.INF.add(complex2);
      Complex complex13 = complex6.sqrt();
      String string0 = complex6.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex13.pow(complex10);
      assertTrue(complex10.equals((Object)complex7));
      
      complex5.multiply(0.0);
      assertTrue(complex5.isInfinite());
      
      complex2.pow(0.0);
      Complex complex14 = complex13.pow(complex4);
      assertSame(complex14, complex12);
      
      Complex complex15 = complex13.cos();
      assertNotSame(complex0, complex8);
      assertNotSame(complex13, complex9);
      assertSame(complex15, complex3);
      assertTrue(complex1.equals((Object)complex11));
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex1.I.getArgument();
      Complex complex2 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.getReal();
      Complex complex3 = complex1.multiply(1303.1455627953562);
      Complex complex4 = complex3.pow(1.5707963267948966);
      Complex complex5 = complex3.NaN.sin();
      complex4.INF.createComplex(6.283185307179586, 5.622626080395226E67);
      assertEquals(76240.88737736864, complex4.getImaginary(), 0.01);
      assertEquals(17242.234202253065, complex4.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex5.subtract(1.5707963267948966);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      String string0 = complex2.toString();
      assertEquals("(6.283185307179586, 6.283185307179586)", string0);
      
      double double0 = complex7.getArgument();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex9 = complex6.conjugate();
      Complex complex10 = complex9.negate();
      assertSame(complex10, complex8);
      assertSame(complex9, complex6);
      assertSame(complex10, complex5);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex4.ONE.multiply(577);
      Complex complex6 = complex5.INF.multiply(577);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(577.0, complex5.getReal(), 0.01);
      
      complex4.ZERO.pow(Double.POSITIVE_INFINITY);
      assertSame(complex4, complex2);
      
      complex0.getField();
      Complex complex7 = complex0.pow(0.0);
      assertNotSame(complex7, complex2);
      
      Complex complex8 = complex1.pow(Double.POSITIVE_INFINITY);
      assertTrue(complex8.equals((Object)complex2));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex1.isInfinite());
      assertNotSame(complex8, complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.multiply(492.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.NaN;
      complex3.ZERO.multiply(complex5);
      Complex complex6 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex2.multiply(complex0);
      Complex complex8 = complex1.ZERO.pow(complex3);
      Complex complex9 = complex8.pow(complex7);
      Complex complex10 = complex7.INF.exp();
      Complex complex11 = complex7.ONE.createComplex((-3099.3), 0.0);
      Complex complex12 = complex0.pow(492.0);
      Complex complex13 = complex8.NaN.subtract(complex0);
      Complex complex14 = complex1.ZERO.subtract(994.0458704772944);
      assertEquals((-994.0458704772944), complex14.getReal(), 0.01);
      
      Complex complex15 = complex1.createComplex(1714.217317771, 492.0);
      Complex complex16 = complex12.subtract(complex7);
      Complex complex17 = complex1.sqrt();
      Complex complex18 = complex11.cosh();
      assertFalse(complex18.isInfinite());
      
      complex17.hashCode();
      complex9.equals(complex12);
      assertTrue(complex9.equals((Object)complex18));
      
      Complex complex19 = complex7.pow(0.0);
      complex10.getArgument();
      assertTrue(complex7.equals((Object)complex17));
      
      Complex complex20 = complex13.reciprocal();
      assertSame(complex8, complex16);
      assertSame(complex20, complex3);
      
      Complex complex21 = complex15.divide(Double.NaN);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertSame(complex21, complex4);
      assertNotSame(complex21, complex19);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.createComplex(0.0, 0.0);
      complex1.atan();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex1.ONE.getArgument();
      Complex complex3 = complex0.I.tanh();
      Complex complex4 = complex3.INF.pow(complex0);
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex5.ZERO.tanh();
      complex0.isNaN();
      complex3.NaN.divide(complex6);
      complex3.NaN.getArgument();
      complex5.ZERO.toString();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = Complex.valueOf(Double.NaN);
      Complex complex10 = Complex.valueOf(Double.NaN, (-1482.0966));
      complex3.readResolve();
      Complex complex11 = complex5.pow(0.0);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex11.NaN.sin();
      Complex complex12 = complex7.conjugate();
      complex11.isInfinite();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals((-1.557407724654902), complex5.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex10));
      assertTrue(complex11.equals((Object)complex8));
      assertNotSame(complex4, complex9);
      
      Complex complex13 = complex7.sinh();
      complex12.add(0.0);
      Complex complex14 = complex13.atan();
      assertTrue(complex7.equals((Object)complex2));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertTrue(complex14.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(8.28479585346867E265);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex1.ZERO.multiply(8.28479585346867E265);
      complex0.ZERO.sqrt();
      complex1.hashCode();
      Complex.valueOf((-1.0));
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.I.reciprocal();
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      complex6.ONE.add(complex4);
      Complex complex8 = complex0.subtract(complex6);
      double double0 = complex6.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      complex6.ZERO.readResolve();
      double double1 = complex4.abs();
      assertTrue(complex4.equals((Object)complex5));
      assertEquals(0.0, double1, 0.01);
      
      complex3.toString();
      Complex complex9 = complex8.atan();
      assertSame(complex9, complex3);
      assertEquals(Double.NEGATIVE_INFINITY, complex8.getImaginary(), 0.01);
      
      complex0.readResolve();
      complex6.hashCode();
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      List<Complex> list0 = complex0.ZERO.nthRoot(4973);
      assertTrue(list0.contains(complex3));
      assertEquals(4973, list0.size());
      
      Complex complex4 = complex3.negate();
      complex0.isNaN();
      Complex complex5 = complex0.ZERO.cosh();
      Complex complex6 = complex5.NaN.reciprocal();
      Complex complex7 = complex6.NaN.pow(complex3);
      Complex complex8 = complex0.add((-868.95445182152));
      Complex complex9 = complex0.cos();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex0.divide(complex3);
      complex11.subtract(complex9);
      Complex complex12 = complex0.pow(0.0);
      complex12.I.conjugate();
      Complex complex13 = complex5.divide(complex3);
      Complex complex14 = complex13.I.atan();
      complex13.ZERO.exp();
      assertSame(complex13, complex14);
      
      complex10.equals((Object) null);
      assertTrue(complex10.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getReal(), 0.01);
      
      Complex complex15 = (Complex)complex4.readResolve();
      assertEquals(-0.0, complex15.getReal(), 0.01);
      
      Complex complex16 = complex5.cosh();
      assertTrue(complex16.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex12));
      
      Complex complex17 = complex0.conjugate();
      assertNotSame(complex0, complex7);
      assertTrue(complex17.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-2202.64255));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex2.INF.reciprocal();
      Complex complex4 = complex3.I.sqrt1z();
      assertEquals(1.4142135623730951, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex0.ONE.getField();
      Complex complex5 = complex0.divide((-2202.64255));
      Complex complex6 = complex5.divide(Double.NaN);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex7 = complex3.I.add(Double.NaN);
      assertSame(complex7, complex6);
      
      Complex complex8 = complex0.multiply(2.0);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals((-4405.2851), complex8.getReal(), 0.01);
      
      Complex complex9 = complex3.add(2.0);
      assertTrue(complex1.equals((Object)complex5));
      assertEquals(2.0, complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(148.62128852494, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(148.62128852494, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(587.954823883651, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.negate();
      assertEquals((-587.954823883651), complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex0.NaN.exp();
      complex4.ZERO.log();
      Complex complex5 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex5.sin();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex7.I.sqrt1z();
      assertEquals(1.4142135623730951, complex8.getReal(), 0.01);
      
      List<Complex> list0 = complex6.I.nthRoot(706);
      assertFalse(list0.contains(complex3));
      assertEquals(706, list0.size());
      
      Complex complex9 = complex7.ONE.divide(7.39978436695387E-8);
      assertEquals(1.3513907303377965E7, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getImaginary(), 0.01);
      
      complex3.abs();
      complex3.divide((-566.2104));
      double double0 = complex3.abs();
      assertTrue(complex0.isInfinite());
      assertSame(complex3, complex4);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex((-144.98533599212), (-144.98533599212));
      complex1.INF.getField();
      complex1.INF.exp();
      Complex complex2 = complex1.INF.negate();
      complex2.ONE.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = complex4.ZERO.createComplex((-144.98533599212), Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.I.sqrt();
      Complex complex7 = complex0.divide((-2983.0437171069));
      Complex complex8 = complex7.INF.sqrt();
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      
      Complex complex9 = Complex.valueOf((-1.1135725625095859E-9), (-1.1135725625095859E-9));
      complex7.abs();
      Complex complex10 = complex7.multiply((-4323));
      double double0 = complex2.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex11 = complex1.ZERO.sinh();
      Complex complex12 = complex4.I.subtract((-144.98533599212));
      Complex complex13 = complex11.I.atan();
      assertSame(complex13, complex10);
      
      Complex complex14 = complex6.divide(461.4412843844848);
      complex2.divide(2223.061071254634);
      complex2.divide(461.4412843844848);
      complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex15 = complex14.divide(Double.POSITIVE_INFINITY);
      assertEquals(0.001532387337491389, complex14.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex4));
      assertEquals(0.0015323873374913889, complex14.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertTrue(complex15.equals((Object)complex11));
      
      double double1 = complex9.abs();
      assertEquals((-1.1135725625095859E-9), complex9.getImaginary(), 0.01);
      assertEquals(1.5748294205876177E-9, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(773.13973039418, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.log();
      complex0.abs();
      complex1.abs();
      complex1.createComplex((-2373.0), 1.5859915617670956E-7);
      Complex complex2 = complex0.multiply(363);
      complex2.ZERO.atan();
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
