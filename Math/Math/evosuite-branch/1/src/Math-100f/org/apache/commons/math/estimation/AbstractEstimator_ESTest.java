/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 16:54:31 GMT 2018
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.GaussNewtonEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractEstimator_ESTest extends AbstractEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator((-27), (-27), (-27));
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      gaussNewtonEstimator0.initializeEstimate(simpleEstimationProblem0);
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("org.apache.commons.math.estimation.GaussNewtonEstimator", 2.0, false);
      simpleEstimationProblem0.addParameter(estimatedParameter0);
      try { 
        gaussNewtonEstimator0.getCovariances(simpleEstimationProblem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to compute covariances: singular problem
         //
         verifyException("org.apache.commons.math.estimation.AbstractEstimator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      int int0 = levenbergMarquardtEstimator0.getCostEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(1921, 1921, 1921);
      int int0 = gaussNewtonEstimator0.getJacobianEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("", 1135.171693098);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getPartial(any(org.apache.commons.math.estimation.EstimatedParameter.class));
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      simpleEstimationProblem0.addParameter(estimatedParameter0);
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator((-2122), 335.73, 335.73);
      try { 
        gaussNewtonEstimator0.updateResidualsAndCost();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of evaluations exceeded (-2,122)
         //
         verifyException("org.apache.commons.math.estimation.AbstractEstimator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(1921, 1921, 1921);
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      double double0 = gaussNewtonEstimator0.getRMS(simpleEstimationProblem0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      // Undeclared exception!
      try { 
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator((-27), (-27), (-27));
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      gaussNewtonEstimator0.initializeEstimate(simpleEstimationProblem0);
      EstimatedParameter estimatedParameter0 = new EstimatedParameter("org.apache.commons.math.estimation.GaussNewtonEstimator", 2.0, false);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      simpleEstimationProblem0.addParameter(estimatedParameter0);
      // Undeclared exception!
      try { 
        gaussNewtonEstimator0.getCovariances(simpleEstimationProblem0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.estimation.AbstractEstimator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      try { 
        levenbergMarquardtEstimator0.guessParametersErrors(simpleEstimationProblem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no degrees of freedom (0 measurements, 0 parameters)
         //
         verifyException("org.apache.commons.math.estimation.AbstractEstimator", e);
      }
  }
}
