/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 14:46:20 GMT 2018
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asin;
import org.apache.commons.math3.analysis.function.Cbrt;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Sinh;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-1604.7809472452795), (-1604.7809472452795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,604.781 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.15920111448675578, 0.15920111448675578);
      Cbrt cbrt0 = new Cbrt();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1078, (UnivariateFunction) cbrt0, goalType0, (-178.2838678676122), (double) 1078);
      assertEquals((-5.32701546230303), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(1365.312279, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.5, 0.5);
      Cbrt cbrt0 = new Cbrt();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(927, (UnivariateFunction) cbrt0, goalType0, (-147.00366666302313), (double) 927);
      assertEquals((-103.48423258946143), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.5, 0.5);
      Cbrt cbrt0 = new Cbrt();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(65, (UnivariateFunction) cbrt0, goalType0, (-748.53), (double) 65);
      assertEquals(3.595654069120045, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.15920111448675578, 0.15920111448675578);
      Cbrt cbrt0 = new Cbrt();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(3653, (UnivariateFunction) cbrt0, goalType0, (double) 3653, 5.705842978547001E100, (double) 3653);
      assertEquals(3653.0, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(15.401034393891951, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(Double.NaN, Double.NaN);
      Sinc sinc0 = new Sinc(true);
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize(898, (UnivariateFunction) sinc0, goalType0, (-863.204674671), 687.1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (898) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(Double.NaN, Double.NaN);
      Sinh sinh0 = new Sinh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try { 
        brentOptimizer0.optimize(1935, (UnivariateFunction) sinh0, goalType0, 1737.0, 7.543305364853447, 1737.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,935) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(3.0, 3.0);
      Asin asin0 = new Asin();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(12, (UnivariateFunction) asin0, goalType0, (double) 12, 1.0, (-5599.667701934));
      assertEquals(Double.NaN, univariatePointValuePair0.getValue(), 0.01);
      assertNotNull(univariatePointValuePair0);
      assertEquals((-5599.667701934), univariatePointValuePair0.getPoint(), 0.01);
  }
}
