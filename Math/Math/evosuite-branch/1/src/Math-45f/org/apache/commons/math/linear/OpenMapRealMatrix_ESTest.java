/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 15:22:32 GMT 2018
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertEquals(1, openMapRealMatrix1.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(1, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      double[][] doubleArray0 = openMapRealMatrix0.getData();
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) array2DRowRealMatrix0);
      assertEquals(1, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3718, 3718);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.copy();
      assertEquals(3718, openMapRealMatrix1.getColumnDimension());
      assertEquals(3718, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3696, 3696);
      // Undeclared exception!
      openMapRealMatrix0.getRowMatrix(649);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,611,686,014,132,420,609 is larger than, or equal to, the maximum (2,147,483,647)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3718, 219);
      openMapRealMatrix0.addToEntry(651, 199, 124.4220884888);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(3718, openMapRealMatrix1.getRowDimension());
      assertEquals(219, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3718, 219);
      assertEquals(3718, openMapRealMatrix0.getRowDimension());
      
      openMapRealMatrix0.addToEntry(651, 199, 124.4220884888);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(3718, openMapRealMatrix1.getRowDimension());
      assertEquals(219, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3696, 3696);
      openMapRealMatrix0.addToEntry(649, 649, 1.997844754509471E-9);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.multiply(openMapRealMatrix0);
      assertEquals(3696, openMapRealMatrix1.getColumnDimension());
      assertEquals(3696, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3731, 3731);
      openMapRealMatrix0.addToEntry(1554, 199, 0.0);
      assertEquals(3731, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1625, 1625);
      openMapRealMatrix0.multiplyEntry(0, 0, Double.POSITIVE_INFINITY);
      assertEquals(1625, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1625, 1625);
      openMapRealMatrix0.multiplyEntry(0, 0, 1625);
      assertEquals(1625, openMapRealMatrix0.getColumnDimension());
  }
}
