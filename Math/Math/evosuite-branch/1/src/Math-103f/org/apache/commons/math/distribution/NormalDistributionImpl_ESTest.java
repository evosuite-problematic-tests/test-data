/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 17:00:11 GMT 2018
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NormalDistributionImpl_ESTest extends NormalDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getDomainLowerBound(2108.726902);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(1.0, 1.0);
      // Undeclared exception!
      try { 
        normalDistributionImpl0.setStandardDeviation((-2573.1194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Standard deviation must be positive.
         //
         verifyException("org.apache.commons.math.distribution.NormalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.48712);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals((-0.032290981798304606), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(1.0, 1.0);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(1.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getDomainUpperBound(0.5);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(937.188996808362, 937.188996808362);
      double double0 = normalDistributionImpl0.getInitialDomain(3085.424266102068);
      assertEquals(1874.377993616724, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(4.652362892704858E-5, 4.652362892704858E-5);
      double double0 = normalDistributionImpl0.getInitialDomain(0.5);
      assertEquals(4.652362892704858E-5, double0, 0.01);
  }
}
