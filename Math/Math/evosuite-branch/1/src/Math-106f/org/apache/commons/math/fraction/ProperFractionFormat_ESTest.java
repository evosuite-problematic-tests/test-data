/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 17:01:48 GMT 2018
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProperFractionFormat_ESTest extends ProperFractionFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      Fraction fraction0 = Fraction.ONE;
      String string0 = properFractionFormat0.format((Object) fraction0);
      assertEquals("1 0 / 1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      Fraction fraction0 = Fraction.ZERO;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      properFractionFormat0.format(fraction0, stringBuffer0, fieldPosition0);
      assertEquals(4, fieldPosition0.getBeginIndex());
      assertEquals("0 / 1", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      try { 
        properFractionFormat0.parse("1 0 / org.apache.commons.math.fraction.ProperFractionFormat");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"1 0 / org.apache.commons.math.fraction.ProperFractionFormat\"
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.apache.commons.math.MathException");
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat(choiceFormat0);
      ParsePosition parsePosition0 = new ParsePosition(2077);
      properFractionFormat0.parse("org.apache.commons.math.MathException", parsePosition0);
      assertEquals(2076, parsePosition0.getErrorIndex());
      assertEquals(2076, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      properFractionFormat0.parse("q+UC)m9!_R$Ox/@S16", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat(numberFormat0, numberFormat0, numberFormat0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      properFractionFormat0.parse("5-2%h-T*=1b^] ", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=3]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      ParsePosition parsePosition0 = new ParsePosition(2);
      properFractionFormat0.parse("'\"4-8iP&8`J", parsePosition0);
      assertEquals(3, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=3]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      DecimalFormat decimalFormat0 = new DecimalFormat("1 0 / 1");
      properFractionFormat0.setWholeFormat(decimalFormat0);
      Fraction fraction0 = properFractionFormat0.parse("1 0 / 1");
      assertEquals((short)1, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("a[!i[Zh^ Fa$Icl");
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat(choiceFormat0);
      try { 
        properFractionFormat0.parseObject("zgnk&4(';");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      double[] doubleArray0 = new double[9];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "w(/HJ.1W7|cl<;Lep(";
      stringArray0[3] = "l1=!fhM<86|8M-m.";
      stringArray0[4] = "";
      stringArray0[5] = "$+BqTnc#";
      stringArray0[6] = "l1=!fhM<86|8M-m.";
      stringArray0[7] = "Cannot format given object as a fraction";
      stringArray0[8] = "org.apache.commons.math.fraction.ProperFractionFormat";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      properFractionFormat0.setDenominatorFormat(choiceFormat0);
      // Undeclared exception!
      try { 
        properFractionFormat0.parse("1 0 / org.apache.commons.math.fraction.ProperFractionFormat");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.math.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-1.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "w(/HJ.1W7|cl<;Lep(";
      stringArray0[3] = "l1=!fhM<86|8M-m.";
      stringArray0[4] = "";
      stringArray0[5] = "$+BqTnc#";
      stringArray0[6] = "l1=!fhM<86|8M-m.";
      stringArray0[7] = "Cannot format given object as a fraction";
      stringArray0[8] = "org.apache.commons.math.fraction.ProperFractionFormat";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      properFractionFormat0.setDenominatorFormat(choiceFormat0);
      try { 
        properFractionFormat0.parse("1 0 / org.apache.commons.math.fraction.ProperFractionFormat");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"1 0 / org.apache.commons.math.fraction.ProperFractionFormat\"
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = null;
      try {
        properFractionFormat0 = new ProperFractionFormat((NumberFormat) null, (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // whole format can not be null.
         //
         verifyException("org.apache.commons.math.fraction.ProperFractionFormat", e);
      }
  }
}
