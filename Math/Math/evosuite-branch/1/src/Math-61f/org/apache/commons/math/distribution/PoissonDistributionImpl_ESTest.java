/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 15:46:52 GMT 2018
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PoissonDistributionImpl_ESTest extends PoissonDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0, 1.0);
      poissonDistributionImpl0.inverseCumulativeProbability(1.0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3128.10587272, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(3128.10587272, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.00833056343336287);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(0, int0);
      assertEquals(0.00833056343336287, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(226.3424, 319);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(235);
      assertEquals(226.3424, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.7286362139031148, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-612.2005679508), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -612.201 is smaller than, or equal to, the minimum (0): mean (-612.201)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3128.10587272, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.probability((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3128.10587272, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(226.3424, 319);
      double double0 = poissonDistributionImpl0.probability(2156);
      assertEquals(0.0, double0, 0.01);
      assertEquals(226.3424, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3128.10587272, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3128.10587272, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(809.103674609, 809.103674609, 0);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(8.251545029714408E-9, 19);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-4647));
      assertEquals(0.0, double0, 0.01);
      assertEquals(8.251545029714408E-9, poissonDistributionImpl0.getMean(), 0.01);
  }
}
