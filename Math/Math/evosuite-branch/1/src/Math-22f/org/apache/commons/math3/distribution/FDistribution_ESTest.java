/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 14:44:20 GMT 2018
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      FDistribution fDistribution0 = new FDistribution(mersenneTwister0, 1248.119288, 1248.119288, 0L);
      double double0 = fDistribution0.sample();
      assertEquals(0.9431634310816875, double0, 0.01);
      assertEquals(1248.119288, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 2.0);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 2.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 2.0);
      double double0 = fDistribution0.density(2.0);
      assertEquals(0.11111111111111115, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, (-126.47546492547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937c well19937c0 = new Well19937c(intArray0);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(well19937c0, 4.406062052965071E200, (-1.0681886149151956E-7), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 2.0);
      double double0 = fDistribution0.inverseCumulativeProbability(3.048235625892217E-83);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.0, 2.0);
      fDistribution0.getNumericalVariance();
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }
}
