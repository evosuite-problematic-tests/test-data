/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 14:44:14 GMT 2018
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UniformRealDistribution_ESTest extends UniformRealDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      boolean boolean0 = uniformRealDistribution0.isSupportConnected();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.sample();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0.9026297667469598, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(1.0E-6, 2316.0);
      double double0 = uniformRealDistribution0.getNumericalMean();
      assertEquals(1158.0000005, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(1.0E-6, 2316.0);
      double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(2316.0, double0, 0.01);
      assertEquals(1.0E-6, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(446987.99961400003, uniformRealDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(1.0E-6, 2316.0);
      double double0 = uniformRealDistribution0.getNumericalVariance();
      assertEquals(446987.99961400003, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-440.95133051269), 654.354429874188, 1.0E-6);
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertEquals(99974.55906138972, uniformRealDistribution0.getNumericalVariance(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(1.0E-6, 2316.0);
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertEquals(446987.99961400003, uniformRealDistribution0.getNumericalVariance(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = null;
      try {
        uniformRealDistribution0 = new UniformRealDistribution(2305.04, 2305.04);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (2,305.04) must be strictly less than upper bound (2,305.04)
         //
         verifyException("org.apache.commons.math3.distribution.UniformRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a((-2264L));
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well512a0, (-3029.72), 6.283185307179586, 0.0);
      double double0 = uniformRealDistribution0.density((-5488.529803));
      assertEquals(0.0, double0, 0.01);
      assertEquals(768109.6117662784, uniformRealDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(1.0E-6, 2316.0);
      double double0 = uniformRealDistribution0.density(0.5);
      assertEquals(4.3177892937468866E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well512a well512a0 = new Well512a((-2264L));
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well512a0, (-3029.72), 6.283185307179586, 0.0);
      double double0 = uniformRealDistribution0.density((byte)103);
      assertEquals(768109.6117662784, uniformRealDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.cumulativeProbability(1.0E-9);
      assertEquals(1.0E-9, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      uniformRealDistribution0.probability((-556.39317499), (-556.39317499));
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      uniformRealDistribution0.probability(856.6588999, 856.6588999);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }
}
