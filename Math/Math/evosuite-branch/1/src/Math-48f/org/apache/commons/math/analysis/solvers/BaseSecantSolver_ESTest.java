/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 15:28:36 GMT 2018
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      regulaFalsiSolver0.solve(5328, (UnivariateRealFunction) sinc0, 3263.61334527, (double) 5328, (double) 5328);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2687.43208), 2871.087525);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2689.316453922321));
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(255, (UnivariateRealFunction) cos0, (-2689.316453922321), (double) 255, allowedSolution0);
      assertEquals((-2689.316453922321), pegasusSolver0.getMin(), 0.01);
      assertEquals((-739.8450699203962), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.5830993332061267E-10);
      Sigmoid sigmoid0 = new Sigmoid(0.0, (-1504.079954638813));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(24, (UnivariateRealFunction) sigmoid0, (-1071.777), 0.0, 1.5830993332061267E-10, allowedSolution0);
      assertEquals(1.5830993332061267E-10, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1071.777), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0, (-2554.74117512), 0.5);
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(18, (UnivariateRealFunction) gaussian0, 1.0, (-2554.74117512), allowedSolution0);
      assertEquals(1.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-2554.74117512), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-29.20422898573134));
      Log10 log10_0 = new Log10();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(153, (UnivariateRealFunction) log10_0, 2.602192951811922E-10, 961.6600462960848, 2.1493214021121658E-10, allowedSolution0);
      assertEquals(2.1493214021121658E-10, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Signum signum0 = new Signum();
      double double0 = illinoisSolver0.solve(11477, (UnivariateRealFunction) signum0, (-4018.06), (double) 11477);
      assertEquals(3729.47, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(5.858496101274328E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, 960.7094538866482, 981.0332309139, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, (-1205.263), 980.8657909981057, allowedSolution0);
      assertEquals((-112.19860450094711), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-926.769832808989), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, (-1205.263), 981.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, (-1205.263), 981.0332309139, allowedSolution0);
      assertEquals(981.0332309139, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(961.3273517918566, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, (-1205.263), 981.0332309139, allowedSolution0);
      assertEquals((-112.11488454305004), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(961.327351998477, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, (-1205.263), 976.9682479531056, allowedSolution0);
      assertEquals((-114.14737602344712), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1127.8317626387359), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, (-1205.8611358775229), 981.0332309139, allowedSolution0);
      assertEquals((-112.41395248181152), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(358.14156250923645, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(129, (UnivariateRealFunction) sinc0, (double) 129, 957.9485224927608, allowedSolution0);
      assertEquals(543.4742612463804, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(848.230016424085, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(521, (UnivariateRealFunction) sinc0, (double) 521, 981.03, allowedSolution0);
      assertEquals(751.015, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(936.1946107697622, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0);
      Log10 log10_0 = new Log10();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(153, (UnivariateRealFunction) log10_0, 2.602192951811922E-10, 961.6600462960848, 2.1493214021121658E-10, allowedSolution0);
      assertEquals(2.1493214021121658E-10, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.8416091853772171, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(479, (UnivariateRealFunction) sinc0, (-1211.7561910784973), 981.0332309139, allowedSolution0);
      assertEquals((-115.36148008229861), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(961.3273519984838, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.9545440478841102);
      Log10 log10_0 = new Log10();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(153, (UnivariateRealFunction) log10_0, 2.602192951811922E-10, 961.6600462960848, 2.1493214021121658E-10, allowedSolution0);
      assertEquals(2.1493214021121658E-10, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.8416091853772171, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(7.549789948768648E-8, 7.549789948768648E-8, (-1.0));
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(846, (UnivariateRealFunction) cbrt0, (-1.0), 138.74449475027, (double) 846, allowedSolution0);
      assertEquals(846.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.0084581891598113E-9, double0, 0.01);
  }
}
