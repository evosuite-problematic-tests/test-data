/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 14:26:46 GMT 2018
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      long long0 = well44497a0.nextLong();
      assertEquals(7511934290929377949L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      int int0 = mersenneTwister0.nextInt();
      assertEquals((-1937831252), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((long) 0);
      float float0 = well1024a0.nextFloat();
      assertEquals(0.76371574F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1L));
      boolean boolean0 = well19937c0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      byte[] byteArray0 = new byte[5];
      well1024a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-110), (byte) (-23), (byte)77, (byte) (-34)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well1024a well1024a0 = new Well1024a(intArray0);
      double double0 = well1024a0.nextGaussian();
      assertEquals(0.3040919112453548, double0, 0.01);
      
      double double1 = well1024a0.nextGaussian();
      assertEquals(0.4590343135291265, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(93740670);
      try { 
        iSAACRandom0.nextInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(790);
      int int0 = well1024a0.nextInt(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      int int0 = iSAACRandom0.nextInt(488716505);
      assertEquals(367420130, int0);
  }
}
