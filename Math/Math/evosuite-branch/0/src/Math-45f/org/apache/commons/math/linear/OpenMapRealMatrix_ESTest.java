/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 11:02:31 GMT 2018
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DefaultRealMatrixChangingVisitor;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixChangingVisitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.scalarAdd(52);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      
      OpenMapRealMatrix openMapRealMatrix2 = openMapRealMatrix0.subtract(openMapRealMatrix1);
      assertEquals(1, openMapRealMatrix2.getRowDimension());
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix2, openMapRealMatrix0);
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertEquals(1, openMapRealMatrix2.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(376, 376);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertEquals(376, openMapRealMatrix1.getColumnDimension());
      assertEquals(376, openMapRealMatrix1.getRowDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,611,686,014,132,420,609 is larger than, or equal to, the maximum (2,147,483,647)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(38, 38);
      openMapRealMatrix0.setEntry(16, 16, 38);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(38, openMapRealMatrix1.getRowDimension());
      assertEquals(38, openMapRealMatrix0.getColumnDimension());
      assertFalse(openMapRealMatrix1.equals((Object)openMapRealMatrix0));
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(1, 1);
      OpenMapRealMatrix openMapRealMatrix1 = (OpenMapRealMatrix)openMapRealMatrix0.scalarAdd(52);
      OpenMapRealMatrix openMapRealMatrix2 = new OpenMapRealMatrix(openMapRealMatrix1);
      assertEquals(1, openMapRealMatrix2.getColumnDimension());
      assertFalse(openMapRealMatrix2.equals((Object)openMapRealMatrix0));
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)openMapRealMatrix2.multiply((RealMatrix) blockRealMatrix0);
      assertTrue(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertEquals(1, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(38, 38);
      openMapRealMatrix0.setEntry(16, 16, 38);
      RealMatrix realMatrix0 = openMapRealMatrix0.power(732);
      assertEquals(38, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(8, 8);
      DefaultRealMatrixChangingVisitor defaultRealMatrixChangingVisitor0 = new DefaultRealMatrixChangingVisitor();
      openMapRealMatrix0.walkInOptimizedOrder((RealMatrixChangingVisitor) defaultRealMatrixChangingVisitor0);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2421, 2421);
      openMapRealMatrix0.addToEntry(1, 624, 1162.08912899);
      assertEquals(2421, openMapRealMatrix0.getRowDimension());
      assertEquals(2421, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(8, 8);
      openMapRealMatrix0.addToEntry(0, 0, 0.0);
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(22, 22);
      openMapRealMatrix0.setEntry(1, 1, 22);
      openMapRealMatrix0.multiplyEntry(1, 1, 1);
      assertEquals(22, openMapRealMatrix0.getRowDimension());
      assertEquals(22, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1218, 1218);
      openMapRealMatrix0.multiplyEntry(0, 0, 1218);
      assertEquals(1218, openMapRealMatrix0.getRowDimension());
      assertEquals(1218, openMapRealMatrix0.getColumnDimension());
  }
}
