/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 10:04:51 GMT 2018
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-4223L));
      int int0 = well44497a0.nextInt();
      assertEquals((-622610083), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(7729651);
      float float0 = well19937c0.nextFloat();
      assertEquals(0.10180867F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1022L);
      long long0 = iSAACRandom0.nextLong();
      assertEquals((-6296317329739742889L), long0);
      
      boolean boolean0 = iSAACRandom0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-4223L));
      byte[] byteArray0 = new byte[6];
      well44497a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-71), (byte) (-29), (byte) (-38), (byte) (-127), (byte) (-17)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(758);
      double double0 = mersenneTwister0.nextGaussian();
      assertEquals((-0.4048924602568275), double0, 0.01);
      
      double double1 = mersenneTwister0.nextGaussian();
      assertEquals(1.0713543732212603, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1918L);
      try { 
        well44497b0.nextInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(8);
      int int0 = well19937c0.nextInt(8);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1022L);
      iSAACRandom0.setSeed((long) 7729651);
      int int0 = iSAACRandom0.nextInt(7729651);
      assertEquals(6660104, int0);
  }
}
