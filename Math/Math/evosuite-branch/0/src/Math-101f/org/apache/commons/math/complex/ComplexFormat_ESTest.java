/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 12:41:09 GMT 2018
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexFormat_ESTest extends ComplexFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("(NaN) + (NaN)i");
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.parse("(NaN) + (NaN)i", parsePosition0);
      assertEquals(13, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=13]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      Complex complex0 = complexFormat0.parse("(Infinity) + (Infinity)i");
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("(Infinity) + (Infinity)i", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.parseObject("org.apache.commons.math.complex.Complex", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      ComplexFormat complexFormat0 = new ComplexFormat("Y:zd|N|", numberFormat0, numberFormat0);
      Complex complex0 = new Complex(1143.671714, (-2109.473241));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Y:zd|N|");
      FieldPosition fieldPosition0 = new FieldPosition(0);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals(20, fieldPosition0.getBeginIndex());
      assertEquals(37, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("(NaN) + (NaN)i", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      Byte byte0 = new Byte((byte)40);
      AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator(byte0);
      assertEquals(2, attributedCharacterIterator0.getRunLimit());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComplexFormat.formatComplex((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      ParsePosition parsePosition0 = new ParsePosition((-30));
      parsePosition0.setIndex(0);
      complexFormat0.parse("1", parsePosition0);
      complexFormat0.parse("+8-,U ,z*3`+iLC", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=3]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      ComplexFormat complexFormat0 = new ComplexFormat("JMCgy5Ccez\"+", numberFormat0, numberFormat0);
      try { 
        complexFormat0.parse("9{2|3KA^");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"9{2|3KA^\"
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.setImaginaryCharacter(" ");
      complexFormat0.parse("(NaN) + (NaN)i", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=13]", parsePosition0.toString());
      assertEquals(13, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      try { 
        complexFormat0.parse(" ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \" \"
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      // Undeclared exception!
      try { 
        complexFormat0.setImaginaryCharacter("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat("r$q", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      // Undeclared exception!
      try { 
        complexFormat0.setRealFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }
}
