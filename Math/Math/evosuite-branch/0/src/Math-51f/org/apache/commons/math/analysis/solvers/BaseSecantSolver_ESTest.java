/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 11:17:08 GMT 2018
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-18.770972826856994));
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      regulaFalsiSolver0.solve(24205972, (UnivariateRealFunction) cos0, (-18.770972826856994), 1661.8569649, (-18.770972826856994), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, (-2997.6089417442117));
      Sqrt sqrt0 = new Sqrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(690, (UnivariateRealFunction) sqrt0, 0.0, 0.0, (-2997.6089417442117), allowedSolution0);
      assertEquals((-2997.6089417442117), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(1169, (UnivariateRealFunction) sin0, 86.17712906, 0.0, allowedSolution0);
      assertEquals(86.17712906, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.016102583244758464);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(24206009, (UnivariateRealFunction) cos0, 0.016102583244758464, 1661.8569649, 0.016102583244758464, allowedSolution0);
      assertEquals(0.016102583244758464, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(510.5088671636336, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.7698024612348736, 0.7698024612348736);
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(127, (UnivariateRealFunction) identity0, (-1274.0), 3.501550740633302E-14, 2.241322940621515E-5, allowedSolution0);
      assertEquals(2.241322940621515E-5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 1.0, 1386.0);
      Expm1 expm1_0 = new Expm1();
      // Undeclared exception!
      pegasusSolver0.solve(8388607, (UnivariateRealFunction) expm1_0, (-2775.388550459), 1725.54347705512);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(24206009, (UnivariateRealFunction) cos0, (-11.352211885074848), 1661.8569649, (-11.352211885074848), allowedSolution0);
      assertEquals((-11.352211885074848), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(435.1105830671069, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sinc sinc0 = new Sinc();
      double double0 = illinoisSolver0.solve(3169, (UnivariateRealFunction) sinc0, 0.0, 6.2713, (double) 3169);
      assertEquals(3169.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.1415926535897944, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(34032031, (UnivariateRealFunction) sinc0, 0.0, (double) 34032031, (double) 34032031, allowedSolution0);
      assertEquals(3.4032031E7, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.403202812791442E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(34032035, (UnivariateRealFunction) sinc0, 0.0, (double) 34032035, (double) 34032035, allowedSolution0);
      assertEquals(3.4032035E7, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.403203441109972E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(34032036, (UnivariateRealFunction) sinc0, 0.0, (double) 34032036, (double) 34032036, allowedSolution0);
      assertEquals(3.403203441109972E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(34032006, (UnivariateRealFunction) sinc0, 0.0, (double) 34032006, (double) 34032006, allowedSolution0);
      assertEquals(3.4032006E7, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.403200299517319E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.7698024612348736);
      Sinc sinc0 = new Sinc();
      double double0 = illinoisSolver0.solve(3169, (UnivariateRealFunction) sinc0, 0.7698024612348736, 6.271288835710969, (-977.8776811486641));
      assertEquals(0.7698024612348736, illinoisSolver0.getMin(), 0.01);
      assertEquals(3.0799453600950732, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1595.0036147855271, 1595.0036147855271, 1595.0036147855271);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(24206007, (UnivariateRealFunction) cos0, 1595.0036147855271, (double) 24206007, (double) 24206007, allowedSolution0);
      assertEquals(2.4206007E7, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1595.0036147855271, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.016102583244758464);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(24206009, (UnivariateRealFunction) cos0, 0.016102583244758464, 1661.8569649, 0.016102583244758464, allowedSolution0);
      assertEquals(0.016102583244758464, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(510.5024433216978, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.1979379202136056);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(34032031, (UnivariateRealFunction) sinc0, 1.1979379202136056, (double) 34032031, (double) 34032031, allowedSolution0);
      assertEquals(3.4032031E7, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.403202179754961E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.016102583244758464);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(24206009, (UnivariateRealFunction) cos0, 0.016102583244758464, 1661.8569649, 0.016102583244758464, allowedSolution0);
      assertEquals(0.016102583244758464, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(510.5088671636336, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.8490750191611153);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(24206009, (UnivariateRealFunction) cos0, 0.8490750191611153, 1661.8569649, 0.8490750191611153, allowedSolution0);
      assertEquals(0.8490750191611153, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(64.26032412154925, double0, 0.01);
  }
}
