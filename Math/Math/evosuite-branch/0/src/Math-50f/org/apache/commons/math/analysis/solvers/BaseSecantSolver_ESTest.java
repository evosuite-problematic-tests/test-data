/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 11:14:56 GMT 2018
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-0.9273157449327831));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(3169, (UnivariateRealFunction) sinc0, 10.0, (double) 3169, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, (-2997.6089417442117));
      Sqrt sqrt0 = new Sqrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(690, (UnivariateRealFunction) sqrt0, 0.0, 0.0, (-2997.6089417442117), allowedSolution0);
      assertEquals((-2997.6089417442117), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2160, (UnivariateRealFunction) sinc0, 781.664666352813, (double) 2160, allowedSolution0);
      assertEquals(781.664666352813, illinoisSolver0.getMin(), 0.01);
      assertEquals(1913.2299260361833, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(1169, (UnivariateRealFunction) sin0, 86.17712906, 0.0, allowedSolution0);
      assertEquals(86.17712906, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3170.1825178402), (-2135.66196777), (-3170.1825178402));
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(152, (UnivariateRealFunction) log0, 0.8478686067527231, 1104.718492194, (-2921.01051253), allowedSolution0);
      assertEquals((-2921.01051253), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Sinc sinc0 = new Sinc();
      double double0 = illinoisSolver0.solve(3169, (UnivariateRealFunction) sinc0, 0.0, 6.271288835710969, (-977.8776811486641));
      assertEquals((-977.8776811486641), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.1415926535897944, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(166.4907002755986, 166.4907002755986, 166.4907002755986);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1306362203, (UnivariateRealFunction) atan0, (-4699.7772162944), (double) 1306362203, 1.01, allowedSolution0);
      assertEquals(1.01, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-4699.7772162944), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-3170.1825178402));
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(152, (UnivariateRealFunction) log0, 0.8478686067527231, 1104.718492194, (-2921.01051253), allowedSolution0);
      assertEquals((-2921.01051253), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(166.4907002755986, 166.4907002755986, 166.4907002755986);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(9, (UnivariateRealFunction) atan0, (-4699.7772162944), (double) 9, 1.01, allowedSolution0);
      assertEquals(1.01, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2259.590871785751), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(184.20819590663547, 184.20819590663547, 184.20819590663547);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(9, (UnivariateRealFunction) atan0, (-4699.7772162944), (double) 9, 1.01, allowedSolution0);
      assertEquals(1.01, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(184.20819590663547, 184.20819590663547, 184.20819590663547);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(9, (UnivariateRealFunction) atan0, (-4699.7772162944), (double) 9, 1.01, allowedSolution0);
      assertEquals(1.01, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.7698024612348736);
      Sinc sinc0 = new Sinc();
      double double0 = illinoisSolver0.solve(3169, (UnivariateRealFunction) sinc0, 0.7698024612348736, 6.271288835710969, (-977.8776811486641));
      assertEquals((-977.8776811486641), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.0799453600950732, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(223, (UnivariateRealFunction) atan0, (-1.551), (double) 223, (double) 223, allowedSolution0);
      assertEquals((-7.509700521306814E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(166.4907002755986);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(9, (UnivariateRealFunction) atan0, (-4699.7772162944), (double) 9, 1.01, allowedSolution0);
      assertEquals(1.01, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-56.57569346477095), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(184.20819590663547);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(9, (UnivariateRealFunction) atan0, (-0.10888508825268099), (double) 9, 1.01, allowedSolution0);
      assertEquals(1.01, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.5209323797607848, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(184.20819590663547);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(9, (UnivariateRealFunction) atan0, (-4699.7772162944), (double) 9, 1.01, allowedSolution0);
      assertEquals(1.01, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-56.57569346477095), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(65.14612478258351);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(9, (UnivariateRealFunction) atan0, (-4716.317296667135), (double) 9, 65.14612478258351, allowedSolution0);
      assertEquals(65.14612478258351, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2.0462655376303474, double0, 0.01);
  }
}
