/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 15:57:00 GMT 2019
 */

package org.apache.commons.math.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BaseUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer;
import org.apache.commons.math.optimization.univariate.UnivariateRealPointValuePair;
import org.apache.commons.math.random.MersenneTwister;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.random.Well1024a;
import org.apache.commons.math.random.Well44497a;
import org.apache.commons.math.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiStartUnivariateRealOptimizer_ESTest extends MultiStartUnivariateRealOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(0, 0, 0, 0, 0).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn((UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble() , anyDouble());
      int[] intArray0 = new int[1];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 48, mersenneTwister0);
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.optimize((PolynomialSplineFunction) null, goalType0, (double) 48, (double) 48, (double) 48);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // none of the 48 start points lead to convergence: convergence failed
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((long) 0);
      MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>((BaseUnivariateRealOptimizer<PolynomialSplineFunction>) null, 0, well1024a0);
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.setMaxEvaluations(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 19, mersenneTwister0);
      int int0 = multiStartUnivariateRealOptimizer0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0);
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>((BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) null, 0, well44497b0);
      int int0 = multiStartUnivariateRealOptimizer0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      Well44497a well44497a0 = new Well44497a();
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-599), well44497a0);
      multiStartUnivariateRealOptimizer0.setConvergenceChecker((ConvergenceChecker<UnivariateRealPointValuePair>) null);
      assertEquals(0, multiStartUnivariateRealOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn((ConvergenceChecker) null).when(baseUnivariateRealOptimizer0).getConvergenceChecker();
      Well44497a well44497a0 = new Well44497a();
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, (-599), well44497a0);
      ConvergenceChecker<UnivariateRealPointValuePair> convergenceChecker0 = multiStartUnivariateRealOptimizer0.getConvergenceChecker();
      assertNull(convergenceChecker0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(1498, 1498);
      BaseUnivariateRealOptimizer<PolynomialFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(1689, 1689, 1498, (-230), 1498).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn((-230), 101, 1498, 101, 101).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunction.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble() , anyDouble());
      Well1024a well1024a0 = new Well1024a(2548);
      MultiStartUnivariateRealOptimizer<PolynomialFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunction>(baseUnivariateRealOptimizer0, 2548, well1024a0);
      double[] doubleArray0 = new double[9];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer0.optimize(polynomialFunction0, goalType0, (double) 2548, (double) 2548, 1.1102230246251565E-14);
      multiStartUnivariateRealOptimizer0.getOptima();
      assertEquals(3815558, multiStartUnivariateRealOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BaseUnivariateRealOptimizer<PolynomialSplineFunction> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialSplineFunction>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      MultiStartUnivariateRealOptimizer<PolynomialSplineFunction> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialSplineFunction>(baseUnivariateRealOptimizer0, 838, (RandomGenerator) null);
      // Undeclared exception!
      try { 
        multiStartUnivariateRealOptimizer0.getOptima();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no optimum computed yet
         //
         verifyException("org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(1.0, 0.0);
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(1054, (-902), 1054, 179, 179).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(3196, 1, 179, 179, (-902)).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null, (UnivariateRealPointValuePair) null).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble() , anyDouble());
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 1054, mersenneTwister0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      multiStartUnivariateRealOptimizer0.optimize((PolynomialFunctionLagrangeForm) null, goalType0, (double) 3196, (-480.284));
      assertEquals(189335, multiStartUnivariateRealOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      UnivariateRealPointValuePair univariateRealPointValuePair0 = new UnivariateRealPointValuePair(0.0, 0.0);
      BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> baseUnivariateRealOptimizer0 = (BaseUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>) mock(BaseUnivariateRealOptimizer.class, new ViolatedAssumptionAnswer());
      doReturn(1679, 1682, 1679, 1698, 1679).when(baseUnivariateRealOptimizer0).getEvaluations();
      doReturn(193, (-414), 193, 193, 1682).when(baseUnivariateRealOptimizer0).getMaxEvaluations();
      doReturn(univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0, univariateRealPointValuePair0).when(baseUnivariateRealOptimizer0).optimize(any(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm.class) , any(org.apache.commons.math.optimization.GoalType.class) , anyDouble() , anyDouble() , anyDouble());
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm> multiStartUnivariateRealOptimizer0 = new MultiStartUnivariateRealOptimizer<PolynomialFunctionLagrangeForm>(baseUnivariateRealOptimizer0, 19, mersenneTwister0);
      GoalType goalType0 = GoalType.MINIMIZE;
      multiStartUnivariateRealOptimizer0.optimize((PolynomialFunctionLagrangeForm) null, goalType0, 0.5, 1.0, 1.0);
      assertEquals(31923, multiStartUnivariateRealOptimizer0.getEvaluations());
  }
}
