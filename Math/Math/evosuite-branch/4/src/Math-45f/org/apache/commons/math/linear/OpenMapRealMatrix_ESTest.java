/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 15:28:57 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1873, 1873);
      // Undeclared exception!
      openMapRealMatrix0.scalarAdd(0.3333333333333333);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(900, 900);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract((RealMatrix) openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(900, openMapRealMatrix1.getRowDimension());
      assertEquals(900, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(2802, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6,017,249,178,894 is larger than, or equal to, the maximum (2,147,483,647)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1863, 1863);
      openMapRealMatrix0.setEntry(0, 0, 1863);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertEquals(1863, openMapRealMatrix1.getRowDimension());
      assertEquals(1863, openMapRealMatrix0.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(1863, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(222, 222);
      openMapRealMatrix0.addToEntry(0, 12, 12);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(222, openMapRealMatrix1.getColumnDimension());
      assertEquals(222, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(218, 218);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 218;
      doubleArray0[0] = doubleArray1;
      openMapRealMatrix0.setSubMatrix(doubleArray0, 1, 1);
      assertEquals(218, openMapRealMatrix0.getColumnDimension());
      
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(218, 218);
      RealMatrix realMatrix0 = blockRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix0);
      assertEquals(218, openMapRealMatrix0.getRowDimension());
      assertEquals(218, realMatrix0.getColumnDimension());
      assertEquals(218, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(221, 221);
      openMapRealMatrix0.addToEntry(165, 165, 165);
      RealMatrix realMatrix0 = openMapRealMatrix0.power(221);
      assertEquals(221, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(222, 222);
      openMapRealMatrix0.addToEntry(0, 12, 0.0);
      assertEquals(222, openMapRealMatrix0.getColumnDimension());
      assertEquals(222, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1863, 1863);
      openMapRealMatrix0.setEntry(0, 0, 1863);
      openMapRealMatrix0.multiplyEntry(0, 0, 1863);
      assertEquals(1863, openMapRealMatrix0.getColumnDimension());
      assertEquals(1863, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1873, 1873);
      openMapRealMatrix0.multiplyEntry(0, 0, (-830.26031));
      assertEquals(1873, openMapRealMatrix0.getColumnDimension());
      assertEquals(1873, openMapRealMatrix0.getRowDimension());
  }
}
