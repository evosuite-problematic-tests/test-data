/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 14:51:11 GMT 2019
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Cosh;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.function.Tan;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(1926.9625, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.13018258807536204, 0.13018258807536204);
      Cosh cosh0 = new Cosh();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(618, (UnivariateFunction) cosh0, goalType0, (double) 618, 0.13018258807536204, 48.843286);
      assertEquals(1.0558437361165198, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.13018258807536204, 0.13018258807536204);
      GoalType goalType0 = GoalType.MINIMIZE;
      Power power0 = new Power((-45.0));
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(618, (UnivariateFunction) power0, goalType0, (double) 618, (-45.0), (-45.0));
      assertEquals((-1.0044625310135162E42), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.13018258807536204, 0.13018258807536204);
      Power power0 = new Power((-45.0));
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(625, (UnivariateFunction) power0, goalType0, (double) 625, (-45.0), 0.13018258807536204);
      assertEquals(2.4930207457493403E-124, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1505.48140153, 1505.48140153);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Tan tan0 = new Tan();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1625512724, (UnivariateFunction) tan0, goalType0, (double) 1625512724, (double) 1625512724, 1505.48140153);
      assertEquals(0.7737369066276544, univariatePointValuePair0.getValue(), 0.01);
      assertEquals(1505.48140153, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.13018258807536204, 0.13018258807536204);
      Sigmoid sigmoid0 = new Sigmoid(618, 2609.1);
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(618, (UnivariateFunction) sigmoid0, goalType0, (double) 618, 147.9749571525902, (-736.606464385));
      assertEquals((-736.606464385), univariatePointValuePair0.getPoint(), 0.01);
      assertEquals(618.0, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1505.48140153, 1505.48140153);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Tan tan0 = new Tan();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1625512724, (UnivariateFunction) tan0, goalType0, (-760.559211417553), 1197.961684495426);
      assertEquals((-2.6523256515264024), univariatePointValuePair0.getValue(), 0.01);
      assertEquals(218.70123653893654, univariatePointValuePair0.getPoint(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }
}
