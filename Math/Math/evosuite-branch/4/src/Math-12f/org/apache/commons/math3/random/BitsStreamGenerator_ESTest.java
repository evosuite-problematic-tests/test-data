/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 14:31:59 GMT 2019
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      long long0 = iSAACRandom0.nextLong();
      assertEquals((-1449059586193220901L), long0);
      
      boolean boolean0 = iSAACRandom0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      int int0 = iSAACRandom0.nextInt();
      assertEquals((-337385477), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      float float0 = iSAACRandom0.nextFloat();
      assertEquals(0.9214462F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      boolean boolean0 = well512a0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      byte[] byteArray0 = new byte[5];
      well512a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-32), (byte)3, (byte) (-19), (byte) (-82)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      double double0 = well512a0.nextGaussian();
      assertEquals((-0.6744452302231269), double0, 0.01);
      
      double double1 = well512a0.nextGaussian();
      assertEquals((-0.2083723974303613), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      try { 
        well512a0.nextInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1);
      int int0 = well19937a0.nextInt(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      int int0 = well19937c0.nextInt(602135099);
      assertEquals(556141251, int0);
  }
}
