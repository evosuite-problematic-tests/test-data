/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 15:48:06 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D.angle(vector3D0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.ZERO.add(Double.POSITIVE_INFINITY, vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(1.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.04168701738764507, vector3D0);
      vector3D1.isInfinite();
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertFalse(vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      double double0 = vector3D0.NaN.getAlpha();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      String string0 = vector3D0.toString();
      assertEquals("{-1; 0; 0}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.getDelta();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2300.324477198), (-1809.708469320903));
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract((-5.661), vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals((-0.6205938792823223), vector3D0.getY(), 0.01);
      assertEquals((-0.15052653349096856), vector3D0.getZ(), 0.01);
      assertEquals(0.7695485687807565, vector3D0.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertTrue(vector3D1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.getNorm1();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      double double0 = vector3D0.NEGATIVE_INFINITY.getNormInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2300.324477198), (-1809.708469320903));
      Vector3D vector3D1 = vector3D0.normalize();
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertEquals((-0.6205938792823223), vector3D0.getY(), 0.01);
      assertEquals(0.7695485687807565, vector3D0.getX(), 0.01);
      assertEquals((-0.15052653349096856), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        vector3D0.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-68.658703905819), 3507.7, Double.NaN);
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(0.9999999999999999, vector3D2.getZ(), 0.01);
      assertEquals(-0.0, vector3D2.getX(), 0.01);
      assertEquals(0.9999999999999998, vector3D2.getNormSq(), 0.01);
      assertEquals(0.019569961819605075, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = vector3D0.PLUS_K.add(vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.orthogonal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-68.658703905819), (-68.658703905819), Double.NaN);
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D0.PLUS_K.subtract(vector3D1);
      Vector3D vector3D3 = vector3D2.orthogonal();
      assertEquals(0.5773502691896258, vector3D3.getZ(), 0.01);
      assertEquals(0.8164965809277261, vector3D3.getY(), 0.01);
      assertEquals(0.7071067811865476, vector3D2.getX(), 0.01);
      assertEquals(1.0000000000000002, vector3D3.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-68.658703905819), (-68.658703905819), Double.NaN);
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.7071067811865476, vector3D2.getY(), 0.01);
      assertEquals(0.7071067811865476, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D1, vector3D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-1.0));
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.714558826463239), Double.NEGATIVE_INFINITY, 316.61320201);
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1.714558826463239), vector3D0.getX(), 0.01);
      assertEquals(316.61320201, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2300.324477198), (-1809.708469320903));
      vector3D0.NaN.hashCode();
      assertEquals((-0.6205938792823223), vector3D0.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
      assertEquals(0.7695485687807565, vector3D0.getX(), 0.01);
      assertEquals((-0.15052653349096856), vector3D0.getZ(), 0.01);
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(vector3D0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-68.658703905819), (-68.658703905819), Double.NaN);
      boolean boolean0 = vector3D0.isNaN();
      assertTrue(boolean0);
      assertEquals((-68.658703905819), vector3D0.getX(), 0.01);
      assertEquals((-68.658703905819), vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.714558826463239), Double.NEGATIVE_INFINITY, 316.61320201);
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
      assertEquals((-1.714558826463239), vector3D0.getX(), 0.01);
      assertEquals(316.61320201, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2300.324477198), (-1809.708469320903));
      Vector3D vector3D1 = new Vector3D((-5.661), (-772.4253260021721), 5.3505859105009375E12);
      Vector3D vector3D2 = new Vector3D(8.0E298, vector3D0, 8.0E298, vector3D1, 2775.1772135064, vector3D1, 0.7070360705084289, vector3D0);
      boolean boolean0 = vector3D2.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, vector3D2.getZ(), 0.01);
      assertTrue(boolean0);
      assertEquals((-3.913161144975394E299), vector3D2.getX(), 0.01);
      assertEquals((-6.1843673590516355E301), vector3D2.getY(), 0.01);
      assertEquals((-0.15052653349096856), vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2300.2629, 2.2250738585072014E-308);
      boolean boolean0 = vector3D0.equals((Object) null);
      assertEquals(0.5786541817655912, vector3D0.getY(), 0.01);
      assertEquals(0.8155730120137583, vector3D0.getX(), 0.01);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.2250738585072014E-308, vector3D0.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = new Vector3D(1256.66246, vector3D0, 2179.6, vector3D0, 1256.66246, vector3D0, 0.7853981633974483, vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.subtract(vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getZ(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getX(), 0.01);
      assertFalse(vector3D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.ZERO;
      Vector3D vector3D2 = new Vector3D(-0.0, vector3D0, (-1340.3254434), vector3D1);
      boolean boolean0 = vector3D1.equals(vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertTrue(boolean0);
      assertEquals(-0.0, vector3D2.getZ(), 0.01);
      assertEquals(-0.0, vector3D2.getY(), 0.01);
      assertEquals(-0.0, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D(1.0, vector3D0, 2683.0840848871, vector3D0, (-3407.89), vector3D0, (-3407.89), vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(boolean0);
      assertEquals(1.7070911134960618E7, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-68.658703905819), (-68.658703905819), Double.NaN);
      vector3D0.POSITIVE_INFINITY.hashCode();
      assertEquals((-68.658703905819), vector3D0.getY(), 0.01);
      assertEquals((-68.658703905819), vector3D0.getX(), 0.01);
      assertTrue(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }
}
