/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 17:04:30 GMT 2019
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexFormat_ESTest extends ComplexFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("0 + 1i");
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.parse("0 + 1i", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=5]", parsePosition0.toString());
      assertEquals(5, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("0 + 1i", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("\"+", decimalFormatSymbols0);
      ComplexFormat complexFormat0 = new ComplexFormat(decimalFormat0, decimalFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-159.8));
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("(Infinity) - 159.8i", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("(NaN) + (NaN)i", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("0 + 1i");
      Long long0 = new Long(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "0 + 1i");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      complexFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
      assertEquals("0 + 1i0", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComplexFormat.formatComplex((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "z7G155";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      ComplexFormat complexFormat0 = new ComplexFormat("z7G155", choiceFormat0);
      Complex complex0 = complexFormat0.parse("z7G155");
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.parse("(NaN) + (NaN)i", parsePosition0);
      assertEquals(8, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=14,errorIndex=8]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      try { 
        complexFormat0.parse("1JwYP@tG1%KfDa&*");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"1JwYP@tG1%KfDa&*\"
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.parseObject("9+trGIoZ'?T4|#z!", parsePosition0);
      assertEquals(2, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=2]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      complexFormat0.parse("5 ", parsePosition0);
      assertEquals(1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      // Undeclared exception!
      try { 
        complexFormat0.setImaginaryCharacter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("(NaN) + (NaN)i");
      ComplexFormat complexFormat0 = new ComplexFormat("(NaN) + (NaN)i", choiceFormat0);
      // Undeclared exception!
      try { 
        complexFormat0.setImaginaryCharacter("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(" + ", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      // Undeclared exception!
      try { 
        complexFormat0.setRealFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
         verifyException("org.apache.commons.math.complex.ComplexFormat", e);
      }
  }
}
