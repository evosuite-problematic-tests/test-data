/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 14:49:18 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FDistribution_ESTest extends FDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.218440703602533E-170, 4.218440703602533E-170);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(4.218440703602533E-170, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.4144260887357508E16, double0, 0.01);
      assertEquals(4.218440703602533E-170, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      FDistribution fDistribution0 = new FDistribution(well19937c0, 1.0, 1.0, 680.6357999299822);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.218440703602533E-170, 4.218440703602533E-170);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(4.218440703602533E-170, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(4.218440703602533E-170, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.218440703602533E-170, 4.218440703602533E-170);
      double double0 = fDistribution0.density(0L);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4.218440703602533E-170, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(4.218440703602533E-170, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1722.77037031, (-862.114076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-862.114)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(964.592326, 964.592326, 964.592326);
      // Undeclared exception!
      fDistribution0.sample(439);
  }
}
