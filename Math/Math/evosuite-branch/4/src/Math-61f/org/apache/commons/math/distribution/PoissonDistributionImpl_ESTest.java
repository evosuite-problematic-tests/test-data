/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 15:54:53 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PoissonDistributionImpl_ESTest extends PoissonDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.3333333333333333, 0.3333333333333333);
      poissonDistributionImpl0.inverseCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 1.0E-12, 0);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(1.0E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.3333333333333333, 0.3333333333333333);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(0, int0);
      assertEquals(0.3333333333333333, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(62.0855721216322);
      assertEquals(62.0855721216322, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-42.0001755), (-2329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -42 is smaller than, or equal to, the minimum (0): mean (-42)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.3333333333333333, 0.3333333333333333);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(897);
      assertEquals(0.3333333333333333, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.3333333333333333, 0.3333333333333333);
      double double0 = poissonDistributionImpl0.probability((-2257));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.3333333333333333, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.3333333333333333, 0.3333333333333333);
      double double0 = poissonDistributionImpl0.probability(897);
      assertEquals(0.3333333333333333, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(988.75896294897, 988.75896294897);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(988.75896294897, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 1.0E-12, 0);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.999999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.3333333333333333, 0.3333333333333333);
      double double0 = poissonDistributionImpl0.cumulativeProbability((double) (-2257));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.3333333333333333, poissonDistributionImpl0.getMean(), 0.01);
  }
}
