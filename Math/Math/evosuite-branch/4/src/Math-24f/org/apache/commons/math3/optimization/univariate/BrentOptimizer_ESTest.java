/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 14:53:04 GMT 2019
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asinh;
import org.apache.commons.math3.analysis.function.Log10;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Sqrt;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.1246747374534607, 0.1246747374534607);
      Asinh asinh0 = new Asinh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2286, (UnivariateFunction) asinh0, goalType0, (double) 2286, 287.8170449, (-1.0624985110080394E-7));
      assertEquals(1855.2884334503242, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(1926.9625, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.19999998807907104, 0.19999998807907104);
      Sqrt sqrt0 = new Sqrt();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1610612736, (UnivariateFunction) sqrt0, goalType0, (double) 1610612736, 2.135688304901123);
      assertEquals(1.8023832135191304, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.1246747374534607, 0.1246747374534607);
      GoalType goalType0 = GoalType.MAXIMIZE;
      Log10 log10_0 = new Log10();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(549, (UnivariateFunction) log10_0, goalType0, 2461.0, (-4.794765976694151E-8));
      assertEquals(3.2990692582868024, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.1246747374534607, 0.1246747374534607);
      Sinc sinc0 = new Sinc();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2461, (UnivariateFunction) sinc0, goalType0, (-1.0), 3.0, 0.1246747374534607);
      assertEquals(0.9999597322510382, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.1246747374534607, 0.1246747374534607);
      Asinh asinh0 = new Asinh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(625, (UnivariateFunction) asinh0, goalType0, (double) 625, 287.8170449, (-1.0624985110080394E-7));
      assertEquals(537.1090789828162, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.1246747374534607, 0.1246747374534607);
      Sinc sinc0 = new Sinc();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2461, (UnivariateFunction) sinc0, goalType0, (-1.0), 3.0, (-2678.8556013120797));
      assertEquals(4.78631163928049E-4, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.1246747374534607, 0.1246747374534607);
      Power power0 = new Power((-2678.8556013120797));
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2461, (UnivariateFunction) power0, goalType0, (double) 2461, (-2678.8556013120797), (-2678.8556013120797));
      assertEquals((-1928.9607753201021), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2287.239738734411, 2848.542);
      Sinc sinc0 = new Sinc();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1710, (UnivariateFunction) sinc0, goalType0, 2848.542, 2409.77123135147, 0.0);
      assertEquals(1.0, univariatePointValuePair0.getValue(), 0.01);
      assertEquals(0.0, univariatePointValuePair0.getPoint(), 0.01);
      assertNotNull(univariatePointValuePair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(0.1246747374534607, 0.1246747374534607);
      Power power0 = new Power((-2654.34));
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(625, (UnivariateFunction) power0, goalType0, (double) 625, (-2654.34), (-2654.34));
      assertEquals((-1401.7435806670806), univariatePointValuePair0.getPoint(), 0.01);
  }
}
