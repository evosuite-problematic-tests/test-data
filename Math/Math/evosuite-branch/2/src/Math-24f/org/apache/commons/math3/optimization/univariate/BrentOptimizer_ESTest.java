/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 19:50:39 GMT 2019
 */

package org.apache.commons.math3.optimization.univariate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Log10;
import org.apache.commons.math3.analysis.function.Minus;
import org.apache.commons.math3.analysis.function.Sinh;
import org.apache.commons.math3.analysis.function.Ulp;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BrentOptimizer_ESTest extends BrentOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer((-749.006), (-749.006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -749.006 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = null;
      try {
        brentOptimizer0 = new BrentOptimizer(2.718281828459045, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optimization.univariate.BrentOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.1801546561348337E-10, 1.1801546561348337E-10);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2816, (UnivariateFunction) ulp0, goalType0, 1.1801546561348337E-10, (-0.6824190857782156), 0.5);
      assertEquals(1.802220635692237E-7, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.1801546561348337E-10, 1.1801546561348337E-10);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(148, (UnivariateFunction) ulp0, goalType0, 5560.0, 1484.1471760473864);
      assertEquals(2743.6549644168113, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.1801546561348337E-10, 1.1801546561348337E-10);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(729, (UnivariateFunction) ulp0, goalType0, (-7.840700800172075), (double) 729, 1.1801546561348337E-10);
      assertEquals(1.2924697071141057E-26, univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.1801546561348337E-10, 1.1801546561348337E-10);
      Ulp ulp0 = new Ulp();
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2816, (UnivariateFunction) ulp0, goalType0, 1.1801546561348337E-10, 1484.1471760473864, 616.511725);
      assertEquals(616.5117251709477, univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1.1801546561348337E-10, 1.1801546561348337E-10);
      GoalType goalType0 = GoalType.MINIMIZE;
      Log10 log10_0 = new Log10();
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1455, (UnivariateFunction) log10_0, goalType0, (double) 0, (-3693.71601), (-368.1463909706839));
      assertEquals((-368.14639101581844), univariatePointValuePair0.getPoint(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(3.0, 3.0);
      Minus minus0 = new Minus();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(3394, (UnivariateFunction) minus0, goalType0, 3.0, (double) 3394);
      assertNotNull(univariatePointValuePair0);
      assertEquals(1698.5, univariatePointValuePair0.getPoint(), 0.01);
      assertEquals((-1698.5), univariatePointValuePair0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(3.3888561478632076E-8, 445.416);
      Sinh sinh0 = new Sinh();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(814, (UnivariateFunction) sinh0, goalType0, 3.3888561478632076E-8, (-7.049068240916723E166), (double) 814);
      assertEquals(368.58397241471096, univariatePointValuePair0.getPoint(), 0.01);
  }
}
