/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 19:35:29 GMT 2019
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = FastMath.round(2515.0994F);
      assertEquals(2515, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = FastMath.expm1(1700L);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = FastMath.acosh(0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = FastMath.nextUp(109.45235F);
      assertEquals(109.452354F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = FastMath.IEEEremainder(965.3485080611, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = FastMath.nextUp(0.0);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FastMath.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = FastMath.getExponent((-1853.1035F));
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = FastMath.log(0.0, (-1948.4268));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = FastMath.atan2(4.9E-324, (-376.32910236));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = FastMath.toRadians(5.515817703577808E-8);
      assertEquals(9.626917986722536E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = FastMath.cosh(174.8);
      assertEquals(4.1081419454382006E75, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = FastMath.cosh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = FastMath.cosh((-3351.85551733726));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = FastMath.cosh(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = FastMath.cosh(0.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = FastMath.cosh((-581.4096068495));
      assertEquals(1.5920400345566686E252, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = FastMath.cosh((-1.6471487337453832E-9));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = FastMath.sinh((-3351.85551733726));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = FastMath.sinh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = FastMath.sinh(4.1081419454382006E75);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = FastMath.sinh(604);
      assertEquals(1.0299996423413594E262, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = FastMath.sinh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = FastMath.sinh((-320.599287));
      assertEquals((-8.57968317014682E138), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = FastMath.sinh((-1.2640304072937576E-66));
      assertEquals((-1.2640304072937576E-66), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = FastMath.sinh(1.0);
      assertEquals(1.1752011936438014, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = FastMath.tanh(174.8);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = FastMath.tanh(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = FastMath.tanh((-1085.9065195743797));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = FastMath.tanh(0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = FastMath.tanh(1.01);
      assertEquals(0.7657620182484389, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = FastMath.tanh((-2.327375671320742E-9));
      assertEquals((-2.327375671320742E-9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = FastMath.asinh(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = FastMath.asinh((-0.16624882440418567));
      assertEquals((-0.16549237924768279), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = FastMath.asinh(0.087);
      assertEquals(0.08689062164014465, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = FastMath.asinh(0.006737947463989258);
      assertEquals(0.006737896481300189, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = FastMath.atanh(0.25);
      assertEquals(0.25541281188299536, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = FastMath.atanh((-20.0));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = FastMath.atanh(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = FastMath.atanh(0.0912622028370442);
      assertEquals(0.09151684446473522, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = FastMath.atanh((-0.054040470930419894));
      assertEquals((-0.05409316940248764), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = FastMath.atanh(0.017453292012914998);
      assertEquals(0.01745506452904679, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = FastMath.signum((double) Float.POSITIVE_INFINITY);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = FastMath.signum((double) (-1691.0F));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = FastMath.signum(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = FastMath.signum(1330.82F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = FastMath.signum((-3799.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = FastMath.signum((float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = FastMath.exp((-1.0F));
      assertEquals(0.36787944117144233, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = FastMath.expm1((-3142.82));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = FastMath.pow(3033.2, (-90.0));
      assertEquals(4.2550605224E-314, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = FastMath.expm1((-724.48848834));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = FastMath.expm1(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = FastMath.expm1(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = FastMath.expm1((-0.9723320396912798));
      assertEquals((-0.6217999685842484), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = FastMath.log1p((-1388.2291));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = FastMath.asinh(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = FastMath.log10(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = FastMath.log(4.9E-324, 559.4439685749);
      assertEquals((-0.00849892908219663), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = FastMath.pow(0.5483922958374023, 232.53387);
      assertEquals(2.1374733903747848E-61, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = FastMath.log(4.5604151934208014E-10, 1.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = FastMath.log1p(6.1035156E-5F);
      assertEquals(6.103329368063853E-5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = FastMath.log1p((-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = FastMath.log1p(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = FastMath.log1p(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = FastMath.log10(2551L);
      assertEquals(3.40671045860979, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = FastMath.pow(0.9203974648637021, (double) -0.0F);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = FastMath.pow(Double.NaN, (double) Float.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = FastMath.pow((double) 0.0F, 1.8737273216247559);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, 3.1660099222737955E-7);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, (double) (-1716));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, (-922.58524318));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = FastMath.pow(-0.0, (double) (-1737));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, 914.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, 1.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = FastMath.pow((double) -0.0F, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.POSITIVE_INFINITY, (-2270.0934));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.POSITIVE_INFINITY, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.POSITIVE_INFINITY, 0.07490822288864472);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = FastMath.pow(0.3796453528383496, Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = FastMath.pow(1.0, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = FastMath.pow((-1396.60914595752), Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (double) 1124.0F);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (-426.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = FastMath.pow((double) Float.NEGATIVE_INFINITY, (-1931.0));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, 4663.924299079726);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = FastMath.pow(Double.NEGATIVE_INFINITY, (double) 1147.0F);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = FastMath.pow(0.6946583704589981, (double) Float.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = FastMath.pow((double) (-1.0F), (double) Float.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = FastMath.pow(2.718281828459045, (double) Float.NEGATIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = FastMath.pow((-553.7263), 1.792783182582235E246);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = FastMath.pow((double) (-383.3F), (-2.774475773922311E-8));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = FastMath.pow((-646.579), (-2.1148559453164693E121));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = FastMath.pow((-1677.0), (-1677.0));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = FastMath.pow((-1737.3033945504), (double) 2798L);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = FastMath.pow(8.623968972387222E211, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = FastMath.pow((double) 5.6E-45F, (-8.0E298));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = FastMath.pow((-3221.0), 1130);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = FastMath.pow((double) 1073741824L, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = FastMath.pow((-496.5), (-127));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = FastMath.sin(0.9709409229047467);
      assertEquals(0.8254172513864299, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = FastMath.tan((-3558.0F));
      assertEquals(6.785501571574411, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = FastMath.tan(1.4E-45F);
      assertEquals(1.401298464324817E-45, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = FastMath.cos(1.7976931348623157E308);
      assertEquals((-0.9999876894265599), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = FastMath.sin((-4.503599627370496E15));
      assertEquals((-0.8742173026236351), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = FastMath.tan(1.2773080633674971E271);
      assertEquals((-1.3559587299497569), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = FastMath.cos(1.5920400345566686E252);
      assertEquals((-0.9888076547492008), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = FastMath.cos(2.85040095144011776E17);
      assertEquals((-0.00918780066381382), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = FastMath.tan(1.34217729E8);
      assertEquals(0.13219648304406315, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = FastMath.sin((-9.007199254740992E15));
      assertEquals(0.848925964814655, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = FastMath.cos(2.7878862E7F);
      assertEquals((-0.33828384008646367), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = FastMath.cos(4.056482E31F);
      assertEquals((-0.7968298860912986), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = FastMath.sin(0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = FastMath.sin(-0.0F);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = FastMath.sin(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = FastMath.sin(Double.NEGATIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = FastMath.sin((-513.0));
      assertEquals(0.7958423494121123, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = FastMath.sin((-1645.644426));
      assertEquals(0.5227933480297391, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = FastMath.sin(1624.44694649);
      assertEquals((-0.2411441150810901), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = FastMath.cos((-1419.52051269073));
      assertEquals(0.8872871749457412, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = FastMath.cos(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = FastMath.cos(Float.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = FastMath.cos(0.9489846229553223);
      assertEquals(0.5825087128984554, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = FastMath.tan(-0.0F);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = FastMath.tan(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = FastMath.tan(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = FastMath.tan(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = FastMath.tan(3.141592653589793);
      assertEquals((-1.2246467991473532E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = FastMath.atan(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = FastMath.atan2(6.119114404399683E189, 829.849079);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = FastMath.atan(0.12090293326182834);
      assertEquals(0.12031894631402214, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = FastMath.atan2(0.041666663879186654, (-782.1699));
      assertEquals(3.1415393829847242, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = FastMath.atan2((-2604.730469), (-0.6958100166873123));
      assertEquals((-1.5710634600005842), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = FastMath.atan2(2.0217439756338078E-10, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NaN, 0.7249995199969751);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = FastMath.atan2(0, (-4.9E-324));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = FastMath.atan2(0, Double.NEGATIVE_INFINITY);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = FastMath.atan2(0.0, Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double double0 = FastMath.atan2(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = FastMath.atan2(-0.0, -0.0);
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = FastMath.atan2(Float.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(2.356194490192345, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = FastMath.atan2(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY);
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = FastMath.atan2(Double.POSITIVE_INFINITY, 1.225743062930824E-8);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, 935.0F);
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals((-0.7853981633974483), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = FastMath.atan2(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = FastMath.atan2(305.99371337890625, Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = FastMath.atan2((-286.99062), Double.POSITIVE_INFINITY);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = FastMath.atan2(4.9E-324, Double.NEGATIVE_INFINITY);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = FastMath.atan2((-7.475571347653619E-8), Double.NEGATIVE_INFINITY);
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = FastMath.atan2(1.5, -0.0F);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = FastMath.atan2((-7.1362384635297994E44), 0.0);
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = FastMath.atan2((-410.7612), 4.9E-324);
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = FastMath.atan2(814.9725563357954, (-4.9E-324));
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = FastMath.asin((-0.2411441150810901));
      assertEquals((-0.24354458407696872), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = FastMath.asin(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = FastMath.asin(2.1503376960754395);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = FastMath.asin((-98.339554447387));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = FastMath.asin(1.0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = FastMath.asin((-1));
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = FastMath.asin(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = FastMath.acos(Float.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = FastMath.acos(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = FastMath.acos(0.036);
      assertEquals(1.534788546256432, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = FastMath.acos((-2135.8));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = FastMath.acos((-1.0));
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = FastMath.acos(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = FastMath.acos(0.0);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = FastMath.acos(4.9E-324);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = FastMath.acos((-1.0410796803072208E-7));
      assertEquals(1.5707964309028646, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = FastMath.cbrt((-638.0));
      assertEquals((-8.608752581806055), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = FastMath.cbrt(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = FastMath.cbrt((-4.9E-324));
      assertEquals((-1.7031839360032603E-108), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = FastMath.cbrt(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = FastMath.toRadians(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = FastMath.toRadians(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = FastMath.toRadians((-4.9E-324));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = FastMath.toDegrees(Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = FastMath.toDegrees((-0.09088450866185192));
      assertEquals((-5.2072987694442885), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = FastMath.toDegrees(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = FastMath.abs(3745);
      assertEquals(3745, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = FastMath.abs((-1346));
      assertEquals(1346, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long long0 = FastMath.abs(4029L);
      assertEquals(4029L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long long0 = FastMath.abs((-1759L));
      assertEquals(1759L, long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float float0 = FastMath.abs(1.4E-45F);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      float float0 = FastMath.ulp(0.0F);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float float0 = FastMath.abs(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = FastMath.hypot(1484.4558, 1.633123935319537E16);
      assertEquals(1.633123935319537E16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double double0 = FastMath.abs(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double double0 = FastMath.ulp((-3.314051560952014E-254));
      assertEquals(3.785766995733679E-270, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = FastMath.ulp((double) Float.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float float0 = FastMath.ulp(Float.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double double0 = FastMath.hypot(0.0, 4.9E-324);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = FastMath.scalb((-1080.18178), 1124);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double double0 = FastMath.scalb(Double.NaN, (-1059));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double double0 = FastMath.scalb((double) Float.POSITIVE_INFINITY, 1815);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double double0 = FastMath.scalb((double) 0L, (-4253));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double double0 = FastMath.scalb(2337.78639762, (-2889));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double double0 = FastMath.scalb((-1500.804626), (-4382));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double double0 = FastMath.scalb((-915.8296643411288), 2474);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double double0 = FastMath.scalb(920.2, 2474);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double double0 = FastMath.scalb((-4.7208848667217906E221), (-1059));
      assertEquals((-7.642896893932564E-98), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double double0 = FastMath.scalb(2.893485277253286E-8, (-1477));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double double0 = FastMath.scalb(1022.985014, (-1078));
      assertEquals(3.16E-322, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double double0 = FastMath.scalb((-1.7332235571505177E184), (-1716));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double double0 = FastMath.scalb(1.3760224336599815E-308, 1333);
      assertEquals(2.5799407632904296E93, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double double0 = FastMath.scalb((-2.321064927632431E-160), 1120);
      assertEquals((-3.3058445873971203E177), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double double0 = FastMath.scalb(0.9999999999999999, 1185);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float float0 = FastMath.scalb((float) (-2889), (-2889));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      float float0 = FastMath.scalb(2228.3162F, 2146107135);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      float float0 = FastMath.scalb((float) (-2889), 38);
      assertEquals((-7.9412227E14F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float float0 = FastMath.scalb(Float.NaN, 1771);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float float0 = FastMath.scalb(Float.NEGATIVE_INFINITY, 348);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float float0 = FastMath.scalb(-0.0F, 1871);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      float float0 = FastMath.scalb(1.0F, (-1477));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = FastMath.scalb((-2313.0916F), (-189));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float float0 = FastMath.scalb((-1.0F), 1124);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      float float0 = FastMath.scalb(1.1920929E-7F, 128);
      assertEquals(4.056482E31F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float float0 = FastMath.scalb((float) (-651), (-127));
      assertEquals((-3.826234E-36F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float float0 = FastMath.scalb(305.9937F, (-140));
      assertEquals(2.1954E-40F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float float0 = FastMath.scalb((-1039.12F), (-140));
      assertEquals((-7.45531E-40F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      float float0 = FastMath.scalb(1466.3235F, (-275));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float float0 = FastMath.scalb((-1.4E-45F), 235);
      assertEquals((-7.7371252E25F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float float0 = FastMath.scalb(669.1308F, 136);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = FastMath.scalb((-1225.41F), 163);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = FastMath.nextUp(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double double0 = FastMath.nextAfter(1213.7, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double double0 = FastMath.nextUp((double) Float.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = FastMath.nextUp((double) Float.NEGATIVE_INFINITY);
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double double0 = FastMath.nextAfter(Double.POSITIVE_INFINITY, 1.9699272335463627E-8);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double double0 = FastMath.nextAfter(1377.903862961, 9.313225746154785E-10);
      assertEquals(1377.9038629609997, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = FastMath.nextAfter(0.0, (-7.126913872617518E298));
      assertEquals((-4.9E-324), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double double0 = FastMath.nextAfter(486.56, 753.9978037106191);
      assertEquals(486.56000000000006, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double double0 = FastMath.nextAfter((-2.1107505595938305E-255), 0.0);
      assertEquals((-2.1107505595938303E-255), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.NaN, (double) (-2780.9695F));
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      float float0 = FastMath.nextAfter((float) (-1759L), Double.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      float float0 = FastMath.nextAfter((float) 0, 0.0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.NEGATIVE_INFINITY, 2683.4627187969);
      assertEquals((-3.4028235E38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float float0 = FastMath.nextAfter(Float.POSITIVE_INFINITY, 2.9850404523368767E-171);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      float float0 = FastMath.nextAfter((float) 0, (-12.81661));
      assertEquals((-1.4E-45F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float float0 = FastMath.nextUp((float) 0);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      float float0 = FastMath.nextAfter(2.7878862E7F, (-217.0));
      assertEquals(2.787886E7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      float float0 = FastMath.nextAfter((-186.6244F), 2.092571258544922);
      assertEquals((-186.62439F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double double0 = FastMath.rint(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double double0 = FastMath.ceil(1.0299996423413594E262);
      assertEquals(1.0299996423413594E262, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double double0 = FastMath.rint((-7.126913872617518E298));
      assertEquals((-7.126913872617518E298), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      long long0 = FastMath.round((-496.5));
      assertEquals((-496L), long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double double0 = FastMath.floor(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double double0 = FastMath.ceil(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double double0 = FastMath.ceil((-0.9999816366415321));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double double0 = FastMath.ceil(3436.39330897559);
      assertEquals(3437.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double double0 = FastMath.rint((-3.5392250480081715E-9));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double double0 = FastMath.rint(571.52826F);
      assertEquals(572.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double double0 = FastMath.rint(1693.5);
      assertEquals(1694.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = FastMath.min(0, (-1076));
      assertEquals((-1076), int0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = FastMath.min(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      long long0 = FastMath.min((long) 750, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      long long0 = FastMath.min(2350L, 2147483648L);
      assertEquals(2350L, long0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      float float0 = FastMath.min(305.9937F, 6298.171F);
      assertEquals(305.9937F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      float float0 = FastMath.min(1.4E-45F, (-4809.359F));
      assertEquals((-4809.359F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      float float0 = FastMath.min(5379.678F, 5379.678F);
      assertEquals(5379.678F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      float float0 = FastMath.min(Float.NaN, (-2189.103F));
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      float float0 = FastMath.min(-0.0F, -0.0F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double double0 = FastMath.min(7.182751783233274, 701.0);
      assertEquals(7.182751783233274, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double double0 = FastMath.min((double) Float.POSITIVE_INFINITY, 667.9171715611255);
      assertEquals(667.9171715611255, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double double0 = FastMath.min(Double.NaN, 3276.3664545);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double double0 = FastMath.min((-1166.61), (-1166.61));
      assertEquals((-1166.61), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double double0 = FastMath.min((double) -0.0F, (double) -0.0F);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      int int0 = FastMath.max(1040, 0);
      assertEquals(1040, int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = FastMath.max(10, 4359);
      assertEquals(4359, int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      long long0 = FastMath.max(1759L, (long) (-1759));
      assertEquals(1759L, long0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      long long0 = FastMath.max((-2139L), (-2139L));
      assertEquals((-2139L), long0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      float float0 = FastMath.max((float) 1124, (float) 1124);
      assertEquals(1124.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      float float0 = FastMath.max(6298.171F, (-1347.3334F));
      assertEquals(6298.171F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      float float0 = FastMath.max((-45.5F), 1866.0F);
      assertEquals(1866.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      float float0 = FastMath.max(1.0F, Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      float float0 = FastMath.max(-0.0F, -0.0F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double double0 = FastMath.max(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double double0 = FastMath.max((-20.0), (-475.917181665976));
      assertEquals((-20.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double double0 = FastMath.max((double) (-383.3F), 0.370591097816566);
      assertEquals(0.370591097816566, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double double0 = FastMath.max(0.6583468721386657, 0.6583468721386657);
      assertEquals(0.6583468721386657, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double double0 = FastMath.max(-0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double double0 = FastMath.hypot(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double double0 = FastMath.hypot((-965.2948), Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double double0 = FastMath.hypot(Double.NaN, (-2941.71));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double double0 = FastMath.hypot((-8.220283439582378E-249), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double double0 = FastMath.hypot(1377.9038629609997, 9.313225746154785E-10);
      assertEquals(1377.9038629609997, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double double0 = FastMath.copySign(Double.NEGATIVE_INFINITY, (-881.042661554556));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double double0 = FastMath.copySign(1.1368683772161603E-13, (-1969.93));
      assertEquals((-1.1368683772161603E-13), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double double0 = FastMath.copySign(Double.NEGATIVE_INFINITY, (double) 934.99994F);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      float float0 = FastMath.copySign((-748.5F), 0.0F);
      assertEquals(748.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      float float0 = FastMath.copySign(1.4E-45F, 208.287F);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      float float0 = FastMath.copySign(0.0F, (-1815.0419F));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      float float0 = FastMath.copySign((-1484.0F), (-1484.0F));
      assertEquals((-1484.0F), float0, 0.01F);
  }
}
