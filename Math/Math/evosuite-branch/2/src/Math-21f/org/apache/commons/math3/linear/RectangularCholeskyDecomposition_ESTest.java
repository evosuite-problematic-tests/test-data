/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 19:46:32 GMT 2019
 */

package org.apache.commons.math3.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RectangularCholeskyDecomposition_ESTest extends RectangularCholeskyDecomposition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(31, 31);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, 0.0);
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(31, 31);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(array2DRowRealMatrix0, 0.0);
      RealMatrix realMatrix0 = rectangularCholeskyDecomposition0.getRootMatrix();
      assertEquals(31, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1217.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(arrayRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 0.0);
      assertEquals(3, rectangularCholeskyDecomposition0.getRank());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 1425.9014928250274;
      doubleArray1[1] = (Double) 5.2240336371356666E-9;
      doubleArray1[2] = (Double) (-1372.0);
      doubleArray1[3] = (Double) 5.2240336371356666E-9;
      doubleArray1[4] = (Double) (-1428.53);
      doubleArray1[5] = (Double) openMapRealVector0.DEFAULT_ZERO_TOLERANCE;
      doubleArray1[6] = (Double) 1425.9014928250274;
      doubleArray1[7] = (Double) (-1372.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(arrayRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 2561.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (2,561): not positive definite matrix: value 0 at index 0
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2561.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 1425.9014928250274;
      doubleArray1[1] = (Double) 5.2240336371356666E-9;
      doubleArray1[2] = (Double) (-1372.0);
      doubleArray1[3] = (Double) 5.2240336371356666E-9;
      doubleArray1[4] = (Double) (-1428.53);
      doubleArray1[5] = doubleArray1[3];
      doubleArray1[6] = (Double) 1425.9014928250274;
      doubleArray1[7] = (Double) (-1372.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(arrayRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 2561.0);
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2561.0;
      doubleArray0[1] = (-1428.53);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 1425.9014928250274;
      doubleArray1[1] = (Double) 5.2240336371356666E-9;
      doubleArray1[2] = (Double) (-1372.0);
      doubleArray1[3] = (Double) 5.2240336371356666E-9;
      doubleArray1[4] = (Double) (-1428.53);
      doubleArray1[5] = doubleArray1[2];
      doubleArray1[6] = (Double) 1425.9014928250274;
      doubleArray1[7] = (Double) (-1372.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      RealMatrix realMatrix0 = openMapRealVector0.outerProduct(arrayRealVector0);
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition(realMatrix0, 2561.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,136,210.179 is smaller than, or equal to, the minimum (2,561): not positive definite matrix: value -1,136,210.179 at index 2
         //
         verifyException("org.apache.commons.math3.linear.RectangularCholeskyDecomposition", e);
      }
  }
}
