/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 19:29:29 GMT 2019
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      long long0 = mersenneTwister0.nextLong();
      assertEquals(4899729490359568901L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      float float0 = mersenneTwister0.nextFloat();
      assertEquals(0.26561487F, float0, 0.01F);
      
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well512a well512a0 = new Well512a(450L);
      boolean boolean0 = well512a0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2482L);
      byte[] byteArray0 = new byte[5];
      well1024a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)103, (byte)14, (byte) (-67), (byte) (-19)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      double double0 = well19937a0.nextGaussian();
      assertEquals((-0.15156088802574638), double0, 0.01);
      
      double double1 = well19937a0.nextGaussian();
      assertEquals(0.2712279725332432, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well44497a well44497a0 = new Well44497a(intArray0);
      try { 
        well44497a0.nextInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[2];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      int int0 = iSAACRandom0.nextInt(4);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(877);
      well1024a0.next(877);
      well1024a0.nextInt();
      int int0 = well1024a0.nextInt(877);
      assertEquals(654, int0);
      
      int int1 = well1024a0.nextInt();
      assertEquals((-2132241173), int1);
      
      int int2 = well1024a0.nextInt(1400572556);
      assertEquals(1103355931, int2);
  }
}
