/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 20:15:45 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BracketingNthOrderBrentSolver_ESTest extends BracketingNthOrderBrentSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(2130.796, (-2444.045886), 4);
      int int0 = bracketingNthOrderBrentSolver0.getMaximalOrder();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(719.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-705.379177632), (-705.379177632), (-705.379177632), (-248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -248 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 20, 20, 20);
      Logit logit0 = new Logit(0.0, 20);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(20, (UnivariateFunction) logit0, 0.0, Double.NaN, (double) 20, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(20, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(2130.796, (-2444.045886), 4);
      Sigmoid sigmoid0 = new Sigmoid(814.0, 1231.0);
      UnivariateFunction univariateFunction0 = sigmoid0.derivative();
      double double0 = bracketingNthOrderBrentSolver0.solve(4, univariateFunction0, (-3989.7776));
      assertEquals(4, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-3989.7776), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(1534.0, 3620);
      Rint rint0 = new Rint();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(3620, (UnivariateFunction) rint0, 1.0E-15, 2438.37, allowedSolution0);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 0.0, 4);
      Logit logit0 = new Logit(0.0, 4);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        bracketingNthOrderBrentSolver0.solve(4, (UnivariateFunction) logit0, Double.NaN, Double.NaN, (double) 4, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.3648174940240123, 0.3648174940240123, 20);
      Floor floor0 = new Floor();
      double double0 = bracketingNthOrderBrentSolver0.solve(20, (UnivariateFunction) floor0, (-812.0), 0.3648174940240123);
      assertEquals(0.3648174940240123, double0, 0.01);
      assertEquals(20, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Tanh tanh0 = new Tanh();
      double double0 = bracketingNthOrderBrentSolver0.solve(30, (UnivariateFunction) tanh0, (-2369.18337347), (double) 30, (-5.6873608924042784));
      assertEquals(2.4740209880746988E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-0.6169505956465189), (-0.6169505956465189), 19);
      Logit logit0 = new Logit((-0.6169505956465189), 19);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(19, (UnivariateFunction) logit0, (-0.6169505956465189), Double.NaN, (double) 19, allowedSolution0);
      assertEquals(19, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(9.19152470217674, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.3648174940240123, 0.3648174940240123, 20);
      Logit logit0 = new Logit(0.3648174940240123, 20);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      bracketingNthOrderBrentSolver0.solve(20, (UnivariateFunction) logit0, 0.3648174940240123, Double.NaN, (double) 20, allowedSolution0);
      assertEquals(20, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.3648174940240123, 0.3648174940240123, 20);
      Logit logit0 = new Logit(0.3648174940240123, 20);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(20, (UnivariateFunction) logit0, 0.3648174940240123, Double.NaN, (double) 20, allowedSolution0);
      assertEquals(15.091204373506002, double0, 0.01);
      assertEquals(20, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.3648174940240123, 0.3648174940240123, 20);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(3174, (UnivariateFunction) cos0, 0.0, 3608.23215, allowedSolution0);
      assertEquals(20, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(3555.304471135656, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Tanh tanh0 = new Tanh();
      double double0 = bracketingNthOrderBrentSolver0.solve(20, (UnivariateFunction) tanh0, (-2369.18337347), (double) 20, 10.579707326696358);
      assertEquals((-3.469446951953614E-18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(252.7960268037799, 1261);
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(1261, (UnivariateFunction) sin0, 0.0625, (double) 1261, allowedSolution0);
      assertEquals(1261, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(920.6601500771794, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.3648174940240123, 0.3648174940240123, 20);
      Logit logit0 = new Logit(0.3648174940240123, 20);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(20, (UnivariateFunction) logit0, 0.3648174940240123, Double.NaN, (double) 20, allowedSolution0);
      assertEquals(20, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(15.091204373506002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 0.0, 20);
      Logit logit0 = new Logit(0.0, 20);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(20, (UnivariateFunction) logit0, 0.0, Double.NaN, (double) 20, allowedSolution0);
      assertEquals(20, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(10.0, double0, 0.01);
  }
}
