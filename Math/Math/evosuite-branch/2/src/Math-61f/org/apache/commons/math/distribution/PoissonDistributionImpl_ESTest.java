/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 20:47:55 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PoissonDistributionImpl_ESTest extends PoissonDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3002.638441791784, 0.19999999999923582, 53);
      poissonDistributionImpl0.getDomainLowerBound(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1380.75184);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(1380.75184, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1589.16458254213, 1589.16458254213);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(1597, int0);
      assertEquals(1589.16458254213, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3002.638441791784, 0.19999999999923582, 53);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(0.0);
      assertEquals(3002.638441791784, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-2846.60946), (-1571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,846.609 is smaller than, or equal to, the minimum (0): mean (-2,846.609)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3002.638441791784, 0.19999999999923582, 53);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(96);
      assertEquals(3002.638441791784, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1589.16458254213, 1589.16458254213);
      double double0 = poissonDistributionImpl0.probability((-222));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1589.16458254213, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3002.638441791784, 0.19999999999923582, 53);
      double double0 = poissonDistributionImpl0.probability(3258);
      assertEquals(1.8064510656963186E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(359.3877472546259);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(359.3877472546259, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5, 0.5);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.6065306597126334, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0, 1.0);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-597.926719703), 0.01189670994589177);
      assertEquals(0.6321205588285574, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(3986.1459473);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(3986.1459473, poissonDistributionImpl0.getMean(), 0.01);
  }
}
