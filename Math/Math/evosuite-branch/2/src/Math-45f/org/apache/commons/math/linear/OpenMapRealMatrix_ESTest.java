/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 20:23:46 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(1, 1);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertEquals(1, openMapRealMatrix1.getColumnDimension());
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
      assertEquals(1, openMapRealMatrix1.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(246, 1);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = openMapRealMatrix0.operate(doubleArray0);
      openMapRealMatrix0.setColumn(0, doubleArray1);
      assertEquals(246, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(81, 81);
      RealMatrix realMatrix0 = openMapRealMatrix0.power(234);
      assertNotSame(realMatrix0, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(634, 634);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.createMatrix(634, 634);
      assertEquals(634, openMapRealMatrix1.getRowDimension());
      assertEquals(634, openMapRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3547, 3547);
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(3547, 984);
      RealMatrix realMatrix0 = array2DRowRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix0);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.subtract(realMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 3,547x3,547 but expected 3,547x984
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,611,686,014,132,420,609 is larger than, or equal to, the maximum (2,147,483,647)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2119, 2119);
      openMapRealMatrix0.addToEntry(244, 244, 244);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(410, 410);
      openMapRealMatrix0.addToEntry(0, 0, 0);
      assertEquals(410, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(389, 389);
      openMapRealMatrix0.multiplyEntry(1, 0, 0);
      assertEquals(389, openMapRealMatrix0.getRowDimension());
  }
}
