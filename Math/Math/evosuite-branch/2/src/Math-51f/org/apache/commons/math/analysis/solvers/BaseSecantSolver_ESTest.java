/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 20:34:36 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-19.3145));
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(776, (UnivariateRealFunction) cos0, (-19.3145), (double) 776, (double) 776, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2025.18505356, 0.5);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1225.10041));
      Sigmoid sigmoid0 = new Sigmoid(915, (-3793.0));
      double double0 = regulaFalsiSolver0.solve(915, (UnivariateRealFunction) sigmoid0, (-1225.10041), 288.228436);
      assertEquals((-468.43598700000007), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1.4219884764133774), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Power power0 = new Power(1069.5);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2, (UnivariateRealFunction) power0, 0.0, 2.479773539153719E-5, allowedSolution0);
      assertEquals(2.479773539153719E-5, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(98, (UnivariateRealFunction) tanh0, (double) 98, 0.0, (double) 98, allowedSolution0);
      assertEquals(98.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(4, univariateRealFunction0, (-636.335459286), 0.0, allowedSolution0);
      assertEquals((-636.335459286), pegasusSolver0.getMin(), 0.01);
      assertEquals((-0.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0, 0.5);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(707, (UnivariateRealFunction) cos0, 0.5, (double) 707, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getMin(), 0.01);
      assertEquals(507.4558116152933, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1225.10041));
      Asinh asinh0 = new Asinh();
      double double0 = regulaFalsiSolver0.solve(915, (UnivariateRealFunction) asinh0, (-1225.10041), (double) 915, (double) 915);
      assertEquals(915.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.8003456150556387E-23), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 0.21792677251924691, (double) 720, 0.21792677251924691, allowedSolution0);
      assertEquals(0.21792677251924691, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(39.26990816987241, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0, 0.5);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(701, (UnivariateRealFunction) cos0, 0.0, (double) 701, 0.5, allowedSolution0);
      assertEquals(20.557654289255, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, (-0.7431931025429686), (double) 720, (-0.7431931025429686), allowedSolution0);
      assertEquals(1.5707963267948968, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0, 0.5);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 0.5, (double) 720, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(181.02098399597617, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 0.5, (double) 720, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(227.76546738526002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 0.5, (double) 720, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(227.76546738527495, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 0.5, (double) 720, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(227.76546738526, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 0.0, (double) 720, 0.0, allowedSolution0);
      assertEquals(378.5619147575701, double0, 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.0);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 0.5, (double) 720, 0.5, allowedSolution0);
      assertEquals(228.16994946370022, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0, 1.0, 0.5);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(720, (UnivariateRealFunction) cos0, 1.0, (double) 720, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(282.6398178813716, double0, 0.01);
  }
}
