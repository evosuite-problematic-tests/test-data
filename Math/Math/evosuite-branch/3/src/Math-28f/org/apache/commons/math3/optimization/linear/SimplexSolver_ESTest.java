/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 15:22:40 GMT 2019
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplexSolver_ESTest extends SimplexSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 100);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      try { 
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unbounded solution
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[3] = (double) (-2559);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2990.7785411903355);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) doubleArray0[3];
      SimplexSolver simplexSolver0 = new SimplexSolver((-2559.0), (-2559));
      doubleArray1[1] = (Double) (-2559.0);
      doubleArray1[2] = (Double) (-2559.0);
      doubleArray1[3] = (Double) (-2559.0);
      doubleArray1[4] = (Double) (-2559.0);
      doubleArray1[5] = (Double) (-2559.0);
      doubleArray1[6] = (Double) doubleArray0[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(arrayRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship0).when(linearConstraint0).getRelationship();
      doReturn(doubleArray1[4], doubleArray1[0]).when(linearConstraint0).getValue();
      linkedList0.add(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-2559.0), (-2559));
      simplexSolver0.doIteration(simplexTableau0);
      try { 
        simplexSolver0.doIteration(simplexTableau0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unbounded solution
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2979.424041854977);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(2979.424041854977);
      doubleArray1[0] = double0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = doubleArray1[0];
      doubleArray1[4] = doubleArray1[2];
      doubleArray1[5] = (Double) 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      Relationship relationship0 = Relationship.LEQ;
      Relationship relationship1 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(arrayRealVector0, arrayRealVector0, arrayRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship1, relationship1, relationship1).when(linearConstraint0).getRelationship();
      doReturn(1450.3723170635205, 2979.424041854977, 1450.3723170635205, (-30.603556247181096), 2979.424041854977).when(linearConstraint0).getValue();
      linkedList0.add(linearConstraint0);
      LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(arrayRealVector0, arrayRealVector0, arrayRealVector0).when(linearConstraint1).getCoefficients();
      doReturn(relationship0, relationship1, relationship0).when(linearConstraint1).getRelationship();
      doReturn(doubleArray1[4], doubleArray1[0], 0.0, doubleArray1[2], 2979.424041854977).when(linearConstraint1).getValue();
      linkedList0.add(linearConstraint1);
      SimplexSolver simplexSolver0 = new SimplexSolver();
      simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
      simplexSolver0.doOptimize();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray1[2], (-905));
      try { 
        simplexSolver0.doIteration(simplexTableau0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unbounded solution
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2979.424041854977);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(2979.424041854977);
      doubleArray1[0] = double0;
      GoalType goalType0 = GoalType.MAXIMIZE;
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = doubleArray1[0];
      doubleArray1[4] = doubleArray1[2];
      doubleArray1[5] = (Double) 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      Relationship relationship0 = Relationship.LEQ;
      Relationship relationship1 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(arrayRealVector0, arrayRealVector0, arrayRealVector0, arrayRealVector0, arrayRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship1, relationship1, relationship1, relationship1, relationship1).when(linearConstraint0).getRelationship();
      doReturn(1450.3723170635205, 2979.424041854977, 1450.3723170635205, (-30.603556247181096), 2979.424041854977).when(linearConstraint0).getValue();
      linkedList0.add(linearConstraint0);
      LinearConstraint linearConstraint1 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(arrayRealVector0, arrayRealVector0, arrayRealVector0, arrayRealVector0, arrayRealVector0).when(linearConstraint1).getCoefficients();
      doReturn(relationship0, relationship1, relationship0, relationship1, relationship1).when(linearConstraint1).getRelationship();
      doReturn(doubleArray1[4], doubleArray1[0], 0.0, doubleArray1[2], 2979.424041854977).when(linearConstraint1).getValue();
      linkedList0.add(linearConstraint1);
      SimplexSolver simplexSolver0 = new SimplexSolver();
      simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
      simplexSolver0.setMaxIterations(18);
      simplexSolver0.doOptimize();
      simplexSolver0.doOptimize();
      simplexSolver0.doOptimize();
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray1[4]);
      simplexSolver0.solvePhase1(simplexTableau0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (double) doubleArray1[2], (-905));
      simplexSolver0.doIteration(simplexTableau1);
      assertEquals(9, simplexSolver0.getIterations());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 2979.424041854977);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(2979.424041854977);
      doubleArray1[0] = double0;
      GoalType goalType0 = GoalType.MINIMIZE;
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = doubleArray1[0];
      doubleArray1[4] = doubleArray1[2];
      doubleArray1[5] = (Double) 0.0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      Relationship relationship0 = Relationship.GEQ;
      Relationship relationship1 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(arrayRealVector0, (RealVector) null).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, (Relationship) null).when(linearConstraint0).getRelationship();
      doReturn(doubleArray1[4], doubleArray1[0], 0.0, 0.0).when(linearConstraint0).getValue();
      linkedList0.add(linearConstraint0);
      SimplexSolver simplexSolver0 = new SimplexSolver();
      simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
      simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
  }
}
