/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 16:10:18 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D.angle(vector3D0, vector3D0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.add(256.0, vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector3D1.getNormSq(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distance1(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.NEGATIVE_INFINITY.getAlpha();
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = Vector3D.distance(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      String string0 = vector3D0.MINUS_K.toString();
      assertEquals("{0; 0; -1}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1267.9723000883519, 1267.9723000883519);
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      assertEquals((-1.885733084817148), vector3D1.getZ(), 0.01);
      assertEquals((-0.628270920948783), vector3D1.getY(), 0.01);
      assertEquals(0.2220053664130015, vector3D1.getX(), 0.01);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      double double0 = vector3D0.getDelta();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-0.36), (-0.36), 1.0000000000001208E-4);
      double double0 = vector3D0.PLUS_K.getNorm1();
      assertEquals(0.25920001, vector3D0.getNormSq(), 0.01);
      assertEquals(1.0000000000001208E-4, vector3D0.getZ(), 0.01);
      assertEquals((-0.36), vector3D0.getX(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-0.36), vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
      assertEquals(2.0, vector3D1.getNormSq(), 0.01);
      assertEquals((-1.0), vector3D1.getX(), 0.01);
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      double double0 = vector3D0.POSITIVE_INFINITY.getNormInf();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = vector3D0.normalize();
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 3489.98708512);
      // Undeclared exception!
      try { 
        vector3D0.ZERO.normalize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 2497.4278);
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.orthogonal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Vector3D vector3D1 = vector3D0.orthogonal();
      vector3D1.hashCode();
      assertTrue(vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertTrue(vector3D0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(1.0, vector3D1.getZ(), 0.01);
      assertEquals(-0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-0.36), (-0.36), 1.0000000000001208E-4);
      Vector3D vector3D1 = vector3D0.orthogonal();
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(0.7071067811865476, vector3D2.getY(), 0.01);
      assertEquals(1.0000000000001208E-4, vector3D0.getZ(), 0.01);
      assertEquals((-0.7071067811865476), vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.ZERO;
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D1, vector3D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1267.9723000883519, 1267.9723000883519);
      Vector3D vector3D1 = new Vector3D((-0.942866542408574), vector3D0, 0.0, vector3D0, 0.0, vector3D0, (-0.942866542408574), vector3D0);
      double double0 = Vector3D.angle(vector3D1, vector3D0);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(0.5923756309308296, vector3D1.getY(), 0.01);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      vector3D0.hashCode();
      assertTrue(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Vector3D vector3D1 = Vector3D.POSITIVE_INFINITY;
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.2958646899018938E-9, 1.2958646899018938E-9, Double.NaN);
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(vector3D0.isNaN());
      assertEquals(1.2958646899018938E-9, vector3D0.getY(), 0.01);
      assertEquals(1.2958646899018938E-9, vector3D0.getX(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      boolean boolean0 = vector3D0.isInfinite();
      assertFalse(boolean0);
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(923.067816489, Double.NEGATIVE_INFINITY, 1.0);
      boolean boolean0 = vector3D0.isInfinite();
      assertEquals(923.067816489, vector3D0.getX(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, vector3D0.getZ(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1524.4835, 3.141592653589793, Double.NEGATIVE_INFINITY);
      boolean boolean0 = vector3D0.isInfinite();
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01);
      assertEquals(3.141592653589793, vector3D0.getY(), 0.01);
      assertEquals(1524.4835, vector3D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      boolean boolean0 = vector3D0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = vector3D1.negate();
      boolean boolean0 = vector3D2.equals(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = new Vector3D((-107.203825), vector3D0, 0.0, vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertEquals(11492.660094630624, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals((-107.203825), vector3D1.getZ(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, (-922.4191517454858), vector3D0);
      boolean boolean0 = vector3D1.equals(vector3D0);
      assertFalse(boolean0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(922.4191517454858, vector3D1.getY(), 0.01);
      assertEquals(850857.0915068616, vector3D1.getNormSq(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      Vector3D vector3D1 = vector3D0.subtract(0.0, vector3D0);
      boolean boolean0 = vector3D0.equals(vector3D1);
      assertFalse(vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      vector3D0.MINUS_K.hashCode();
      assertFalse(vector3D0.isNaN());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertSame(vector3D1, vector3D0);
  }
}
