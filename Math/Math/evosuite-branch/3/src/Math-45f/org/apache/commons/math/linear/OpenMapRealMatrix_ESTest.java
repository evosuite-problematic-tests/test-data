/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 15:52:32 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealMatrix_ESTest extends OpenMapRealMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2816, 3734);
      openMapRealMatrix0.addToEntry(1109, 2816, 0);
      assertEquals(3734, openMapRealMatrix0.getColumnDimension());
      assertEquals(2816, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(860, 860);
      RealMatrix realMatrix0 = openMapRealMatrix0.power(860);
      assertNotSame(openMapRealMatrix0, realMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(860, 860);
      openMapRealMatrix0.addToEntry(520, 130, 520);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.add(openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(860, 860);
      RealMatrix realMatrix0 = openMapRealMatrix0.getColumnMatrix(637);
      assertEquals(860, realMatrix0.getRowDimension());
      assertEquals(1, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(111, 111);
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealMatrix0.subtract((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // got 111x111 but expected 8x1
         //
         verifyException("org.apache.commons.math.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(906, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,945,620,184,182 is larger than, or equal to, the maximum (2,147,483,647)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(2816, 3734);
      openMapRealMatrix0.addToEntry(1109, 2816, 0.5039018405998233);
      OpenMapRealMatrix openMapRealMatrix1 = openMapRealMatrix0.subtract(openMapRealMatrix0);
      assertNotSame(openMapRealMatrix1, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(860, 860);
      openMapRealMatrix0.addToEntry(518, 518, 518);
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(860, 518);
      RealMatrix realMatrix0 = openMapRealMatrix0.multiply((RealMatrix) blockRealMatrix0);
      assertEquals(860, realMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(860, 860);
      openMapRealMatrix0.addToEntry(520, 520, 520);
      RealMatrix realMatrix0 = openMapRealMatrix0.preMultiply((RealMatrix) openMapRealMatrix0);
      assertNotSame(realMatrix0, openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(3717, 3717);
      openMapRealMatrix0.addToEntry(0, 0, 3.0095696449279785);
      openMapRealMatrix0.multiplyEntry(0, 0, 3717);
      assertEquals(3717, openMapRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(860, 860);
      openMapRealMatrix0.multiplyEntry(637, 1, 1);
      assertEquals(860, openMapRealMatrix0.getRowDimension());
  }
}
