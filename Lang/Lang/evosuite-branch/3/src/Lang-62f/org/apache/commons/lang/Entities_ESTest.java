/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 14:18:36 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      String string0 = entities_LookupEntityMap0.name(5027);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.HTML32.unescape("IC&lt;&gt;oE9.QD~oj");
      assertEquals("IC<>oE9.QD~oj", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = new Entities();
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("", (-1));
      int int0 = entities_TreeEntityMap0.value("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities_TreeEntityMap0.name((-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      int int0 = entities_TreeEntityMap0.value("3+^k$a-jmPfIr:'yo");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.HTML40.escape("'Y&@}C*");
      assertEquals("'Y&amp;@}C*", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(103);
      entities_ArrayEntityMap0.add("Alpha", 103);
      String string0 = entities_ArrayEntityMap0.name(103);
      assertEquals("Alpha", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(103);
      entities_ArrayEntityMap0.add("Alpha", 103);
      int int0 = entities_ArrayEntityMap0.value("Iw($Z,BjM B}/ #PcE6");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(0);
      entities_ArrayEntityMap0.add("empty", (-2407));
      int int0 = entities_ArrayEntityMap0.value("empty");
      assertEquals((-2407), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      String string0 = entities_BinaryEntityMap0.name(80);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("'", (-1979));
      int[] intArray0 = new int[3];
      intArray0[0] = 151;
      entities_BinaryEntityMap0.values = intArray0;
      entities_BinaryEntityMap0.add("", (-1979));
      entities_BinaryEntityMap0.add("t-k^0wzab]3NPArn6#", 151);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(2146);
      entities_BinaryEntityMap0.add((String) null, 2146);
      String string0 = entities_BinaryEntityMap0.name(2146);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.XML.escape((Writer) stringWriter0, "BF>Ryt");
      assertEquals("BF&gt;Ryt", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("&#0;_j\"A&c=-k0");
      assertEquals("\u0000_j\"A&c=-k0", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("yRO&wyC1?&A2;M_K");
      assertEquals("yRO&wyC1?&A2;M_K", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("A.,G&;*Wk~6i0` 0");
      assertEquals("A.,G&;*Wk~6i0` 0", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "&#0;_j\"A&c=-k0");
      assertEquals("\u0000_j\"A&c=-k0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = new Entities();
      StringWriter stringWriter0 = new StringWriter(3566);
      entities0.XML.unescape((Writer) stringWriter0, "");
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities entities0 = new Entities();
      StringWriter stringWriter0 = new StringWriter(2425);
      entities0.unescape((Writer) stringWriter0, "yRO&wyC1?&A2;M_K");
      assertEquals("yRO&wyC1?&A2;M_K", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "A.,G&;*Wk~6i0` 0");
      assertEquals("A.,G&;*Wk~6i0` 0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "&#;_j\"A&c=-k0");
      assertEquals("&#;_j\"A&c=-k0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter(80);
      entities0.unescape((Writer) stringWriter0, "&#xiN_;_j\"A/`<Ik0");
      assertEquals("&#xiN_;_j\"A/`<Ik0", stringWriter0.toString());
  }
}
