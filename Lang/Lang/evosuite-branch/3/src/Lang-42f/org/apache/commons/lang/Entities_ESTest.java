/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 13:36:24 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      String string0 = entities_LookupEntityMap0.name(650);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.XML.unescape("_zF8A.P&2w]s&@2;V[");
      assertEquals("_zF8A.P&2w]s&@2;V[", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("", 112);
      int int0 = entities_TreeEntityMap0.value("");
      assertEquals(112, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      entities0.HTML40.unescape(",?y,GF$");
      entities0.XML.escape(",?y,GF$");
      StringWriter stringWriter0 = new StringWriter(650);
      entities0.XML.unescape((Writer) stringWriter0, ",?y,GF$");
      assertEquals(",?y,GF$", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      String string0 = entities0.escape("org.apache.commons.lang.IntHashMap");
      assertEquals("org.apache.commons.lang.IntHashMap", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.PrimitiveEntityMap entities_PrimitiveEntityMap0 = new Entities.PrimitiveEntityMap();
      int int0 = entities_PrimitiveEntityMap0.value(",?y,GF$");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      int int0 = entities_HashEntityMap0.value((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(0);
      entities_ArrayEntityMap0.add("empty", (-2407));
      String string0 = entities_ArrayEntityMap0.name(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(103);
      entities_ArrayEntityMap0.add("Alpha", 103);
      String string0 = entities_ArrayEntityMap0.name(103);
      assertEquals("Alpha", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(103);
      entities_ArrayEntityMap0.add("Alpha", 103);
      int int0 = entities_ArrayEntityMap0.value("Iw($Z,BjM B}/ #PcE6");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(0);
      entities_ArrayEntityMap0.add("empty", (-2407));
      int int0 = entities_ArrayEntityMap0.value("empty");
      assertEquals((-2407), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("org.apache.commons.lang.UnhandledException", (-1));
      String string0 = entities_BinaryEntityMap0.name(128);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("'", (-1979));
      int[] intArray0 = new int[3];
      intArray0[0] = 151;
      entities_BinaryEntityMap0.values = intArray0;
      entities_BinaryEntityMap0.add("", (-1979));
      entities_BinaryEntityMap0.add("t-k^0wzab]3NPArn6#", 151);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(2146);
      entities_BinaryEntityMap0.add((String) null, 2146);
      String string0 = entities_BinaryEntityMap0.name(2146);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.XML.escape((Writer) stringWriter0, "BF>Ryt");
      assertEquals("BF&gt;Ryt", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "nu:&");
      assertEquals("nu:&", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("L3h&gt;s `(mw&gt;");
      assertEquals("L3h>s `(mw>", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("&;i3Q+");
      assertEquals("&;i3Q+", string0);
  }
}
