/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 13:10:40 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "CHIH}na!}", 760);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("y", "NoSuchFieldException occurred during 1.6 backcompat code");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2991, ':');
      int int0 = StringUtils.length(string0);
      assertEquals(2991, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("Index: ", "_phG>\"T#r!$g7c+feM?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.replaceEach("orre0pg-azfb5o{ons.lang3.stringutils", stringArray0, stringArray0);
      assertEquals("orre0pg-azfb5o{ons.lang3.stringutils", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" is less than 0: ", 4096);
      assertEquals(" is less than 0: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("}l_h", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "g#4ehXB:}P", 1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.center("/", 16);
      assertEquals("       /        ", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "kgHaW@>%,=&d%H", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.rightPad("gnmOJ45I", 0);
      assertEquals("gnmOJ45I", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.leftPad("_phG>\"T#r!$g7c+feM?", 7);
      assertEquals("_phG>\"T#r!$g7c+feM?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("K?lqR2] c]BAgkkH");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("u7:$$", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("}l_h", "@0p?z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("?h9mSz5_)aB?2Xsxe7y", 'y');
      assertNotNull(string0);
      assertEquals("?h9mSz5_)aB?2Xsxe7", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("'8i)D]@ TOJJqP", "r\"4bj5|*", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.replace("r}AJF(xT(Ld(x`CTW/", "", "java.class.version");
      assertEquals("r}AJF(xT(Ld(x`CTW/", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("w2P#?Z@KycCI^ur");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = StringUtils.isBlank(charBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("^R6HYz8,#T");
      assertEquals("^R6HYz8,#T", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToNull("l");
      assertNotNull(string0);
      assertEquals("l", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("l");
      assertEquals("l", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "N|<@m]u[SJ5C (T6NP!";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripStart("[]", "[]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "The stripAccents(String) method is not supported until Java 1.6");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripEnd("`&.'JhWU8C;p", "`&.'JhWU8C;p");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mqeE ]En";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "The character must not be null");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, " IS LESS THAN 0: ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "I");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "7R^`~xO:sKUgcY%<7o0");
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripAccents("J|S6(5");
      assertNotNull(string0);
      assertEquals("J|S6(5", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      boolean boolean0 = StringUtils.equals((CharSequence) "normalize", (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("1.7", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "toX]SzPsZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.equalsIgnoreCase(stringArray0[6], stringArray0[6]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf("e#9D)G", 's');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '>');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf("normalize", 'h', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'b', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf("MGN^V#>sadg", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "}l_h");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "", 3275);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("ALhp", "ALhp", 1803);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("`dMCzo[W", (String) null, 511);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, " is less than 0: ", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", (String) null, 1579);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("|9r'I7E+w=f", "", 16);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 'p');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("java.vm.info", "SfB[*Kl&", 1469);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("-9Un>uolo|u", "-9Un>uolo|u", '\u000B');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, (String) null, 2543);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("org.apache.commons.lang3.StringUtils", (String) null, 2855);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("org.apache.commons.lang3.StringUtils", "-hUn>uol[|u", (-931));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("'~*ZWt`S}!.", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("4\u0005DK)-K1zJ~R'%`m", "4\u0005DK)-K1zJ~R'%`m", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("bAn3eV0", ',');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'D');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("long", 'V', (-2767));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'd', 838);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("Caught a SecurityException reading the system property '", "Caught a SecurityException reading the system property '");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "xpd9}aH]*o@", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("mHlLy}!^Ey{EP=2[c", "mHlLy}!^Ey{EP=2[c", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null, 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "", 59);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("a`E:KJ", (String) null, (-709));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("java.class.version", "6x=B`!/VJei^\"#", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("(@9hog#go@|9A", "(@9hog#go@|9A");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Windows", '-');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, 'i');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("org.apache.commons.lang3.StringUtils", 'p');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, " L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", "^<@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("java.specification.version", "java.specification.version");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.containsIgnoreCase(stringArray0[1], stringArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("eO39", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("2tkDHGtW5Uz[lv*n'C", "B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("OscTzs2/1j)H1>", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "\"^ V ", "\"^ v ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "DHhU|`~K:.+]vf&\"", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "aTh$", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "?i{Bk");
      int int0 = StringUtils.indexOfAny((CharSequence) string0, "]N,|");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "oJ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "C?p/9Vt1y0#]\fcv R", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "InvocationTargetException occurred during 1.6 backcompat code", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.co-hun>uol[|u.systemutils", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "&U\"@g@U1o]($cmG)Se", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "o", "The stripAccents(String) method is not supported until Java 1.6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) " is less than 0: ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "InvocationTargetException occurred during 1.6 backcompat code", "InvocationTargetException occurred during 1.6 backcompat code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Cannot pad a negative amount: ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " is less than 0: ", "w<9Bjt<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("p{InCombiningDiacriticalMarks}+", "line.separator");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("qqe<m2+", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("YT?!k", "YT?!k");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "u}w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "(@9hog#go@|9A", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "bmdh7k6_8oS+7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "*O<U", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ".ug*?sv@b@a1:s!*g6)", ".ug*?sV@B@A1:S!*G6)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "e#9D)G", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "2V+%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "line.separator", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("line.separator", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[6] = "R/+_WMv[J3ToVA2EIA";
      int int0 = StringUtils.indexOfAny("IllegalArgumentException occurred during 1.6 backcompat code", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "IllegalArgumentException occurred during 1.6 backcompat code";
      stringArray0[1] = "IllegalArgumentException occurred during 1.6 backcompat code";
      int int0 = StringUtils.indexOfAny("IllegalArgumentException occurred during 1.6 backcompat code", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("j&RUxwD$U<", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "FUEdCy|UDk@";
      int int0 = StringUtils.lastIndexOfAny("@SK!Sllh_%>T0vRU3^", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "@SK!Sllh_%>T0vRU3^";
      int int0 = StringUtils.lastIndexOfAny("@SK!Sllh_%>T0vRU3^", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substring("l1Rdo&", 2543);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 151);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substring("org.apache.commons.la-hun>uol[|utils", (-26));
      assertEquals(".commons.la-hun>uol[|utils", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2737));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substring("user.language", 2575, 2575);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1876, 1876);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substring("normalize", (-290), (-290));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring("GW", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.left("DHhU|`~K:.+]vf&\"", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.left("GvI|NMonF]l:uom", (-1008));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.left(" is les", 4096);
      assertEquals(" is les", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.right("nTO>N<vy7Vf2", 2);
      assertNotNull(string0);
      assertEquals("f2", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-290));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.right("", (-290));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.right("", 173);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.mid("C?p/9Vt1y0#]\fcv R", 517, 36);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 46, 410);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.mid("vM>Vn", 0, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.mid("(ZSKxIWqVQ+u_E", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.mid("", (-1), 4705);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBefore("s+=1a{B$}]e9z*c", ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;");
      assertEquals("s+=1a{B$}]e9z*c", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.substringBefore("8J&P", stringArray0[3]);
      assertEquals("8J&P", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBefore("cqmR:A(fD,fC</<v", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Strings must not be null", "Strings must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringAfter("V7Mku9Uc]t(+8$+s", "SecurityException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "UD:,r(@saK~]Lq[%M0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringAfter("ClassNotFoundException occurred during 1.6 backcompat code", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringAfter("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("user.region", "?%W\"zUK?#DNqr-");
      assertEquals("user.region", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^AM", "");
      assertEquals("^AM", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Array and element cannot both be null", "Array and element cannot both be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("{}e>Y::A]<%Yb2", "UE1I$.kQ?pH");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "occurred during 1.6 backcompat code");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" .a\"37.wuwEj1", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("InvocationTargetException occurred during 1.6 backcompat code", "1.");
      assertEquals("6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.substringBetween(stringArray0[1], "jTpuhWz", "ALhp");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringBetween("4.0", "\"\"\"\"\"\"\"\"\"\"4.0", "\"\"\"\"\"\"\"\"\"\"4.0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringBetween("UB@[Lmgo", "TimeToLive of ", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringBetween("InvocationTargetException occurred during 1.6 backcompat code", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBetween(";(dIooYE$H~Nt<.e", "", "java.vm.info");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, " ", " ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", (String) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "C?p/9Vt1y0#]\fcv R", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lan-hun>uol[|uils", "g3.systemu", "4.9");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "e|oNV$#ury[i?!", "}rm`6rY=EZh$Py<");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.repeat("Search and Replace array lengths don't match: ", 299);
      String[] stringArray0 = StringUtils.substringsBetween(string0, "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(149, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("e|oNV$#ury[i?!", "e|oNV$#ury[i?!", "java.version");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Un4Y{JsVc", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&qmR:H(fD#NfJC</Ov", "", 1153);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("@SK!Sllh_%>T0vRU3^@SK!S@SK!Sllh_%>T0vRU3^@SK!Sllh_%>T0vRU3^@SK!S", "@SK!Sllh_%>T0vRU3^");
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("OiEf b#@c3MJk", "OiEf b#@c3MJk", 3);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("v%!v+d[OE&", 'v');
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("cqmR:A(fD,fC</<v", 'v');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "", (-2893));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-", "-", 0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("2Cme6$QQsR{Nr%l<P", "e");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.repeat("Search and Replace array lengths don't match: ", 299);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, "java.version", 299);
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(299, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Kr|guty'", "-$W'W?]HGa,32w,kz", 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("@~Q{qXA//qzMp");
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("X`PYy+rV,})?C[");
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("?h9mSz5_)aB?2Xsxe7y");
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'W');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '(', (-1410), 240);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '7', 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ':', 5, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, " IS LESS THAN 0: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "KA~_vQ^u|", 91, 91);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'O');
      String string0 = StringUtils.join((Object[]) stringArray0, "(XY", (-1710), (-1710));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("y:\"p>Z9&+O.Qt,,=", '9');
      String string0 = StringUtils.join((Object[]) stringArray0, "u}w");
      assertEquals("y:\"p>Zu}w&+O.Qt,,=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ListIterator<String> listIterator0 = stack0.listIterator(0);
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '>');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '9');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      ListIterator<String> listIterator0 = stack0.listIterator(0);
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '>');
      assertFalse(stack0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      stack0.add((String) null);
      ListIterator<String> listIterator0 = stack0.listIterator(0);
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '>');
      assertFalse(listIterator0.hasNext());
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, '{');
      assertNotNull(string0);
      assertEquals("AUTOSELECT_FILTERING{IGNORE_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      String string0 = StringUtils.join((Iterable<?>) treeSet0, "org.apache.commons.lan-hun>uol[|uils");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.co-hun>uol[|u.systemutils");
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.apache.co-hun>uol[|u.systemutils");
      linkedList0.add("NoSuchFieldException occurred during 1.6 backcompat code");
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat codeorg.apache.co-hun>uol[|u.systemutils", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Collection<Object> collection0 = hashMap0.values();
      hashMap0.put("@BY.WX& (I1{.3iW&^W", (Object) null);
      hashMap0.put("J", "J");
      String string0 = StringUtils.join((Iterable<?>) collection0, "");
      assertEquals("J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Collection<Object> collection0 = hashMap0.values();
      Integer integer0 = new Integer(64);
      hashMap0.put((String) null, integer0);
      hashMap0.put("@BY.WX& (I1{.3iW&^W", (Object) null);
      String string0 = StringUtils.join((Iterable<?>) collection0, "");
      assertEquals("64", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '9');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeStart("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeStart("C`:2Yyi|K", (String) null);
      assertEquals("C`:2Yyi|K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeStart("!@7d6|:$N+lp", "qK,WgfUkm");
      assertEquals("!@7d6|:$N+lp", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeStart("M:", "M:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "char");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Caught a SecurityException reading the system property '", "user.country");
      assertEquals("Caught a SecurityException reading the system property '", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("PQO|f- _2\u001AL]%wSd:", "");
      assertEquals("PQO|f- _2\u001AL]%wSd:", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("normalizenormalize", "normalizenormalize");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.repeat(" is less than 0: ", "", 13);
      assertNotNull(string0);
      assertEquals(" is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0:  is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeEnd("@SK!Sllh_%>T0vRU3^", ":rs(");
      assertEquals("@SK!Sllh_%>T0vRU3^", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.repeat("Waf>bZPR8PB8", "Waf>bZPR8PB8", 256);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("kgHaW@>%,=&d%H", "kgHaW@>%,=&d%H");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(" is not in the range '0' - '9'", "");
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.StringUtils", "N+Y($2i[yx'gcj-E");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.remove("line.separator", (String) null);
      assertNotNull(string0);
      assertEquals("line.separator", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.remove("Q ?:AB70|]W~", "3Fb-rwmt.s9gtJ.0");
      assertEquals("Q ?:AB70|]W~", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'H');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove("BXclQXv", ' ');
      assertEquals("BXclQXv", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.com-hun>uol[|usystemutils", 'e');
      assertEquals("org.apach.com-hun>uol[|usystmutils", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.replace("~dfNY|0C/p }?", "~dfNY|0C/p }?", (String) null);
      assertEquals("~dfNY|0C/p }?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replace("T3", "T3", ">r{C", 0);
      assertEquals("T3", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replace("The stripAccents(String) method is not supported until Java 1.6", "The stripAccents(String) method is not supported until Java 1.6", "G", Integer.MAX_VALUE);
      assertEquals("G", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.remove("#[I+4Cx/qdi?*", "#[I+4Cx/qdi?*");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Waf>bZPR8PB8", "Waf>bZPR8PB8", "Waf>bZPR8PB8");
      assertEquals("Waf>bZPR8PB8", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Z[^sdxn[7i#!", "(UQsya}M`Kmz&c", (-1));
      String string0 = StringUtils.replaceEachRepeatedly("Z[^sdxn[7i#!", stringArray0, (String[]) null);
      assertEquals(2, stringArray0.length);
      assertEquals("Z[^sdxn[7i#!", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("steylang3.s", (String[]) null, (String[]) null);
      assertEquals("steylang3.s", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEach((String) null, (String[]) null, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("*|$Kj`H[6^~U#L^", stringArray0, stringArray0);
      assertEquals("*|$Kj`H[6^~U#L^", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEach("%/_&4bj4.*The stripAccents(String) method is not supported until Java 1.6", stringArray0, stringArray1);
      assertEquals("%/_&4bj4.*The stripAccents(String) method is not supported until Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "@SK!Sllh_%>T0vRU3^";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("@SK!Sllh_%>T0vRU3^", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: @SK!Sllh_%>T0vRU3^
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("l", "yK&xW[ oTK~");
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("=hXBk$)Vwf\"YsBO:Qs:", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = StringUtils.replaceEachRepeatedly("java.runtime.version", stringArray0, stringArray0);
      assertEquals("java.runtime.version", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is 7", "2Cme6$QQsR{Nr%l<P", (-270));
      String string0 = StringUtils.replaceEach("orre0pg-azfb5o{ons.lang3.stringutils", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("orre0pg-azfb5o{ons.lang3.stringutils", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replaceChars("InvocationTargetException occurred during 1.6 backcompat code", 'R', 'R');
      assertNotNull(string0);
      assertEquals("InvocationTargetException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ':', ':');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "Un4Y{JsVc", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars("-", "-", "Search and Replace array lengths don't match: ");
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars("`&>?-~\"ZjL4", "", "HP-UX");
      assertEquals("`&>?-~\"ZjL4", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.replaceChars("QX*3`", "java.vm.info", (String) null);
      assertEquals("QX*3`", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.overlay("s+=1a{B$}]e9z*c", "S0B-Io$Y0X#*G/><", (-2883), 48);
      assertNotNull(string0);
      assertEquals("S0B-Io$Y0X#*G/><", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "@h7^", 13, 838);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.overlay("IllegalAccessException occurred during 1.6 backcompat code", (String) null, 10, 121);
      assertEquals("IllegalAcc", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.overlay("os.arch", "os.arch", 1840, 1840);
      assertEquals("os.archos.arch", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.overlay("rm( rM.|4%2", "pmoZ", 4028, (-75));
      assertEquals("pmoZ", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.chomp("java.version");
      assertEquals("java.version", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chomp("-");
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chomp(".(!:PLyp{Xg", "");
      assertEquals(".(!:PLyp{Xg", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chomp("i!", (String) null);
      assertEquals("i!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.chomp("-)-Ah4mAzM:{+*v", "ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals("-)-Ah4mAzM:{+*v", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.chop("ClassNotFoundException occurred during 1.6 backcompat code");
      assertNotNull(string0);
      assertEquals("ClassNotFoundException occurred during 1.6 backcompat cod", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.repeat("+X|)Ft-z.&G", 1);
      assertEquals("+X|)Ft-z.&G", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.repeat("", 3001);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.repeat("S", 97);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.repeat("d", 9970);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.repeat(".m", 13);
      assertEquals(".m.m.m.m.m.m.m.m.m.m.m.m.m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "I", 1702);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, (-2534));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 32, 'G');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("yL", 55296, '>');
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.rightPad(stringArray0[1], 127, "Minimum abbreviation width with offset is 7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.rightPad("1.6", 10, "");
      assertEquals("1.6       ", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad("Gb^!=W", 5, "Gb^!=W");
      assertEquals("Gb^!=W", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 5, "     ");
      assertEquals("     ", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.center("XD:+)", 10, "W=5A2r^UlFq8nYP,");
      assertNotNull(string0);
      assertEquals("W=XD:+)W=5", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0, 'g');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad("org.apache.commons.-hun>uol[|umutils", 56319, '<');
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 5, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.leftPad("Caught a SecurityException reading the system property '", 0, "");
      assertEquals("Caught a SecurityException reading the system property '", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 16, "");
      assertEquals("                ", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.leftPad("6.1", 13, "g3.systemu");
      assertEquals("g3.systemu6.1", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 16, "lang3.syste");
      assertEquals("lang3.systelang3", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.center("Caught a SecurityException reading the system property '", 0, 'W');
      assertEquals("Caught a SecurityException reading the system property '", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.center("[Xf>Xp,lv!(", 1);
      assertEquals("[Xf>Xp,lv!(", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.center("The stripAccents(String) method is not supported until Java 1.6", 0, "MGN^V#>sadg");
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.center("NoSuchMethodException occurred during 1.6 backcompat code", 37, (String) null);
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = StringUtils.upperCase("\"^ v ", locale0);
      assertEquals("\"^ V ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.lowerCase("org.apache.commons.lang3-hun>uol[|us");
      assertEquals("org.apache.commons.lang3-hun>uol[|us", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = StringUtils.lowerCase(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", locale0);
      assertEquals(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.capitalize("g#4ehXB:}P");
      assertEquals("G#4ehXB:}P", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("p");
      assertEquals("p", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.swapCase("GTL?QdDF&O(\"j");
      assertEquals("gtl?qDdf&o(\"J", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "p");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int int0 = StringUtils.countMatches("g#4ehXB:}P", "g#4ehXB:}P");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int int0 = StringUtils.countMatches("awt.toolkit", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "g#4ehXB:}P");
      boolean boolean0 = StringUtils.isAlpha(charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("w<9Bjt<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("java.endorsed.dirs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("strings must not beirixl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("g#4ehXB:}P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("r}AJF(xT(Ld(x`CTW/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0sjg[ec");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("1G@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " is less than 0: ";
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" Lv_nJx!0|T_%7Oe3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("kh");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("e|oNV$#ury[i?!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.defaultString("g#4ehXB:}P");
      assertEquals("g#4ehXB:}P", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.defaultString("Caught a SecurityException reading the system property '", "J|S6(5");
      assertEquals("Caught a SecurityException reading the system property '", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty("p", "");
      assertEquals("p", charSequence0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty("", "OknrJS&{^tm;3d=2");
      assertEquals("OknrJS&{^tm;3d=2", charSequence0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.reverse("(Tu<3o>mbs");
      assertEquals("sbm>o3<uT(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '$');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 5, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("mHlLy}!^Ey{EP=2[c", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.repeat("The String must not be empty", 4096);
      String string1 = StringUtils.abbreviate(string0, 1426, 2053);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.abbreviate("The stripAccents(String) method is not supported until Java 1.6", 630, 16);
      assertEquals("...ntil Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" \"xlv!Zx", 20, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, "occurred during 1.6 backcompat code", 2543);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("ClassNotFoundException occurred during 1.6 backcompat code", "db3)Ae/FO$x.'", 48);
      assertEquals("ClassNotFoundExcepdb3)Ae/FO$x.'6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("oJ", "", (-270));
      assertEquals("oJ", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("org.apache.commons.lang3-hun>uol[|us", "4M", 'y');
      assertEquals("org.apache.commons.lang3-hun>uol[|us", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("oJ", "oJ", (-270));
      assertEquals("oJ", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.difference("pw!4rN:9O(FG", "mHlLy}!^Ey{EP=2[c");
      assertEquals("mHlLy}!^Ey{EP=2[c", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "h09F{_");
      assertNotNull(string0);
      assertEquals("h09F{_", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.difference(",7r/", (String) null);
      assertNotNull(string0);
      assertEquals(",7r/", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.difference("mqeE ]En", "mqeE ]En");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.indexOfDifference((CharSequence) stringArray0[7], (CharSequence) "8J&P");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "l1Rdo&", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.difference("KbA6pP2\"z%PC/e:2@0", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"4.0";
      charSequenceArray0[1] = (CharSequence) "C?p/9Vt1y0#]\fcv R";
      charSequenceArray0[2] = (CharSequence) "C?p/9Vt1y0#]\fcv R";
      charSequenceArray0[3] = (CharSequence) "1.4";
      charSequenceArray0[4] = (CharSequence) "C?p/9Vt1y0#]\fcv R";
      charSequenceArray0[5] = (CharSequence) "C?p/9Vt1y0#]\fcv R";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||";
      charSequenceArray0[1] = (CharSequence) "|";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "clone";
      stringArray0[1] = "clone";
      stringArray0[2] = "clone";
      stringArray0[3] = "clone";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("clone", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, "jU~M,fwq2#$RJ0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "iOe");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("org.apache.commons.lang3.StringUtils", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("JPKVB0s.aglo*", "n2S0ZM%");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 1162, "1.6?^?]Hw");
      int int0 = StringUtils.getLevenshteinDistance(string0, "");
      assertEquals(1162, int0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("QQE<M2+", "2tkdhgtw5uz[lb*n'c");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("nS)Yqi'Sc8i>S/%", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("g#4ehXB:}P", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The stripAccents(String) method is not supported until Java 1.6";
      boolean boolean0 = StringUtils.startsWithAny("The stripAccents(String) method is not supported until Java 1.6", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("java.endorsed.dirs", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "ALhp");
      assertFalse(boolean0);
  }
}
