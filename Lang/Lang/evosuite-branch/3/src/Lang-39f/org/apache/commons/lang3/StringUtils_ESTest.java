/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 13:29:23 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("AIX", "+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "user.dir", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(";rc#RiCk55%$");
      assertNotNull(stringArray0);
      
      StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("SecurityException occurred during 1.6 backcompat code");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.rightPad("iY", 0);
      assertNotNull(string0);
      assertEquals("iY", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.leftPad("IllegalArgumentException occurred during 1.6 backcompat code", 4);
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat code", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.center("z%nw>v>FAA9&_}?H!,", 2149);
      String string1 = StringUtils.strip(string0);
      assertNotNull(string1);
      assertEquals("z%nw>v>FAA9&_}?H!,", string1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "w2P#?Z@KycCI^ur");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1", "1", 984);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Hxs9Kr|guty'F5Au5L");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("6I~XXpL VmKse^,e7@L", stringArray0);
      assertEquals(15, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(";rc#RiCk55%$", ";rc#RiCk55%$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.substringBetween("\"", "\"");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 'l');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("[\"v\"\"L%C!T-6", "");
      String[] stringArray1 = new String[6];
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("P3k<", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, 'l');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("Minimum abbreviation width with offset is 7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("2&Myj1l6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToNull("j>WWLX-\"ld\"c.");
      assertEquals("j>WWLX-\"ld\"c.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("~BIfK/~");
      assertEquals("~BIfK/~", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToNull("1Ul9XAD");
      assertNotNull(string0);
      assertEquals("1Ul9XAD", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("O", string0);
      assertEquals("O", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripStarttring) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.strip("A]%cO", "");
      assertEquals("A]%cO", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.strip("NoSuchFieldException occurred during 1.6 backcompat code", "NoSuchFieldException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, ".4]2Y_hRftQpD/@>r{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7()0c(=i1TN&";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " vs ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripEnd("1.5", "1.5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripAccents("7()0c(=i1TN&");
      assertNotNull(string0);
      assertEquals("7()0c(=i1TN&", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("A]%cO", "qNw0I_Y;oB(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "q9`/-S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "7()0c(=i1TN&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf("D", 'z');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '#');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf("The stripAccents(String) method is not supported until Java 1.6", 'y', 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 'o', 579);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf("BU_,", "BU_,");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf("os.version", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("className must not be null.", "                               iR                               ", (-119));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("cJ-|$<v[..LL", (String) null, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("TimeToLive of ", "TimeToLive of ", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("NFD", "", 247);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("S", "S", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "enY^xL#:\";,<:K5-1d}", 122);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("Ga%L:d", "", 355);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("", (String) null, (int) 'U');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf(" is less than 0: ", "wg?yufs4az5(fo\"m4g", (-2653));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOf("e^k}]=mJt[V)>C C", "", (-2374));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("BU_,", 'h');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '`');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("W5Uz[lv*n'C$1y<b", 'Y', 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'R', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", "2KjO #;");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "java.io.tmpdir", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("BP  q+1?k0HLLSearch and Replace array lengths don't match: LLBP  q+1?k0H", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = StringUtils.leftPad("6ix])!c?nvYMxtYg", 1662);
      int int0 = StringUtils.lastIndexOf(string0, "6ix])!c?nvYMxtYg", 2346);
      assertEquals(1646, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("G", 'Z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("NoSuchFieldException occurred during 1.6 backcompat code", 'g');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("?YrPbKH[WGSM@vk:M", "LINUX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(":z,5\">#8'bT#&", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("4P>n8(1P7b&/", "4P>n8(1P7b&/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "{fOQ3'fm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Wg?YUFs4az5(;KWFKg", "fo\"M4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("java.io.tmpdir", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("?)%/YkK?a8", "?)%/YkK?a8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = StringUtils.indexOfAny("|UhH", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("java.specification.version", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("java.home", "java.home");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("InvocationTargetException occurred during 1.6 backcompat code", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsAny((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny("S0B-Io$Y0X#*G/><S0B-Io$Y0X#*G/><", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("#j[\u0006%U_V", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("'~*ZWt`S}!.", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '-';
      boolean boolean0 = StringUtils.containsAny("S0B-Io$Y0X#*G/><S0B-Io$Y0X#*G/><", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("kf9Uw'CoeZ+D}3IF", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("?)%/YkK?a8", "#z',t6#g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut("lcS[x*Fd@Y%%Up~4jT", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("y[", "y[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "InvocationTargetException occurred during 1.6 backcompat code");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("BU_,", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Minimum abbreviation width with offset is 7", "iEdq9_YNP/rWQhR");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("NFD", "NFD");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsOnly("", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly(".po/jwpy:!pld#ehq/l", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, ".im");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsNone("The character ", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("O)h]og:x?I1,", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("HeLD%%p\"8j1e", "D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("Hl", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7()0c(=i1TN&";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2{@X29s\"&2@y";
      stringArray0[1] = "2{@X29s\"&2@y";
      int int0 = StringUtils.indexOfAny("2{@X29s\"&2@y", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("f~a2", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IllegalArgumentException occurred during 1.6 backcompat code";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "2&Myj1l6";
      int int0 = StringUtils.lastIndexOfAny("2&Myj1l6", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 2447);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2322));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("r,QC.gl=}", 65);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substring("kf9Uw'CoeZ+D}3IF", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 8192, 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.substring("K@.k4-h", (-58), (-58));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substring("", 418, 418);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.left("SecurityException occurred during 1.6 backcompat code", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1629));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.left("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.left("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.leftPad("6ix])!c?nvYMxtYg", 1662);
      String string1 = StringUtils.right(string0, 0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-2239));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.right("", (-470));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid("", 127, 2211);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-616), 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.mid("4p>n8(1p7b&/", 631, (-2057));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.mid("Mac OS X", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.mid("", (-1), 664);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "hk7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringBefore("7G.+MaC.nm~2", " vs ");
      assertEquals("7G.+MaC.nm~2", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" 1", (String) null);
      assertEquals(" 1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringBefore("t%skoM[5z", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringBefore("2&Myj1l6;g7", "2&Myj1l6;g7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringAfter("BU_,", "");
      assertEquals("BU_,", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Q", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringAfter("\"uMQs=:1)tGqm^x", "ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "java.text.Normalizer");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("S0B-Io$Y0X#*G/><S0B-Io$Y0X#*G/><", "S0B-Io$Y0X#*G/><S0B-Io$Y0X#*G/><");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("F7-#T_UO/BHW?Md", "");
      assertEquals("F7-#T_UO/BHW?Md", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("SecurityException occurred during 1.6 backcompat code", "]+LG!l#u\"zQI");
      assertEquals("SecurityException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("'a75R^z", "1.7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "9-u\"eh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("'~*ZWt`S}!.", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("6.1", "6.1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.rightPad("LANf~?MX8CJ%|F", 1067, '&');
      String string1 = StringUtils.substringAfterLast(string0, "LANf~?MX8CJ%|F");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "I", "v[trsJhT,_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("%#H&3C", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBetween("java.specification.vendor", "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "Linux");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBetween("QXv}pf ", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "pz$+;)", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("|nz>C", "", "Cannot pad a negative amount: ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("{Y%", "]7JKN;oZPLA/!}[p", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "kZ>", "TimeToLive of ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(".po/jwpy:!pld#ehq/l", ".po/jwpy:!pld#ehq/l", ".po/jwpy:!pld#ehq/l");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.leftPad("cJ-|$<v[..LL", 1051, 'K');
      String[] stringArray0 = StringUtils.substringsBetween(string0, ":lQ\"e%n|>a:~<Bj", ">sadgJx.&7hhM2F:c~");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("NoSuchFieldException occurred during 1.6 backcompat code", (String) null, 0);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ", " ");
      String string0 = StringUtils.join((Object[]) stringArray0, "SecurityException occurred during 1.6 backcompat code", (-1), (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SecurityException occurred during 1.6 backcompat code", "SecurityException occurred during 1.6 backcompat code", 0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'j');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("oooo", 'o');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("D:z]@yYTW|kJi:", '@');
      assertEquals("yYTW|kJi:@D:z]", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      String string0 = StringUtils.join((Object[]) stringArray0, 'A', 8192, 8192);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", "");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("user.home", " ");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1", "1", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("E/Sj\";|?>CZ{bg_n", ">sadgJx.&7hhM2F:c~", (-1881));
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("E&X", "AEtRdb+h[Bpdp\"iW", 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '7');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '', (-14), (-14));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, '~');
      assertNotNull(string0);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "java.home", 136, 136);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join((Object[]) stringArray0, "7()0c(=i1TN&");
      assertEquals("7()0c(=i1TN&7()0c(=i1TN&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7()0c(=i1TN&";
      String string0 = StringUtils.join((Object[]) stringArray0, "7()0c(=i1TN&");
      assertEquals("7()0c(=i1TN&7()0c(=i1TN&7()0c(=i1TN&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtils.join(iterator0, 'X');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '?');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, '!');
      assertNotNull(string0);
      assertEquals("DISPLAY!FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HashSet<CharBuffer> hashSet0 = new HashSet<CharBuffer>();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "                                                                                                                               ", 127, 127);
      hashSet0.add(charBuffer0);
      String string0 = StringUtils.join((Iterable<?>) hashSet0, '{');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.swapCase("Oo");
      assertEquals("oO", string0);
      
      String string1 = StringUtils.stripStart("FA9/%", "NFD");
      assertEquals("A9/%", string1);
      
      String string2 = "vgQJs$";
      String[] stringArray0 = StringUtils.substringsBetween("vgQJs$", "vgQJs$", "FA9/%");
      assertNull(stringArray0);
      
      String string3 = StringUtils.chop("A9/%");
      assertEquals("A9/", string3);
      
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string4 = StringUtils.join(iterator0, '=');
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "0oCiu0HM+<E");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "");
      assertEquals("DISPLAYFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Integer integer0 = new Integer(0);
      stack0.add((Object) integer0);
      Iterator<Object> iterator0 = stack0.iterator();
      String string0 = StringUtils.join(iterator0, "SE}]6Ho(2");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '*');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("QXv}pf ");
      assertEquals("QXv}pf", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, "user.region");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.removeStart("F[{", "");
      assertEquals("F[{", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.removeStart("`-oHA=tBc", "`-oHA=tBc");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.removeStart("The character ", "X**M@oaM(t");
      assertEquals("The character ", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, ":=U");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("0lA`yJ&Xt", (String) null);
      assertEquals("0lA`yJ&Xt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("PFQ", "Ocs^rdBK2j");
      assertEquals("PFQ", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, "81b%0k&La`E:K");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.repeat("D", "D", 2066);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.repeat("Linux", "", 2725);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeEnd(")T3+rgPI", "Izz}\"gfW_ \"wC|I.l");
      assertEquals(")T3+rgPI", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "EOEHkQ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("1", "g#3Q!pK*phE]T");
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("'BQM{3g![`T;", (String) null);
      assertNotNull(string0);
      assertEquals("'BQM{3g![`T;", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("u6@NjU~M,fwq", "u6@NjU~M,fwq");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.remove("", "G");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.remove("v{:Ku6]y'wLZ8", "v{:Ku6]y'wLZ8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.remove("OoHy29(WgE:", (String) null);
      assertEquals("OoHy29(WgE:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.remove("", '6');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.remove("!,", 'Q');
      assertEquals("!,", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.remove("]SL<#NU9{}X9", '9');
      assertEquals("]SL<#NU{}X", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.replace("Search and Replace array lengths don't match: ", (String) null, "*roKJR'#5g)j0gY", 256);
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("?l", "9]<0Uz", (String) null);
      assertEquals("?l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.replace("@@float@float@@java.lang.Object@3f26651c", " is less than 0: ", "The String must not be empty", 0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.replace(", Length: 0", "java.specification.version", "n@vh&zx,|8t%", 1);
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Rhw", "Rhw", "Rhw");
      assertEquals("Rhw", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.replace("java.vm.info", "java.vm.info", "", Integer.MAX_VALUE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("Xso+0=1sP38s", (String[]) null, (String[]) null);
      assertEquals("Xso+0=1sP38s", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("1.1", stringArray0, stringArray0);
      assertEquals("1.1", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.replaceEachRepeatedly("^xZ)}V^CY!YVX", stringArray0, (String[]) null);
      assertEquals("^xZ)}V^CY!YVX", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("B|dN<X");
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceEach("81b%0k&La`E:K", stringArray0, stringArray1);
      assertEquals("81b%0k&La`E:K", string0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      String string0 = StringUtils.replaceEachRepeatedly("^xZ)}V^CY!YVX", stringArray0, stringArray0);
      assertEquals("^xZ)}V^CY!YVX", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("l3Nsj&P");
      String string0 = StringUtils.replaceEach("l3Nsj&P", stringArray0, stringArray0);
      assertEquals("l3Nsj&P", string0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("l3Nsj&P");
      StringUtils.replaceEach("Thy#b`V0rN=4=!:; e", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "^xZ)}V^CY!YVX";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("^xZ)}V^CY!YVX", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: ^xZ)}V^CY!YVX
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars("n@vh&zx,|8t%", 'u', 'E');
      assertEquals("n@vh&zx,|8t%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '*', 'U');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Ocs^rdBK2j", "", "G");
      assertEquals("Ocs^rdBK2j", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceChars("gP2u>Ku Fo`", "(d}e", "gP2u>Ku Fo`");
      assertEquals("gP2u>Ku Fo`", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replaceChars("K(", "<p`bK^6e)A{FM)k", (String) null);
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" vs ", " vs ", "vl;R");
      assertEquals("vl;v", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.overlay("S", "K@.k4-h", 2095, 6);
      assertEquals("SK@.k4-h", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, ":!pld#", (-1), (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.overlay(":b0\"SI39|:6r2 o^?'", (String) null, (-1093), 0);
      assertEquals(":b0\"SI39|:6r2 o^?'", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.overlay("Search and Replace array lengths don't match: ", "ClassNotFoundException occurred during 1.6 backcompat code", 0, (-1));
      assertEquals("ClassNotFoundException occurred during 1.6 backcompat codeSearch and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.overlay("5>q5Er\"='IH39#L,z", "', has a length less than 2", 96, (-470));
      assertEquals("', has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.chomp("kf9Uw'CoeZ+D}3IF");
      assertEquals("kf9Uw'CoeZ+D}3IF", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chomp(";");
      assertEquals(";", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chomp("", "Km>xkN(*ZN2fx");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.defaultString("lD+", " is less than 0: ");
      assertEquals("lD+", string0);
      
      String string1 = StringUtils.chomp("O", string0);
      assertEquals("O", string1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.chomp("R|%pb~KZf{s`KT", "");
      assertEquals("R|%pb~KZf{s`KT", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.chop("g");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.repeat("", (-3532));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.repeat("eEH*pp5{up", 1);
      assertEquals("eEH*pp5{up", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, 2346);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.repeat("S", 101);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 18, 'j');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.chop("MMj|oI*UmI");
      String string1 = StringUtils.rightPad(string0, 8202, 'k');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 16, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.rightPad("{*ZuHt`%Dx\"Gu", 2211, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.rightPad("\"5G3|", 5, "t@qqnWQ1rMs");
      assertEquals("\"5G3|", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 32, "_''CQo9v");
      assertEquals("_''CQo9v_''CQo9v_''CQo9v_''CQo9v", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.center("^>e+(`WU5*4j1D", 32, "normalize");
      assertNotNull(string0);
      assertEquals("normalize^>e+(`WU5*4j1Dnormalize", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.center("AYR*Dz*=b;", 13, "java.awt.headless");
      assertEquals("jAYR*Dz*=b;ja", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 214, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 937, (String) null);
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.leftPad("                               iR                               ", 0, "kf9Uw'CoeZ+D}3IF");
      assertEquals("                               iR                               ", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.leftPad("yw$9-u", 2304, "GqPP?T]|Lr]p++");
      String string1 = StringUtils.abbreviate(string0, 2304, 71);
      assertNotNull(string1);
      assertEquals("...]p++GqPP?T]|Lr]p++GqPP?T]|Lr]p++GqPP?T]|Lr]p++GqPP?T]|Lr]p++Gqyw$9-u", string1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = StringUtils.length("PZXoAP");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1901);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.center("IllegalArgumentException occurred during 1.6 backcompat code", 0, 'a');
      assertEquals("IllegalArgumentException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.center(" vs ", 4);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1), "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center("lD+", (-1), "2&Myj1l6;g7");
      assertEquals("lD+", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center("", 5, "");
      assertEquals("     ", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.center("user.dir", 5, ">#&2GjPR1_.");
      assertEquals("user.dir", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = StringUtils.upperCase("Index: ", locale0);
      assertEquals("INDEX: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = StringUtils.lowerCase("rRGWj'.2JA_e93xw", locale0);
      assertEquals("rrgwj'.2ja_e93xw", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.capitalize("1");
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("normalize");
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.swapCase("Fdv08");
      assertEquals("fDV08", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = StringUtils.countMatches(" vs ", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = StringUtils.countMatches(", Length: 0", "g");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" ihC!f%O9`xC!.r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("3Q51-E$%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.CharUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Minimum abbreviation width is 4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(".po/jwpyw$9:!pld#/l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("HbI~p1b4j:Wo]:$*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0bvT<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("             ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("8>2ik-2rAJ2dM|FRd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("kf9Uw'CoeZ+D}3IF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase(")+`%9Puzr>B:5q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("normalizenormalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("IllegalArgumentException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("J");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.defaultString(";rc#RiCk55%$");
      assertEquals(";rc#RiCk55%$", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("AIX", "");
      assertEquals("AIX", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '!');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 16, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.abbreviate("!,", 2198, 2198);
      assertEquals("!,", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("HCPbkg<", 123, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.abbreviate("ClassNotFoundException occurred during 1.6 backcompat code", 16, 16);
      assertEquals("...eption occ...", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.difference(" ", (String) null);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "ut N(k,m1T4^&MJwB");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("//t", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference(";rc#RiCk55%$", "\"d4X- QX-_");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.difference("Ch", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.difference("P", "Pb+nWT;DAp+[yJr>|Y`^ebbPbPb+nWT;DAp+[yJr>|Y`^eb+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr");
      assertEquals("b+nWT;DAp+[yJr>|Y`^ebbPbPb+nWT;DAp+[yJr>|Y`^eb+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr>|Y`^e+nWT;DAp+[yJr", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.difference("1", "1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(";rc#RiCk55%$");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(";rc#RiCk55%$", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i?*:IK6,/itp";
      stringArray0[1] = "i?*:IK6,/itp";
      stringArray0[2] = "i?*:IK6,/itp";
      stringArray0[3] = "i?*:IK6,/itp";
      stringArray0[4] = "i?*:IK6,/itp";
      stringArray0[5] = "i?*:IK6,/itp";
      stringArray0[6] = "i?*:IK6,/itp";
      stringArray0[7] = "i?*:IK6,/itp";
      stringArray0[8] = "i?*:IK6,/itp";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S";
      stringArray0[1] = "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS";
      stringArray0[2] = "S";
      stringArray0[3] = "S";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".n'mjSA>oSa~D";
      stringArray0[1] = ".po/jwp:!pld#\"ehq/l";
      stringArray0[2] = ".n'mjSA>oSa~D";
      stringArray0[3] = ".N'MJsa>OsA~d";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "user.dir");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("0lA`yJ&Xt", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("HsW(=IxY_\">>1H", "JtV]/-6|B=dE&]O;");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("1.5", "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("jq+ma$]", "...");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "%#H&3C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.startsWithAny(";", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      boolean boolean0 = StringUtils.startsWithAny("char", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "4^!$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("1", (String) null);
      assertFalse(boolean0);
  }
}
