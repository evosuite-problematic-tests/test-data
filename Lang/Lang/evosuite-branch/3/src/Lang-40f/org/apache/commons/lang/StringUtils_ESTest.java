/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 05 13:32:37 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("java.lang.Object@5111dd98+java.lang.Object@4a8e9e2+java.lang.Object@6aae7f65+java.lang.Object@47e74675");
      assertNotNull(stringArray0);
      assertEquals(49, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.center("? PD#|Fj^7>_E", 1654);
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, "? PD#|Fj^7>_E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("TimeToLive of ", ':');
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, (String[]) null);
      assertEquals(6, stringArray0.length);
      assertEquals("TimeToLive of ", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.strip("TimeToLive of ");
      assertNotNull(string0);
      assertEquals("TimeToLive of", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, " is less t~rb%0: ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("rN[tbgwFA,Qp?2~Z%4", 'E');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character must not be null", "...");
      boolean boolean0 = StringUtils.startsWithAny("...", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#@O<8IF1Mu?q", "The character must not be null");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'b');
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'b');
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.replace("uKHZ3a", "The character ", "uKHZ3a");
      assertEquals("uKHZ3a", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" zp978itv`-R%@c~;M", " zp978itv`-R%@c~;M");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith(" vs ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "_aq*`H_,4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("R/z>J^b?*8", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("rN[tbgwFA,Qp?2~Z%4", "");
      assertEquals("rN[tbgwFA,Qp?2~Z%4", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("uKHZ3a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("b.1+)$<e31ID^z~C?.u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToNull(")9;");
      assertNotNull(string0);
      assertEquals(")9;", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("The character must not be null");
      assertEquals("The character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Ci");
      assertEquals("Ci", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("$#B");
      assertEquals("$#B", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "Minimum abbreviation width with offset is 7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.strip("!Nisbf3 1}}pKJp`[R", "");
      assertEquals("!Nisbf3 1}}pKJp`[R", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.strip("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly(string0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripEnd(".i``A\"x", ">2U/O+%G:@k$qk.56C");
      assertEquals(".i``A\"x", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("x_Y]u.&E", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "\"e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = StringUtils.indexOf(" is less than 0: ", 'b');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'n');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOf(">2U/O+%G:@k$qk.56C", '8', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, '8', 2586);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "xxrqc'~*");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf(".i``A\"x", "Mjq");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "i8", (-1366));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Minimum abbreviation width is 4", "Minimum abbreviation width is 4", 147);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.chomp("5'>Az@&~ &iMZ");
      assertEquals("5'>Az@&~ &iMZ", string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, (String) null, 55);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("f+v,=GLeMkkU\"KzJa", "", 3083);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.center("rN[tbgwFA,Qp2~Z%4", 2125, "OXweVe/NijPH~N,");
      int int0 = StringUtils.ordinalIndexOf(string0, "OXweVe/NijPH~N,", 38);
      assertEquals(555, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf("", ", Length: 0", (-1738));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf(" ", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "\\u";
      int int0 = StringUtils.indexOf(string0, "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("sD", '?');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'b');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(",9*/TRx%Nm>$F&v[ l", '6', 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'w', 128);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("...", "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("&5(c&of\"40j7RZ9<", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "{}", (-596));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(".i``A\"x", ">2U/O+%G:@k$qk.56C", (-987));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("VCF9:n,8:59}G#Qyg0B", (String) null, (-613));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("{}", '6');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("7A!C)l*}6>Gi0Q57HgY", ')');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("_*m+cGi", " zp978itv`-R%@c~;M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("H1PtA^", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(")9;", ")9;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "lh_+yM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(", '", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("w weD", "w weD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(" is less than 0: ", "~B%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = StringUtils.indexOfAny("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(">2U/O+%G:@k$qk.56C", ".i``A\"x");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny(" vs ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("G<m1l&r", "X-?|K");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(" vs ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("UtU2ccTY", " is less than 0: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("Cannot pad a negative amount: ", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("'lb&gh? _n+nhiy", "GfABA`1:(7~pj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("The Array must not be null", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut("TimeToLive of ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("S+wi1", "S+wi1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut(" vs ", " vs ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "\\u000";
      int int0 = StringUtils.indexOfAnyBut("u<O6r", string0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly(" vs ", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("qorg.apache.commons.lang.ArrayUtils", ":B.jlq4o+Jg<{f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, " ;_?8.r$8?Fd4W&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("r^L5+ep", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("org.apache.commons.lang.StringUtils", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("D*`91PFQ'<_\"mYM", "uKu+9ML7_~+MKzb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "$Q%w&T^z0r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("!<6W,R(K7 8", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Minimum abbreviation width with offset is 7");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("7hy^8GjSx9_seC", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Q%w&T^z0r";
      int int0 = StringUtils.indexOfAny("$q%W&t^Z0R", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = "$q%W&t^Z0R";
      stringArray0[5] = "$q%W&t^Z0R";
      int int0 = StringUtils.indexOfAny("$q%W&t^Z0R", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("uKHZ3a", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Q%w&T^z0r";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      int int0 = StringUtils.lastIndexOfAny("NLj&#b/Be", stringArray0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 3084);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2968));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.substring(">7dSqv%o4UxANK", 3727);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.substring("RdM;]", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.substring(".i``A\"x", (int) '8', 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2787), (-2787));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.left("", (-3153));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.left("", 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.left("Minimum abbreviation width with offset is 7", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.right("", 5055);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.right("Minimum abbreviation width with offset is 7", (-2014));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.right("rT|I1U=d(!shvCagXze", 1);
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 0, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.mid("/0s>ux<r$YpZ*Ha&", (-836), (-1416));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.mid("", ':', 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.mid("NOaAODMKFr@<2S-x}H", (-1691), 256);
      assertEquals("NOaAODMKFr@<2S-x}H", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.mid("_aMraPbSG", 7, 1);
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.substringBefore("X-?|K", (String) null);
      assertEquals("X-?|K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.substringBefore(">8PE?C5", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.substringBefore("&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN=qTL=Wn&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN", "&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN=qTL=Wn&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN&?23<)=IH)+1fAN");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.substringAfter("j+|l\"!7-EU1L0,I`", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.substringAfter("+", "Ci");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.substringAfter("java.lang.object@5111dd98+java.lang.object@4a8e9e2+java.lang.object@6aae7f65+java.lang.object@47e74675", "java.lang.object@5111dd98+java.lang.object@4a8e9e2+java.lang.object@6aae7f65+java.lang.object@47e74675");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("5'>Az@&~ &iMZ", "ChiNZvg!");
      assertEquals("5'>Az@&~ &iMZ", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "\\u00";
      stringArray0[0] = string0;
      String string1 = StringUtils.substringBeforeLast(stringArray0[0], string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("f-w\"WNw1 q", "VU");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("<\"j|USn`'/~81", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("uP;#b@\rvyg8", "y");
      assertEquals("g8", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.apache.commons.lang.ArrayUtils", "org.apache.commons.lang.ArrayUtils");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, " is not in the range '0' - '9'", "FJz0gfak:U");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringBetween("f.'#q5?", (String) null, "D");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$", "TW", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "', has a length less than 2");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("*roKJR'#5g)j0gY", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("~:", "=M:bg:7WJLkD@=", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "HrpFv8noP*ec$B&8n3", "x*hl1!");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("rN[tbgwFA,Qp?2~Z%4", "rN[tbgwFA,Qp?2~Z%4", "$#B");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.repeat("?bNa2_jIO&u<P1*v", 102);
      String[] stringArray0 = StringUtils.substringsBetween(string0, "?bNa2_jIO&u<P1*v", "?bNa2_jIO&u<P1*v");
      assertEquals(51, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("FJz0gfak:U", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("5", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(".i``A\"x", ".i``A\"x", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, '[');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("mo+}E/N_l=BEU;", ';');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("vs", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("5", "5");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" is less than 0: ", "a", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("C", "C");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("n 0:", "The character must not be null");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("NFuWb", " (*~aNx|wFT2", 1101);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBetween("a`(X", "~XD,|s>.GWj");
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wIsQTXs2x");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'G', (-1580), (-1580));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "A2r^UlFq8nYP,");
      String string0 = StringUtils.join((Object[]) stringArray0, 'K');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.join((Object[]) stringArray0, '9', 0, 4);
      assertNotNull(string0);
      assertEquals("999", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "", (-2783), 128);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join((Object[]) stringArray0, "_B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertEquals("ADAEAFAGAIALAMANAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Iterator<String> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, '0');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '<');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char char0 = 'f';
      StringUtils.join((Object[]) null, 'f');
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string0 = StringUtils.join(iterator0, '+');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(122);
      linkedList0.add((Object) integer0);
      Object object0 = new Object();
      linkedList0.add(object0);
      String string0 = StringUtils.join((Collection<?>) linkedList0, '!');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "The String must not be empty");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(0, "7A!C)l*}6>Gi0Q57HgY");
      linkedList0.add("Yv&o0[dT5V3xsW");
      Iterator<String> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, "Strings must not be null");
      assertEquals("7A!C)l*}6>Gi0Q57HgYStrings must not be nullYv&o0[dT5V3xsW", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char char0 = '^';
      StringUtils.contains((String) null, '^');
      StringUtils.split((String) null, (String) null);
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      StringUtils.stripAll((String[]) null, (String) null);
      StringUtils.deleteWhitespace((String) null);
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string0 = "";
      StringUtils.join(iterator0, "");
      String string1 = "d2)";
      StringUtils.equalsIgnoreCase(string0, string1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = string1;
      StringUtils.getCommonPrefix(stringArray0);
      String string2 = ";qPjpnXXF*$!3;X";
      String string3 = StringUtils.upperCase(string2);
      assertNotNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clone();
      linkedList0.iterator();
      linkedList0.add((Object) string3);
      String string4 = "...";
      String string5 = StringUtils.join((Collection<?>) linkedList0, string4);
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string6 = "_^.Jc8";
      String string7 = "";
      StringUtils.substringBeforeLast(string6, string7);
      String string8 = "Minimum abbreviation width with offset is 7";
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(string8);
      assertEquals(7, stringArray2.length);
      
      String string9 = "GV|";
      String string10 = StringUtils.rightPad(string9, int0, char0);
      assertEquals("GV|", string10);
      
      String string11 = "TpuhWzFHmt%A_X{g2&";
      String string12 = StringUtils.replace(string11, string1, string7, int0);
      assertEquals("TpuhWzFHmt%A_X{g2&", string12);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringUtils.substringsBetween("u.3mtttf~", "u.3mtttf~", "u.3mtttf~");
      StringUtils.stripStart((String) null, (String) null);
      StringUtils.substringBefore((String) null, (String) null);
      StringUtils.defaultString("FJz0gfak:U");
      StringUtils.containsAny((String) null, " is not in the range '0' - '9'");
      StringUtils.isNotEmpty("");
      StringUtils.isNotEmpty("");
      StringUtils.isAlphanumericSpace("FJz0gfak:U");
      StringUtils.isNumeric(" is not in the range '0' - '9'");
      StringUtils.containsAny("", "");
      String string0 = StringUtils.chomp("L_,J2x(|m7.QbdJT");
      StringUtils.substringsBetween("The Character must not be null", "u.3mtttf~", "FJz0gfak:U");
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string1 = StringUtils.join(iterator0, (String) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, 'z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = StringUtils.join((Collection<?>) linkedList0, "o~>8dsUb'XxD8`T0TH");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, "Imn~O,X=7P@P\"");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("', has a length less than 2");
      assertEquals("',hasalengthlessthan2", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("i(ZT~");
      assertEquals("i(ZT~", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.removeStart(" vs ", "");
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.removeStart("b;} T<Q8#6", "b;} T<Q8#6");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.removeStart("uN[u?`7", "dZ(?)'ENMsoymh=v9ib");
      assertEquals("uN[u?`7", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "vjX&GbiggF0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("The character ", "");
      assertEquals("The character ", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("The Character must not be null", "1/$");
      assertEquals("The Character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("7hy^8GjSx9_seC", "7hy^8GjSx9_seC");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 4096);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.removeEnd(" vs ", " vs ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.removeEnd("e", "");
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.substringBefore(string0, "^q)>9AydyPSID]|8$Ww");
      assertEquals("\\u000", string1);
      
      String string2 = StringUtils.removeEnd("q", string1);
      assertEquals("q", string2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.stripStart("i:0yxRv0j T9mZ0WM", "<zIwmvJytqg");
      assertEquals("i:0yxRv0j T9mZ0WM", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("2F@,J i-O8x;", string0);
      assertEquals("2F@,J i-O8x;", string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("|j!", "|j!");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.remove("The character must not be null", (String) null);
      assertNotNull(string0);
      assertEquals("The character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.remove("`89<[\"v\"\"L%", "RdM;]");
      assertEquals("`89<[\"v\"\"L%", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.remove("", '\u0000');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.remove("T^GXP(X}T[ec@{t!", '{');
      assertEquals("T^GXP(X}T[ec@t!", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.remove("|e1tPSP;", 'w');
      assertEquals("|e1tPSP;", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "$#B", "#@O<8IF1Mu?q");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.replace("', is neither of type map.entry nor an array", (String) null, " is less than 0: ", 0);
      assertEquals("', is neither of type map.entry nor an array", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.replace("~;2&yc", "~;2&yc", (String) null, 0);
      assertEquals("~;2&yc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.replace("MVw,YI-rQH+ZrGhWE", " vs ", " vs ", 0);
      assertEquals("MVw,YI-rQH+ZrGhWE", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.remove("$@79`=,+=})r;)", "$@79`=,+=})r;)");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("[jQhGb", "[jQhGb", "[jQhGb");
      assertEquals("[jQhGb", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.replace("S& YSRyUzqM*LRk-G", "S& YSRyUzqM*LRk-G", "Index: ", 299);
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("8`jL", (String[]) null, (String[]) null);
      assertEquals("8`jL", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      StringUtils.replaceEach("", stringArray1, stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("Index: ", stringArray0, stringArray0);
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&i%!`7'Pn4", "&i%!`7'Pn4", 0);
      String[] stringArray1 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The String must not be empty";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The String must not be empty", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: The String must not be empty
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", '", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("|pRp4n@jc89;f~=WZ'", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 1
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceEachRepeatedly("6ygz3,?L+}!", stringArray0, stringArray0);
      assertEquals("6ygz3,?L+}!", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "\\u000";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Jlm'Y";
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("\\u000", string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "\\u000";
      String[] stringArray0 = new String[9];
      stringArray0[4] = string0;
      stringArray0[8] = string0;
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(string0, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "\\u000";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Jlm'Y";
      stringArray0[1] = "43_Ze'MB5pdF0KhyJc";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = string0;
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = string0;
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertEquals("\\u000", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Minimum abbreviation width with offset is 7", 't', 't');
      assertEquals("Minimum abbreviation width with offset is 7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'a', 'i');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "", "{}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.apache.commons.lang.CharUtils", "", "");
      assertEquals("org.apache.commons.lang.CharUtils", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.replaceChars("0;lUZ6^AB}ZZxU?%", "Minimum abbreviation width with offset is 7", (String) null);
      assertEquals("0;lUZ6^AB}ZZxU?%", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p=;Jejrw2~ H+0^Q", "p=;Jejrw2~ H+0^Q", "2~s1+HEd\"<u");
      assertEquals("2~s1+HEd\"<u", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "z,5\">#", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.overlay("", (String) null, 3068, 1620);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.overlay("\"", ";-;O_l9", (-1416), (-1416));
      assertEquals(";-;O_l9\"", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.overlay("The character ", "%f7`h4^3mg#;GwC9D", 4096, 2);
      assertEquals("Th%f7`h4^3mg#;GwC9D", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.chomp("5");
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.chomp("5", "org.apache.commons.lang.StringUtils");
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.chomp(";01", (String) null);
      assertNotNull(string0);
      assertEquals(";01", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.chomp("=qTL=Wn", "");
      assertEquals("=qTL=Wn", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.chop(" vs ");
      assertEquals(" vs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "", 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 1);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.repeat("Z", 510);
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.repeat(string0, 8191);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.repeat("}", (String) null, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 1640);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.rightPad(" ", 9980, 'E');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 1, "+Mj)u7WxCF^rlR)4Ud");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.center("rN[tbgwFA,Qp2~Z%4", 32, "N[4wb@}8");
      assertEquals("N[4wb@}rN[tbgwFA,Qp2~Z%4N[4wb@}8", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 5, "~^hqEO(,rg<cs~q#?V");
      assertEquals("~^hqE", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.leftPad("=LA)^P1Taq`PD}$+", (-924), ':');
      assertEquals("=LA)^P1Taq`PD}$+", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.leftPad("q", 8874, '5');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 97, "");
      assertEquals("                                                                                                 ", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 0, "jE");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.leftPad("Ci", 4, "Ci");
      assertEquals("CiCi", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = StringUtils.length("$<IxJVM8aXu6");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 401);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.center("k45[B", 0);
      assertEquals("k45[B", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.center("The String must not be empty", 5);
      assertEquals("The String must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 5, "org.apache.commons.lang.StringUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.center("", (-1), "QXv}pf ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.center("#{?\"PZu)gy>", 1754, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang.ArrayUtils", 4, "+");
      assertEquals("org.apache.commons.lang.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.upperCase(", '");
      assertNotNull(string0);
      assertEquals(", '", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("7&<Nt,");
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Locale locale0 = Locale.US;
      String string0 = StringUtils.lowerCase("wkrc~e$", locale0);
      assertNotNull(string0);
      assertEquals("wkrc~e$", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.capitalize("RdM;]");
      assertEquals("RdM;]", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("k%KPCz=");
      assertEquals("k%KPCz=", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.swapCase("nS");
      assertEquals("Ns", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.swapCase(",z'");
      assertEquals(",Z'", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      int int0 = StringUtils.countMatches("", ")9;");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = StringUtils.countMatches("...", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int int0 = StringUtils.countMatches("WgA^wUYB", "WgA^wUYB");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Index: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("sD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("EpsP;uQ|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("The character ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("AN~!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("zTJgwByR13=tO");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("];v6%4W=799znkt7G.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("7IJBu}PJbG#4sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("7fUJ^E#lNohG1 |G4}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" (*~aNx|wFT2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" torg.apache.commons.lang.StringUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("rN[tbgwFA,Qp?2~Z%4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("D[k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("VI");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.defaultString("', is neither of type Map.Entry nor an Array", "fr`q+\"2[M^qL");
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "PLfVi4xel<!&4OuetL");
      assertNotNull(string0);
      assertEquals("PLfVi4xel<!&4OuetL", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("OdM.A-TB|tX15{&j", "");
      assertEquals("OdM.A-TB|tX15{&j", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'g');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = StringUtils.abbreviate("g", 10, 510);
      assertEquals("g", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("nS", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.abbreviate("$Al3m*N>!b5SLxI|SC$", 22, 16);
      assertEquals("...N>!b5SLxI|SC$", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(";][Dip|t*eF~Z9^5", 32, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.abbreviate("ORG.APACHE.COMMONS.LANG.cHARuTILS", 14, 14);
      assertEquals("...MONS.LAN...", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.difference("The character must not be null", "#@O<8IF1Mu?q");
      assertEquals("#@O<8IF1Mu?q", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.difference("`dMCzo[W", (String) null);
      assertNotNull(string0);
      assertEquals("`dMCzo[W", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("TimeToLive of ", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.difference("The character must not be null", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("RJE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw|q0GhE|zw", "RJ");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Minimum abbreviation width with offset is 7";
      stringArray0[1] = "m(M";
      stringArray0[2] = "%;`]X#`%";
      stringArray0[3] = "Strings must not be null+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";
      stringArray0[4] = " 20Nb]Nd";
      stringArray0[5] = "Strings must not be null";
      stringArray0[6] = "Strings must not be null";
      stringArray0[7] = "SVf>";
      stringArray0[8] = "%;`]X#`%";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";!,Y,-$kl";
      stringArray0[1] = ";!,Y,-$kl";
      stringArray0[2] = ";!,Y,-$kl";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";!,Y,-$kl";
      stringArray0[1] = ";!,Y,-$kl;!,Y,-$kl";
      stringArray0[2] = ";!,Y,-$kl";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(";!,Y,-$kl", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "Index: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("z,5\">#", "");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("Strings must not be null", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("Minimum abbreviation width with offset is 7", "...");
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("Index: ", "RT|I1U=d(!shvCagXze");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "PvELf3!,dAVh)-[kH{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Minimum abbreviation width with offset is 7", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "o''>", 0);
      boolean boolean0 = StringUtils.startsWithAny("d<F9n,8:59}G#Qyg0B", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "x_Y]u.&E";
      boolean boolean0 = StringUtils.startsWithAny("x_Y]u.&E", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "Array element ");
      assertFalse(boolean0);
  }
}
