/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 12:47:16 GMT 2018
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 128);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("G>=", (String) null, "\"}N72`6");
      assertEquals("G>=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.trimToNull("PdgX#?");
      assertNotNull(string0);
      assertEquals("PdgX#?", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.rightPad("dUN.oe=='ULryi:", (-1371));
      assertEquals("dUN.oe=='ULryi:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokensis less than 0: ", " is less than 0: ", 774);
      assertEquals(774, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" is less than 0: ", 774);
      assertEquals(" is less than 0: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is 4", "V:?H~'", (-2100));
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("<79O0/D]:*:'R&", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Ht!4+1N:v5Cs");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.replace("", "lzZ", "xJ/c?>%PHwZ");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains(string0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("/h*g3a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("', is neither of type Map.Entry nor an Array");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToNull("HRQ");
      assertNotNull(string0);
      assertEquals("HRQ", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = "'";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width with offset is 7";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width with offset is 7");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "The character ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.strip(" vs ", "M[=");
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripEnd("The String must not be empty", "The String must not be empty");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("org.apache.commons.lang.CharUtils", "[0c~;rd:eg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "scy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "lfcy-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOf("Tu~lC`", 'A');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf("", ' ');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf("1Z^p", '', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '\u0019', (-2196));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "8wCa5b*JqH4}|)>*WE>");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf("g ", "The character ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf("/Mo<i`V@e", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "; 3rLq:r", (-1147));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("jJ", "jJ", 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", (String) null, 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "xJ/c?>%PHwZ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 909);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("cb", "cb", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "...", 3502);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.rightPad("The character must not be null", 1884);
      int int0 = StringUtils.indexOf(string0, "", 1479);
      assertEquals(1479, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("Strings must not be null", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("Strings must not be null", "Cannot pad a negative amount: ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("E*X:z{&_%KTb?z", '-');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'F');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("Minimum abbreviation width with offset is 7", 'p', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '1', 386);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("g", "y3q;");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "zn?bBF{4'!vI", (-3962));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", "@S[H", 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("01", (String) null, 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("HRQ", '7');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", 'Z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(", '", ' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("E*X:z{&_%KTb?z", "ZN$@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "TimeToLive of ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY3xLu.", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("iC!bM}{,2", "lfcy-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("KPI^f[Q6[o(", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("hB]|v|bT{", (String) null);
      assertNotNull(string0);
      assertEquals("hB]|v|bT{", string0);
      
      int int0 = StringUtils.indexOfAny("c\u0006w4y0sjFJ", string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("$U9=ZAQG", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "\\u000";
      int int0 = StringUtils.indexOfAny("c\u0006w4y0sjFJ", string0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("wS\"QL", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsAny("', is neither of type Map.Entry nor an Array", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("JtW", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("/h*g3a", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'r';
      boolean boolean0 = StringUtils.containsAny("', is neither of type Map.Entry nor an Array", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("C*<QZ>Du/.k<bX", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("4]5-yw", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("]5Q", "]5Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "The Character must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("!BtLhiB.V#ijz\"y", "UTb");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("psQk;ni*_h5(^", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("dTt+]pq>#pl1uW}p", "dTt+]pq>#pl1uW}p");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("L`j^U;", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly("", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly("=(U+EZ595|.1", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("vz`79{X", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^;s-f;}545]b.x~arbpqrstuvwxyz{|}~", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone(" ", "Minimum abbreviation width with offset is 7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("V)dF~#~]Y}y)KTj", "tfR:^Oc|b+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("coAmm}/g", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("The character must not be null", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Cannot pad a negative amount: ";
      int int0 = StringUtils.indexOfAny("q_GfRq;DI9zeX+8&", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int0 = StringUtils.indexOfAny("P{<F<\"f3`|_Rv-zYub", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", "xJ/c?>%PHwZ");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("TimeToLive of ", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.substring("LzooAX0", (-1794));
      assertNotNull(string0);
      assertEquals("LzooAX0", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.substring("', has a length less than 2", 2);
      assertEquals(" has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.substring("p6)q8f*ajY/PR<<m", 128);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 5, 3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring("plVy]TNK", 1322, 2408);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("java.lang.Object@0000000001", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.left("", 403);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.left("", (-3989));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.left("Index: ", 2);
      assertEquals("In", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 1919);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.right("$u9=ZaQG", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.right("T:tb", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.mid("org.apache.commons.lang.ArrayUtils", 2301, 2301);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 3, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.mid("dUN.oe=='ULryi:", (-1371), (-1371));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid("evia", (-85), 2147483645);
      assertEquals("evia", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.trimToNull("PdgX#?");
      assertEquals("PdgX#?", string0);
      
      String string1 = StringUtils.mid(string0, 0, 0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substringBefore("wt'?7q'~", "wt'?7q'~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" ", (String) null);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringBefore("$U9=ZAQG", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringBefore("KPI^f[Q6[o(", "]HBx1u!\"|$+");
      assertEquals("KPI^f[Q6[o(", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wt'?7q'~", "wt'?7q'~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Minimum abbreviation width with offset is 7", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringAfter("W/$dB", "31O");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLastvkKgytK3f-?aC");
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("]zovRMFuvM6~@", "");
      assertEquals("]zovRMFuvM6~@", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("_;SjxwA*S\"AjLe^)I<", "_;SjxwA*S\"AjLe^)I<");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("V,p?", "'.A2MI6j#?OZ75aRw");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("CT U", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" is less than 0: ", " is less than 0:");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("lI %`-[c3<.ov2", "lI %`-[c3<.ov2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang.ArrayUtils", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringBetween("6xd6oscy", "4GhI%p1eoN:FH-X%Z}m", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBetween("g", "lFCd<", "g");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "E'\"~0)LL{[");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, ";;hw()}m3}^!D|?9", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "17vv ;I*>VVZ", "v+U0v]4XjY+#");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("',/]:^2", "*<Xdo$: .(f)rg/D", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("_;SjxwA*S\"AjLe^)I<", "', has a length less than 2", " ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", "H9DlaP<x0USR7,f=#");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang.ArrayUtils", 354);
      String[] stringArray0 = StringUtils.substringsBetween(string0, "org.apache.commons.lang.ArrayUtils", "org.apache.commons.lang.ArrayUtils");
      assertEquals(177, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "The String must not be empty");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("4bd~Dv^~ca_EV", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", "");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("_vta+o>u_\"HyC", "_vta+o>u_\"HyC", 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("R`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`zH+Br]^:^A:K+z3::PR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z}H-bR`z", "H+Br]^:^A:K+z3::PR`z}H-b");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, 'l');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'l');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(" :hctam t'nod shtgnel yarra ecalpeR dna hcraeS", '\'');
      assertEquals("nod shtgnel yarra ecalpeR dna hcraeS' :hctam t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "&", (-1));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" is less than 0: ", (String) null, (-1818));
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The Character must not be null", "", 5);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o%l%s/mi0av}zMJh", "w`rtUI)Vh9y/@r");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", " vs ", 601);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "GAMn/:r@@\\u.Y%V$7%";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 's');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '8', 22, (-126));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, 'R');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0, "m^{Lsa>Vzy");
      assertNotNull(string0);
      assertEquals("m^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzy", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "", (-578), 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kbMm5O", '\"');
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("kbMm5O", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, "kXAfLQ7<J!_I vMFe@=", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = StringUtils.join((Collection<?>) linkedList0, 'm');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'I');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) ", Length: ");
      linkedList0.add((Object) ", Length: ");
      String string0 = StringUtils.join((Collection<?>) linkedList0, 'C');
      assertEquals(", Length: C, Length: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      linkedList0.add("");
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'f');
      assertFalse(listIterator0.hasNext());
      assertEquals("f", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang.ArrayUtijJ", "org.apache.commons.lang.ArrayUtijJ", 402);
      String string1 = StringUtils.center(string0, 402, "The character ");
      assertNotNull(string1);
      
      StringUtils.equalsIgnoreCase("6>h'9e mbq$/h*g3a", "m^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzyjava.lang.Object@5b82ad7b");
      char char0 = 'c';
      StringUtils.leftPad((String) null, 1, 'c');
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      stringArray0[1] = "6>h'9e mbq$/h*g3a";
      stringArray0[2] = "m^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzym^{Lsa>Vzyjava.lang.Object@5b82ad7b";
      String string2 = "\\u";
      stringArray0[3] = string2;
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
      
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string3 = StringUtils.join(iterator0, 'c');
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "=a";
      char[] charArray0 = new char[6];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      char char1 = '6';
      charArray0[4] = char1;
      charArray0[5] = char0;
      boolean boolean0 = StringUtils.containsOnly(string4, charArray0);
      assertFalse(boolean0);
      
      String string5 = StringUtils.chop(string2);
      assertEquals("\\", string5);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = StringUtils.join((Collection<?>) linkedList0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "...");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("oN97RMV");
      String string0 = StringUtils.join((Collection<?>) linkedList0, "', has a length less than 2");
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("oN97RMV");
      linkedList0.add("org.apache.commons.lang.ArrayUtils");
      String string0 = StringUtils.join((Collection<?>) linkedList0, "', has a length less than 2");
      assertEquals("oN97RMV', has a length less than 2org.apache.commons.lang.ArrayUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      String string0 = StringUtils.join((Collection<?>) linkedList0, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, 'a');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, "(t^");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("The Character must not be null");
      assertEquals("TheCharactermustnotbenull", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.removeStart("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.removeStart("YP /P<SpwS,5/:S4", (String) null);
      assertNotNull(string0);
      assertEquals("YP /P<SpwS,5/:S4", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.removeStart("Array element ", "The String must not be empty");
      assertEquals("Array element ", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.removeStart(" vs ", " vs ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("{slt5.:SV", "");
      assertEquals("{slt5.:SV", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("6r!fbs", "KPI^f[Q6[o(");
      assertEquals("6r!fbs", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeEnd("&Z(*U2{[6i5]%BT[z<", "The Character must not be null");
      assertEquals("&Z(*U2{[6i5]%BT[z<", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "BP_0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("6>H'9E MBq$2jL*3\"", "/h*g3a");
      assertEquals("6>H'9E MBq$2jL*3\"", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.remove("", "org.apache.commons.lang.ArrayUtils");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.remove("TimeToLive of ", "TimeToLive of ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.remove("A,F`!7>s`XE:]3OD", "");
      assertEquals("A,F`!7>s`XE:]3OD", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.remove("", ' ');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.remove("J4;Fc g\\-!@'3d;", '3');
      assertEquals("J4;Fc g\\-!@'d;", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("uL\"#v5A8", " CCz;D/AMlH}XuL9ku", (String) null);
      assertNotNull(string0);
      assertEquals("uL\"#v5A8", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.replace("fd<*`", "fd<*`", "Cannot pad a negative amount: ", 0);
      assertEquals("fd<*`", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.replace("l3#", "8<U1\"k/4kO", "lFCd<", (-1));
      assertEquals("l3#", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertEquals("\\u", string1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.replace("Cannot get the toString of a null identity", "Cannot get the toString of a null identity", "Cannot get the toString of a null identity", 4096);
      assertEquals("Cannot get the toString of a null identity", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("org.apache.commons.lang.ArrayUtijJ", "org.apache.commons.lang.ArrayUtijJ", "org.apache.commons.lang.ArrayUtijJ");
      assertEquals("org.apache.commons.lang.ArrayUtijJ", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("gm!u`w&o+3Lv>=npU;", "2WZR\"j");
      StringUtils.replaceEachRepeatedly("|4fc^G", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.remove(string0, 'y');
      String[] stringArray0 = new String[7];
      String string2 = StringUtils.replaceEach(string1, (String[]) null, stringArray0);
      assertEquals("\\u00", string2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", 'T');
      String string0 = StringUtils.replaceEach("The character must not be null", stringArray0, stringArray0);
      assertEquals("The character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L<7@BwlHx:!MmEP@Lm";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("L<7@BwlHx:!MmEP@Lm", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: L<7@BwlHx:!MmEP@Lm
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("I+z+Nk?P^5D([->@sd");
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("w", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 16 vs 1
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach("e}", stringArray0, stringArray0);
      assertEquals("e}", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(">~R?.<+U+&D0", ">~R?.<+U+&D0", 133);
      StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("pYZPQ8");
      String string0 = StringUtils.replaceEach("pYZPQ8", stringArray0, stringArray0);
      assertEquals("pYZPQ8", string0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.remove(string0, 'y');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The character must not be null";
      stringArray0[1] = "ZupzUqQ=H_( ";
      stringArray0[2] = "";
      stringArray0[3] = string0;
      stringArray0[4] = "";
      stringArray0[5] = string0;
      stringArray0[6] = string1;
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertEquals("\\u00", string2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.replaceChars("gSjPnky%x0", '-', '-');
      assertEquals("gSjPnky%x0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'Z', 'Z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", (String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replaceChars("^G@KS/9bak,Tea", "^G@KS/9bak,Tea", "^G@KS/9bak,Tea");
      assertEquals("^G@KS/9bak,Tea", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replaceChars(", '", (String) null, "");
      assertEquals(", '", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Minimum abbreviation width with offset is 7", "^`\"l-P14NBfL|}w", (String) null);
      assertEquals("Minimum abbreviation idth ith oset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replaceChars("jJ", "]|.903@}*d3&", "<6Ot=ZJ^{g]k]hoZKCj");
      assertEquals("jJ", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.overlay("n]418_M", (String) null, 32, 32);
      assertNotNull(string0);
      assertEquals("n]418_M", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.overlay("", "Osi5{]H2", 32, 32);
      assertEquals("Osi5{]H2", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.overlay("The Character must not be null", "", (-1), 0);
      assertEquals("The Character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.overlay("LWRfY!rK?", "", 0, (-1200));
      assertEquals("LWRfY!rK?", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.overlay("The Character must not be null", "|cv*|he#kl@NH", 5, 0);
      assertEquals("|cv*|he#kl@NHharacter must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.chomp("p...");
      assertEquals("p...", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.chomp("?");
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.chomp("IGR!6H;7", "zn?bBF{4'!vI");
      assertEquals("IGR!6H;7", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.chomp(")F!'V6{o(Us", (String) null);
      assertNotNull(string0);
      assertEquals(")F!'V6{o(Us", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chomp("0hm~zOw$;!:3@,0W)r", "0hm~zOw$;!:3@,0W)r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chop("E3h)gB");
      assertEquals("E3h)g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "p(dZnxSE", (-1661));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.repeat("=:UyP5CaI&Ey", "L3#K?WUS", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.repeat("H9DlaP<x0USR7,f=#", "", 1);
      assertEquals("H9DlaP<x0USR7,f=#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1190);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 1053);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.repeat(string0, 39);
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.repeat("L`j^U;", (String) null, 32);
      assertEquals("L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;L`j^U;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 232);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("{AFp>_ KWKl|qu#!", 27336, 'f');
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0, "=-_'KW9cirM@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.rightPad("TimeToLive of ", 470, "");
      assertEquals("TimeToLive of                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.rightPad("\"}N72`6", 0, "T:7]Gr/\"_B-}leJ&");
      assertEquals("\"}N72`6", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.rightPad("!BTLHIB.V#IUTBY", 32, "!BTLHIB.V#IUTBY");
      assertEquals("!BTLHIB.V#IUTBY!BTLHIB.V#IUTBY", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 5, "<ik^`oh");
      assertEquals("<ik^`", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 0, 'p');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8206, ',');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-1), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.lang.Object@254bff0cjava.lang.Object@409040b0", (-511), "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.repeat("d=", "d=", 1534);
      String string1 = StringUtils.leftPad("d=", 4096, string0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.center("Lr9zg+", (int) 'k', "");
      assertEquals("                                                  Lr9zg+                                                   ", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.leftPad("!J`NBNTM`{_M", 29, "DPo5bHeDX{O&]G{qg");
      assertEquals("DPo5bHeDX{O&]G{qg!J`NBNTM`{_M", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1318, 'h');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.center("", (-1), 'W');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.center("g", 1242);
      String string1 = StringUtils.center(string0, 1242, '4');
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center(", '", (-1), (String) null);
      assertNotNull(string0);
      assertEquals(", '", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.lowerCase(" is less than 0:");
      assertEquals(" is less than 0:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      String string0 = StringUtils.lowerCase("pn9WYz+^XI!~TIY", locale0);
      assertNotNull(string0);
      assertEquals("pn9wyz+^xi!~tiy", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.capitalize("_;SjxwA*S\"AjLe^)I<");
      assertEquals("_;SjxwA*S\"AjLe^)I<", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.swapCase("pYZPQ8");
      assertEquals("Pyzpq8", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = StringUtils.countMatches("org.apache.commons.lang.ArrayUtils", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = StringUtils.countMatches("W3|C3_R5`i\"i%pK-ah", "W3|C3_R5`i\"i%pK-ah");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("T.G3Fq*G");
      assertEquals("t.G3Fq*G", string0);
      
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("org.apache.commons.lang.StringUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("The character must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("m^{Lsa>Vzy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("5P/\"LYx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("The String must not be empty");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(";DrR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("6xd6...y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("The character must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("5P/\"LYx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Lr9zg+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("YR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.defaultString(string0, string0);
      assertEquals("\\u000", string1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.remove(string0, 'y');
      String string2 = StringUtils.defaultIfEmpty(string1, "ZupzUqQ=H_( ");
      assertEquals("\\u00", string2);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "edy,B+");
      assertEquals("edy,B+", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '*');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 0, 980);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`ab;s-f;}545]b.x~arbtuvwxyz{|}~", (-1873), (-1873));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.abbreviate("_;NN5F^n`R=+yY", 90, 7);
      assertEquals("...+yY", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("hm~zow$;!:3@,", 1388, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.rightPad("m^{lsa>vzym^{lsa>vzym^{lsa>vzym^{lsa>vzym^{lsa>vzym^{lsa>vzym^lsa>vzyjava.lang.object@5b82ad7b", 1945, "m^{lsa>vzym^{lsa>vzym^{lsa>vzym^{lsa>vzym^{lsa>vzym^{lsa>vzym^lsa>vzyjava.lang.object@5b82ad7b");
      String string1 = StringUtils.abbreviate(string0, 68, 32);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.difference("Gn Af sU>69Z*CoFx", (String) null);
      assertEquals("Gn Af sU>69Z*CoFx", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "q,BUOl(9");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("strings must not be nullAf?]wOp-3@<", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("", "org.apache.commons.lang.StringUtils");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.difference("&g+X\"*9?MPNmO{(Ia", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang.ArrayUtijJ", "org.apache.commons.lang.ArrayUtijJ", 402);
      int int0 = StringUtils.indexOfDifference("org.apache.commons.lang.ObjectUtils$Null", string0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (-1373));
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "The Array must not be null";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.center("", 1232, "byP)gsnr-");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "byP)gsnr-";
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = "byP)gsnr-";
      stringArray0[4] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("byP)gsnr-", string1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("A{%'", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("pn9WYz+^XI!~TIY", "");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("Array element ", " h'X'K|n");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("The Array must not be null", "The Array must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "Index: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "TimeToLive of ");
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", (String) null, 0);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("', has a length less than 2", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("kbMm5O", '\"');
      boolean boolean0 = StringUtils.startsWithAny("kbMm5O", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("", "I-u%F.\bu<{haV");
      assertFalse(boolean0);
  }
}
