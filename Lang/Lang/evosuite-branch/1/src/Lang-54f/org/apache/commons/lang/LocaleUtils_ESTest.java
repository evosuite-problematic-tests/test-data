/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 13:16:03 GMT 2018
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = new Locale("t+)-pPU0l9%E!t");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = new Locale("#wwZ=B^oCHO[EG");
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("cteZjuh/?GUb+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: cteZjuh/?GUb+
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ju_JC");
      assertNotNull(locale0);
      assertEquals("JC", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("+zIxH[YCP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: +zIxH[YCP
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("{\"ELIr'}<9/Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: {\"ELIr'}<9/Q
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ju__:F7");
      assertNotNull(locale0);
      assertEquals(":F7", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ju_#V.{7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ju_#V.{7
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("lu_aV.9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: lu_aV.9
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ju_Z1J2V.{7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ju_Z1J2V.{7
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ju_Zv.7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ju_Zv.7
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ju_ZJ2V.{7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ju_ZJ2V.{7
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ju_JV_{");
      assertEquals("ju", locale0.getLanguage());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = new Locale("", "", "AT");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = new Locale("6?=F22YPc|>C", "6?=F22YPc|>C");
      Locale locale1 = Locale.ENGLISH;
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      Set set1 = LocaleUtils.availableLocaleSet();
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("44{-`(tqGn ");
      LocaleUtils localeUtils0 = new LocaleUtils();
      LocaleUtils.languagesByCountry("2Tx5-");
      LocaleUtils.languagesByCountry("44{-`(tqGn ");
      List list1 = LocaleUtils.countriesByLanguage("Cij^w7V:1\rn");
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocaleUtils.languagesByCountry("");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zl|l@t{dmGDKRd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zl|l@t{dmGDKRd
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocaleUtils.languagesByCountry((String) null);
      Locale locale0 = Locale.UK;
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry("TH");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocaleUtils.countriesByLanguage("|yYt");
      String string0 = null;
      LocaleUtils.toLocale((String) null);
      String string1 = "th";
      LocaleUtils.toLocale("th");
      LocaleUtils.countriesByLanguage("nl");
      LocaleUtils.countriesByLanguage("nl");
      String string2 = "bg";
      LocaleUtils.toLocale("bg");
      String string3 = "Invalid locale format: ";
      LocaleUtils.countriesByLanguage("Invalid locale format: ");
      String string4 = "en";
      LocaleUtils.countriesByLanguage("en");
      LocaleUtils.countriesByLanguage("th");
      LocaleUtils.toLocale("th");
      LocaleUtils.countriesByLanguage("PsjbGN");
      String string5 = "8";
      String string6 = "mt";
      LocaleUtils.countriesByLanguage(string6);
      LocaleUtils.toLocale(string2);
      LocaleUtils.countriesByLanguage(string3);
      LocaleUtils.countriesByLanguage(string5);
      LocaleUtils.toLocale(string0);
      LocaleUtils.toLocale(string1);
      String string7 = "i7/>aTVHm-]$";
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale(string7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: i7/>aTVHm-]$
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocaleUtils.countriesByLanguage("|yYt");
      String string0 = null;
      LocaleUtils.toLocale((String) null);
      String string1 = "th";
      LocaleUtils.toLocale("th");
      LocaleUtils.countriesByLanguage("nl");
      LocaleUtils.countriesByLanguage("nl");
      String string2 = "bg";
      LocaleUtils.toLocale("bg");
      String string3 = "Invalid locale format: ";
      LocaleUtils.countriesByLanguage("Invalid locale format: ");
      String string4 = "en";
      LocaleUtils.countriesByLanguage("en");
      LocaleUtils.countriesByLanguage("th");
      LocaleUtils.toLocale("th");
      LocaleUtils.countriesByLanguage("PsjbGN");
      String string5 = "8";
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 8
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }
}
