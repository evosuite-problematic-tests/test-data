/*
 * This file was automatically generated by EvoSuite
 * Mon Dec 24 12:22:40 GMT 2018
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Iterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("/<\"^JFM93!3", "/<\"^JFM93!3", 127);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("}iZ", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.replaceEach((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The stripAccents(String) method is not supported until Java 1.6", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(" vs ", "java.awt.graphicsenv");
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.center("", (-424));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" is less than 0: ");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("islessthan0:", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.rightPad("w+lAnp&Br  ataUL", (-2959));
      assertNotNull(string0);
      assertEquals("w+lAnp&Br  ataUL", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.leftPad(">'s:W3b", 0);
      assertEquals(">'s:W3b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("java.lang.Object@6f463850=java.lang.Object@fdcf811=java.lang.Object@7072175b=java.lang.Object@7072175b=java.lang.Object@ca2d417=java.lang.Object@5278f96b=java.lang.Object@3a8c8f45=java.lang.Object@5a248f80", "java.lang.Object@6f463850=java.lang.Object@fdcf811=java.lang.Object@7072175b=java.lang.Object@7072175b=java.lang.Object@ca2d417=java.lang.Object@5278f96b=java.lang.Object@3a8c8f45=java.lang.Object@5a248f80", 1392);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.startsWithAny("Z", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(">'s:W3b");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("path.separator", ">u2W");
      assertEquals("path.separator", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.substringBetween("[", "1BzDd");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((String) null, "CmcFvz#Zba{VS#e?#*", 128);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.replace("b3W:s'>", "java.class.path", ")}T_D6nHM`)g1t");
      assertEquals("b3W:s'>", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Ll_?`GCokX", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "-^nv8:[ ;c");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, "Rmm+/'#%HpEblU@WKsl");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.removeEnd("}iZ", "");
      assertEquals("}iZ", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{dz\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("java.lang.Object@6f463850=java.lang.Object@fdcf811=java.lang.Object@7072175b=java.lang.Object@7072175b=java.lang.Object@ca2d417=java.lang.Object@5278f96b=java.lang.Object@3a8c8f45=java.lang.Object@5a248f80");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("S%=XW[UgpDNU)fH");
      assertEquals("S%=XW[UgpDNU)fH", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripToNull("TimeToLive of ");
      assertEquals("TimeToLive of", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.strip(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H/s^'pho`ln>$!";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.strip("lHSFu^V(WCD4@jVM{^S", "lHSFu^V(WCD4@jVM{^S");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "b");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "G9e{eyj7Hf%~*rGb5";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "EMiG jE");
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripEnd("+aS(vR`Lo-", "+aS(vR`Lo-");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "OzxX2.j");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "+yAn", (-1));
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "D{pVU");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "L<J'^*XjgrQ?", (CharSequence) "\"3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase(".ING=N=)Q", ".ING=N=)Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "EA@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf("9U7Po7/ZvGClt1S", 'c');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, '{');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf("Minimum abbreviation width is 4", 't', 1194);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 'V', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "W By3z-7ySBu");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf("Minimum abbreviation width with offset is 7", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null, 1034);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("*i'uh2khfrgtvbq", "l^0c@a,yi{~a'u7[", 112);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("The stripAccents(String) method is not supported until Java 1.6", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(">}MDaR&'`", (String) null, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("wn9SivXmj X4My:", "tjLRD", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Q7E{G", "", 16);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 13);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("im7VV{578~4\"", "gw&vrEQD`nPB");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("6.1", "9U7Po7/ZvGClt1S");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("java.class.path", "", (-1449));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("Um4C@z", "Um4C@z");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, 'A');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("H/s^'pho`ln>$!", ')', 2520);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '[', 94);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("&Q8 'a]ra(#el#[OuY", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "user.name", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("java.util.prefs.PreferencesFactory", "", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("va.vm.speci", (String) null, (-2056));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "@%yIP5");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("<|8c\"ks]gR){wY!I( ", "<|8c\"ks]gR){wY!I( ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "F9l8{jMJt6?'080kMZ?", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("int", (String) null, 108);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "", (-2529));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("ClassNotFoundException occurred during 1.6 backcompat code", "");
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase(" vs ", "3A");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("w(IxP$R5)<A", 'D');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", '&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("8'!j1HSdQ-7E,B$*td", '7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "WB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("HoLB", "C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("b", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "\"3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("java.vm.specification.name", "*i'ulj0s.7h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("T7\"(@,Ik5", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("'l>$sX", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "W By3z-7ySBu", "boolean");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.chop("75smAT<MO`wI{/");
      assertNotNull(string0);
      assertEquals("75smAT<MO`wI{", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      int int0 = StringUtils.indexOfAny((CharSequence) "bcdefgh99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", charArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "U{W_'p`V?", "[N@hHyC46?=F22");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "ClassNotFoundException occurred during 1.6 backcompat code", " {$FfGpMwG24oW");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      int int0 = StringUtils.indexOfAny((CharSequence) string0, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.swapCase("K");
      assertEquals("k", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("wn9SivXmj X4My:", "wn9SivXmj X4My:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("4.1", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny(" is less than 0: ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("y1`", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "EA@", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r~3^*`", "r~3^*`");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '.';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ".srp64h|lfu>f2", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", ">'aD%");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("gd7jT,D:t`P:!L", "#21gnS?]w5pDy~Ilo");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("X@HB!(@_7:slYz%wPv`", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("+`_Dsr]X<6i|>A,", "+`_Dsr]X<6i|>A,");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "4.1", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "abxP5JlR", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "int", "aAYF#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "acNA&w{'Ox8T2@~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "clalsaase mu", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "n=0", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "S%=XW[UgpDNU)fH", "[n%\"CrQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "NoSuchMethodException occurred during 1.6 backcompat code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wn9SivXmj X4My:", "KK;\"=_NGyp0nT3O(V0");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny("S%=XW[UgpDNU)fH", stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("J", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "r~3^*`";
      stringArray0[2] = "r~3^*`";
      int int0 = StringUtils.indexOfAny("r~3^*`", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "java.util.prefs.PreferencesFactory";
      int int0 = StringUtils.lastIndexOfAny("\"a5q@B=w15a|stV6", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1920));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.substring("", 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.substring("org.apache.commons.lang3.CharUtils", 3, (-1));
      assertEquals(".apache.commons.lang3.CharUtil", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, (-68));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1449), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substring("*i'ulj0s.7h", 1732, 1732);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substring("igw&vreqd`npb", (-972), (-972));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.left("HP-UX", 2164);
      assertNotNull(string0);
      assertEquals("HP-UX", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 1709);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.left("L`YW,}S4", (-3494));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.left("l|l@t{dmGDKRdeCHt;1", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.right("r~3^*`", 1917);
      assertEquals("r~3^*`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.right((String) null, Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.right("NFD", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.right("ih,cuz<$v^qNbCMKom", 16);
      assertEquals("cuz<$v^qNbCMKom", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.mid("|fP9GEO", (-647), (-647));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.mid("", 2, 7);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.mid("Windows", (-1817), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.mid("''(Jc7J_/%VLx]", 0, 1256);
      assertEquals("''(Jc7J_/%VLx]", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringBefore("', has a length less than 2\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqbooleanyz{|}~", "', has a length less than 2\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqbooleanyz{|}~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringBefore("><*xzCE[$z.Q^][e6-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", (String) null);
      assertEquals("><*xzCE[$z.Q^][e6-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringBefore("r~3^*`", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" is less than 0: ", "0<a^14Qztakvrf]F");
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringAfter("p[-3/,{Ti/Q", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Cannot pad a negative amount: ", "^$zl");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("'; the SystemUtils property value will default to null.", "'; the SystemUtils property value will default to null.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(" ", "");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("className must not be null.", "B_|]pCkq@AegSI ");
      assertEquals("className must not be null.", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Minimum abbreviation width with offset is 7", "opWUI^U}-j)");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("<(:~U~w", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("J8L1l?O4f", "J");
      assertEquals("8L1l?O4f", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" vs ", " vs ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBetween("vs", "java.runtime.name", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBetween("tjLRD", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBetween("fK]9\"c", "", "6i7>J1?hU@y ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "X@HB!(@_7:slYz%wPv`");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqrstuboolean}~", "", "java.vm.info");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("`yAYHAB1%XsD#ge\"uI", "~%Ap!2XbgEN~iN1", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("bcdefgh", "bcdefgh99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "bcdefgh");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "B4kw-J", "U\"P Cd%z#&");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnobooleanwxyz{|}~", "Strings must not be null", "TimeToLive of ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.awt.graphicsenv", "java.awt.graphicsenv", "?");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "5.1");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("NoSuchFieldException occurred during 1.6 backcompat code", (String) null, 2);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("F", "F", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '_');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '}');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{dz\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", '{');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ClassNotFoundException occurred during 1.6 backcompat code", 'r');
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vOY&d`Hi]blCRr", 'r');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" {$FfGpMwG24oW", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'G~n F=MsJQVT4", "[", (-1309));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("K", "K", 1333);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", (-1));
      assertEquals(35, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code", 7);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("IllegalArgumentException occurred during 1.6 backcompat code", "IllegalArgumentException occurred during 1.6 backcompat code", 16);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("java.awt.fonts");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("XXg9B0hm~zOw$;!:");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '{', (-635868441), (-635868441));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0, '=');
      assertEquals("=======", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "F", 0, (-2837));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, "W By3z-7ySBu");
      assertEquals("W By3z-7ySBu", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "SecurityException occurred during 1.6 backcompat code");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'N');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Iterator<CharBuffer> iterator0 = serviceLoader0.iterator();
      String string0 = StringUtils.join(iterator0, ')');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "J";
      stringArray0[1] = "K5?/_`";
      stringArray0[2] = "J";
      int int0 = StringUtils.lastIndexOfAny("J", stringArray0);
      String string0 = StringUtils.reverseDelimited("java.vendor.url", 'H');
      assertEquals("java.vendor.url", string0);
      
      StringUtils.substring((String) null, 0);
      StringUtils.isWhitespace("java.vendor.url");
      StringUtils.substringBetween((String) null, "OM*C", "OM*C");
      StringUtils.replaceEach("Minimum abbreviation width with offset is 7", stringArray0, stringArray0);
      String string1 = StringUtils.overlay("%NEW>JV:?H~'_o[", "z_7R?$(58i7jJ", 0, 0);
      assertEquals("z_7R?$(58i7jJ%NEW>JV:?H~'_o[", string1);
      
      StringUtils.replaceEachRepeatedly("LINUX", stringArray0, stringArray0);
      StringUtils.split("T@TNV6:?dKl 6", 'H');
      String string2 = StringUtils.substring("Minimum abbreviation width with offset is 7", 0);
      assertEquals("Minimum abbreviation width with offset is 7", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "0)");
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.stripToEmpty("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      int int1 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertFalse(int1 == int0);
      
      StringUtils.length("0)");
      StringUtils.splitByCharacterType((String) null);
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string4 = StringUtils.join(iterator0, 'T');
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer((-1));
      priorityQueue0.offer(integer0);
      priorityQueue0.add(integer0);
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, '`');
      assertNotNull(string0);
      assertEquals("-1`-1", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string0 = StringUtils.join(iterator0, "hijklmn");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("0w']&$g7\"iDO8");
      vector0.add((String) null);
      String string0 = StringUtils.join((Iterable<?>) vector0, (String) null);
      assertTrue(vector0.contains(string0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add((String) null);
      vector0.add("0w']&$g7\"iDO8");
      String string0 = StringUtils.join((Iterable<?>) vector0, (String) null);
      assertEquals("0w']&$g7\"iDO8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("(P@5LDmY[F%n[ u^", 'O');
      assertEquals((-1), int0);
      
      StringUtils.lastIndexOf("", "");
      String string0 = StringUtils.substringAfter("(P@5LDmY[F%n[ u^", "");
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string1 = StringUtils.join(iterator0, "(P@5LDmY[F%n[ u^");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '*');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is 7");
      assertEquals("Minimumabbreviationwidthwithoffsetis7", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeStart("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeStart("C", "x7#n52nT#N!.tT5=#t");
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeStart(" ", "");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeStart("PPYK9MV_9Z$74xs", "PPYK9MV_9Z$74xs");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("4.1", (String) null);
      assertNotNull(string0);
      assertEquals("4.1", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("K", "K");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.repeat("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{dz\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", "4.1", 94);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeEnd("The character ", ">X-a4cGzF4!.`t(");
      assertEquals("The character ", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, "UWaP");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(">'s:W3b", (String) null);
      assertNotNull(string0);
      assertEquals(">'s:W3b", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("java.lang.Object@565371eb=java.lang.Object@23b43260=java.lang.Object@1ce4baa6=java.lang.Object@3c0be258=java.lang.Object@719a001b=java.lang.Object@73bf0b7a=java.lang.Object@4ab7ae21=java.lang.Object@294d8c0d", "java.lang.Object@565371eb=java.lang.Object@23b43260=java.lang.Object@1ce4baa6=java.lang.Object@3c0be258=java.lang.Object@719a001b=java.lang.Object@73bf0b7a=java.lang.Object@4ab7ae21=java.lang.Object@294d8c0d");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.remove("', has a length less than 2\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqbooleanyz{|}~", "tHAjR#6d(X1,w");
      assertEquals("', has a length less than 2\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqbooleanyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.remove("AdjE ", "");
      assertEquals("AdjE ", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'B');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.remove("#21gnS?]w5pDy~IloF", '<');
      assertEquals("#21gnS?]w5pDy~IloF", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.remove("The Array must not be null", 'T');
      assertEquals("he Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "The Array must not be null", 6077);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.replace("}^&~", (String) null, "', has a length less than 2\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqbooleanyz{|}~", (-1));
      assertNotNull(string0);
      assertEquals("}^&~", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "AIX", (String) null, 0);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "Z", "'G~n F=MsJQVT4", 0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("D'~;p>7:%rz(x", "D'~;p>7:%rz(x", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.remove("w(IxP$R5)<A", "w(IxP$R5)<A");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replace("4.1", "4.1", "<%3=!tD2=`N5fr4N8o", 1005);
      assertEquals("<%3=!tD2=`N5fr4N8o", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replaceEach("uG-~.?Y 8xO)", (String[]) null, (String[]) null);
      assertEquals("uG-~.?Y 8xO)", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("`yAYHAB1%XsD#ge\"uI", stringArray0, stringArray0);
      assertEquals("`yAYHAB1%XsD#ge\"uI", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.replaceEach("+}eX7u`(Gg[tJ91_U^", stringArray0, (String[]) null);
      assertEquals("+}eX7u`(Gg[tJ91_U^", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "";
      String string0 = StringUtils.replaceEachRepeatedly("stuvwxy", stringArray0, stringArray0);
      assertEquals("stuvwxy", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Minimum abbreviation width with offset is 7";
      stringArray0[3] = "D,J6 hEGQF3yM";
      String string0 = StringUtils.replaceEach("Minimum abbreviation width with offset is 7", stringArray0, stringArray0);
      assertEquals("Minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gm!u`w&o+3Lv>=npU;";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("gm!u`w&o+3Lv>=npU;", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: gm!u`w&o+3Lv>=npU;
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "J";
      stringArray0[2] = "J";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("J%NEW>JV:?H~'G[", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: J%NEW>JV:?H~'G[
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Minimumabbreviationwidthwithoffsetis7", 'k', 'k');
      assertEquals("Minimumabbreviationwidthwithoffsetis7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'm', 'C');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "HP-UX", "r`IIB-|%=)k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replaceChars("java.vm.info", "java.vm.info", "className must not be null.");
      assertEquals("clalsaase mu", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replaceChars(".apache.commons.lang3.CharUtil", "", "6.1");
      assertEquals(".apache.commons.lang3.CharUtil", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceChars("java.runtime.name", ".k>+8pctioIx", (String) null);
      assertEquals("javarunmename", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replaceChars("c%|7anffWzb;_<", "Irix", ":%{@GX6iZm:");
      assertEquals("c%|7anffWzb;_<", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "~", 57, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.overlay("fy*e]o", (String) null, 56, (-2684));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.overlay("1lhJcDcgg", "}=ktr", (-635868441), (-635868441));
      assertEquals("}=ktr1lhJcDcgg", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.overlay(", Length: ", "0)", 36, 30);
      assertEquals(", Length: 0)", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.chomp("@");
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.chomp("%NEW>JV:?H~'_o[");
      assertEquals("%NEW>JV:?H~'_o[", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.chomp("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.chomp("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "");
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.chomp("J", (String) null);
      assertNotNull(string0);
      assertEquals("J", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.chomp("$[c/BQY;36,V&Bh", "~KGi");
      assertEquals("$[c/BQY;36,V&Bh", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.repeat("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.repeat("#21gnS?]w5pDy~IloF", 1);
      assertEquals("#21gnS?]w5pDy~IloF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1023);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.repeat("~", 1380);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.repeat("Xp", 1380);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "<&8.cGV:c ~yIbRQ}F", 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.repeat("____________________________________________________________________________", (String) null, 3582);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-4898), '_');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 1454, "awt.toolkit");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1), "ZX$X<Jg?kQY:B");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.rightPad("$oxj>;&BYS", 9981, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.rightPad("Array element ", 16, "lf");
      assertEquals("Array element lf", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.center("dL;,k*M?gD@flS1`ix", 32, "dL;,k*M?gD@flS1`ix");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-1), '\'');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.leftPad("wn9SivXmj X4My:", 1206, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-3494), "4#6A4i;H4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.leftPad("im7VV{578~4\"", (-1), ">'aD%");
      assertEquals("im7VV{578~4\"", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 1707, 'l');
      String string1 = StringUtils.leftPad("", 1707, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 65, "$FH{xm*");
      assertEquals("$FH{xm*$FH{xm*$FH{xm*$FH{xm*$FH{xm*$FH{xm*$FH{xm*$FH{xm*$FH{xm*$~", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 3542);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.center("}=ktr", 6, 'u');
      assertEquals("}=ktru", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center("java.vm.specif*i'ulj0s.7he", 6, 'u');
      assertEquals("java.vm.specif*i'ulj0s.7he", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1247), "C");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.center("vFw%/rntm8zrHr)h", 0, "java.text.Normalizer");
      assertEquals("vFw%/rntm8zrHr)h", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.center("fY!rK?vOjR~N3", 4069, "");
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center("Cannot pad a negative amount: ", 1, "p{InCombiningDiacriticalMarks}+");
      assertEquals("Cannot pad a negative amount: ", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.stripEnd(">X-a4cGzF4!.`t(", "F");
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertEquals(">X-A4CGZF4!.`T(", string1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.upperCase("/<\"^JFM93!3", locale0);
      assertEquals("/<\"^JFM93!3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.lowerCase("O");
      assertNotNull(string0);
      assertEquals("o", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = StringUtils.lowerCase("C", locale0);
      assertEquals("c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.capitalize("Minimumabbreviationwidthwithoffsetis7");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthwithoffsetis7", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("wn9SivXmj X4My:");
      assertEquals("wn9SivXmj X4My:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.swapCase("$FH{xm*");
      assertEquals("$fh{XM*", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = StringUtils.countMatches("%MG{tqSjXo%l%s/mi", "%MG{tqSjXo%l%s/mi");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = StringUtils.countMatches("01", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, "java.awt.printerjob");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("HP}sI,D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("SecurityException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("%NEW>JV:?H~'_o[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Q.&hr;C1g}14");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.isNumeric(stringArray0[6]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0<a^14Qztakvrf]F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, stringArray0);
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("5)p,C-p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("                                 Minimum abbreviation width is 4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("int");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("wn9SivXmj X4My:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.defaultString("1>7'V56h8c{7b|g}");
      assertEquals("1>7'V56h8c{7b|g}", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.defaultString("X@HB!(@_7:slYz%wPv`", "Jr\")`2Dm^+ei{6$h");
      assertEquals("X@HB!(@_7:slYz%wPv`", string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "user.name");
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertFalse(charBuffer1.hasArray());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.reverse("opWUI^U}-j)");
      assertNotNull(string0);
      assertEquals(")j-}U^IUWpo", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 't');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 32);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Z`RUi':y9T>ec{.yiGN", 478, 16);
      assertEquals("...:y9T>ec{.yiGN", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqrstboolean|}~", 9, 9);
      assertEquals("...\t\n\u000B...", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 64, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", 47);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("(C NAR", "(C NAR", (-635868441));
      assertEquals("(C NAR", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("(L1X", "", (-1733));
      assertEquals("(L1X", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("D,J6 hEGQF3yM", "Minimum abbreviation width with offset is 7", 76);
      assertEquals("D,J6 hEGQF3yM", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("', has a length less than 2", "?VVP8Zu", 10);
      assertEquals("',?VVP8Zu2", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.difference("java.runtime.name", "UIi$@QuNZXUpOx{");
      assertEquals("UIi$@QuNZXUpOx{", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "~f");
      assertNotNull(string0);
      assertEquals("~f", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.difference("<|8c\"ks]gR){wY!I( ", (String) null);
      assertEquals("<|8c\"ks]gR){wY!I( ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.difference("java.vm.vendor", "java.vm.vendor");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "\"O$E38 ~#X7", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wn9SivXmj X4My:", "KK;\"=_NGyp0nT3O(V0");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "0)");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#21gnS?]w5pDy~Ilo";
      stringArray0[1] = "#21gnS?]w5pDy~Ilo";
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}=ktr1lhJcDcgg";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H/s^'pho`ln>$!";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("H/s^'pho`ln>$!", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.repeat("+`_Dsr]X<6i|>A,", 3338);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = "+`_Dsr]X<6i|>A,";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("+`_Dsr]X<6i|>A,", string1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "(Qhp");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(string0, ".k>+8pctioIx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("Minimum abbreviation width is 4", "Minimum abbreviation width is 4");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("6vWC,", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("[R`tlbfLw0s9?,0O", "");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("IM7VV{578~4", "int");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "normalize");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("0<a^14Qztakvrf]F", "YCh&YCh&YCh&YCh&YCh&YCh&YCh&YCh&YCh&YCh& is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.trimToNull("=z");
      assertEquals("=z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "Z";
      boolean boolean0 = StringUtils.startsWithAny("Z", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "long");
      assertFalse(boolean0);
  }
}
