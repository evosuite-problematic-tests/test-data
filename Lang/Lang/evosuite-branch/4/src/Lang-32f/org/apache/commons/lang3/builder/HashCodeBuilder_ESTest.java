/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 12:49:48 GMT 2019
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1531), (-1531));
      byte[] byteArray0 = new byte[3];
      hashCodeBuilder0.append(byteArray0);
      assertEquals(889997937, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.appendSuper((byte) (-107));
      assertEquals(522, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(17, 17);
      hashCodeBuilder0.hashCode();
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((int) (byte)5, (int) (byte)5, (Object) "@%fU^7w-B,1");
      assertEquals(653098553, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[9];
      hashCodeBuilder0.append(floatArray0);
      assertEquals(1219584725, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[1];
      hashCodeBuilder0.append(shortArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, false);
      assertEquals(23464, int0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(745, (-1558), (Object) "||yAQByJAQ=E", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNotNull(set0);
      
      Class<Object> class0 = Object.class;
      int int0 = HashCodeBuilder.reflectionHashCode(23533, 17, (Object) set0, false, (Class<? super Object>) class0);
      assertEquals(23533, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      IDKey iDKey0 = new IDKey(object0);
      Class<IDKey> class0 = IDKey.class;
      int int0 = HashCodeBuilder.reflectionHashCode(935, 935, iDKey0, true, (Class<? super IDKey>) class0);
      assertEquals(817405051, int0);
      
      Object object1 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("J-$v4An");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(linkedHashSet0);
      int int1 = HashCodeBuilder.reflectionHashCode(object1, (Collection<String>) linkedHashSet1);
      assertEquals(17, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) hashCodeBuilder0;
      objectArray0[2] = (Object) hashCodeBuilder0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)2);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((long) (byte)2);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((int) (byte)2);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(1.0F);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      HashCodeBuilder.register("");
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      int[] intArray0 = new int[1];
      intArray0[0] = 144;
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(intArray0);
      hashCodeBuilder6.append((byte)2);
      longArray0[5] = (long) (byte)2;
      hashCodeBuilder5.append(longArray0);
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "");
      Integer integer0 = new Integer(1332);
      HashCodeBuilder.unregister(integer0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero initial value
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IDKey iDKey0 = new IDKey("");
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(1686, 1686, (Object) iDKey0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(1, 0, (Object) set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires a non zero multiplier
         //
         verifyException("org.apache.commons.lang3.builder.HashCodeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[3] = true;
      hashCodeBuilder0.append(booleanArray0);
      assertEquals(1571153899, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((char[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[4];
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(31860737, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((double[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), 617);
      hashCodeBuilder0.append((int[]) null);
      assertEquals((-617), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((long[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        hashCodeBuilder0.append(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }
}
