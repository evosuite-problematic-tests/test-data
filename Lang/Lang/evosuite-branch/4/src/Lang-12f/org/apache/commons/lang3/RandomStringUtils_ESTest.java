/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 12:07:37 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.apache.commons.lang3.RandomStringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomStringUtils_ESTest extends RandomStringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = RandomStringUtils.randomAscii(1);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.randomAlphanumeric((-400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -400 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomNumeric(56192);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomStringUtils randomStringUtils0 = new RandomStringUtils();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = RandomStringUtils.random(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        RandomStringUtils.random(3483, charArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chars array must not be empty
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      MockRandom mockRandom0 = new MockRandom(1642);
      // Undeclared exception!
      RandomStringUtils.random(1642, 0, 0, true, true, charArray0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      RandomStringUtils.randomAlphabetic(4285);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      // Undeclared exception!
      RandomStringUtils.random(56191, 0, (-1323), true, false, charArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(1507, 0, 0, true, true, charArray0, (Random) mockRandom0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      String string0 = RandomStringUtils.random(295, (-983), 1, true, true, (char[]) null, (Random) mockRandom0);
      assertEquals("\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29\uFC29", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      RandomStringUtils.random(1803, 56329, 2, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      // Undeclared exception!
      RandomStringUtils.random(9, 56191, 46222, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      mockRandom0.nextInt();
      // Undeclared exception!
      RandomStringUtils.random(56320, 56191, 46222, false, false, (char[]) null, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, "Requested random string length ");
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomStringUtils.random((-2262), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2262 is less than 0.
         //
         verifyException("org.apache.commons.lang3.RandomStringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RandomStringUtils.random(1, (char[]) null);
      assertEquals("\u0000", string0);
  }
}
