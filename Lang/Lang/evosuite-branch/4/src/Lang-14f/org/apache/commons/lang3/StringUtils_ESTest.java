/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 12:12:18 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "%#qW\"Wh{f?,u/^}7 G");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, (String) null, 48);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("*gz+:7g#V@J 3QJb~a                                                                              ");
      assertEquals(80, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("decompose", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ]iwJUHf>NqI<wlS,b", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.center("ZXAw7ra>Jnhf:Jf", 0);
      assertEquals("ZXAw7ra>Jnhf:Jf", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("l1@Cy:.");
      String string0 = StringUtils.join((Object[]) stringArray0, "!1{Sa|.tYP Gu", 0, 0);
      assertEquals("", string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", Integer.MAX_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("*gz+:7g#V@J 3QJb~a", "*gz+:7g#V@J 3QJb~a", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("f86v-C/2:c@\"&=", "", "/c>t\"K0?h=sre");
      assertEquals("f86v-C/2:c@\"&=", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.leftPad("1%3QRch", 4107);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.chomp("a", ", Length: 0");
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '`');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank(":n0BAAI}C");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" gI`fpO+wq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.trimToNull("sFHUham21ir");
      assertNotNull(string0);
      assertEquals("sFHUham21ir", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":n0BAAI}C");
      assertEquals(":n0BAAI}C", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.stripToNull("7");
      assertNotNull(string0);
      assertEquals("7", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(":n0BAAI}C");
      assertEquals(":n0BAAI}C", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "NFD");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "#DPV");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Threshold must not be negative");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width is 4");
      assertEquals(10, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.strip(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.strip("MPl~geLV4]", "");
      assertEquals("MPl~geLV4]", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripEnd(")Q7cQ:AiCVD]p%azN", ")Q7cQ:AiCVD]p%azN");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "V}xi");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "sun.text.Normalizer is not available", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) ";O8;I;q,XF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "@.9mn19=gf])fg%ysa\"");
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "@.9mn19=gf])fg%ysa\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase(",]\"n&2B>,LF'e9Nj", "normalize");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "f", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) ", Length: ", 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 1191, 1191);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "*qd5bT9~M#S-", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "{\u0005?8{5Ji:OY", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.stripAccents("%{");
      assertEquals("%{", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) string0, 579);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is 7", (CharSequence) "...........................Minimum abbreviation width with offset is 7...........................", 97);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "The Character must not be null", (CharSequence) null, (-3314));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "4c=zfxR.INZqdF", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", (CharSequence) null, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("7N+W'f88_UmMp~]java.lang.Object@1e08bfd9", "7N+W'f88_UmMp~]", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("*gz+:7g#V@J 3QJb~a", "", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("The character ", "The character ", 1257);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) stringArray0[2]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, (-2001));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "=?>P@&nWj", (CharSequence) "java.text.Normalizer is not available", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "f86v-C/2:c@\"&=", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "sFHUham2Eir", (CharSequence) "sFHUham2Eir");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The Array must not be null", (CharSequence) "*");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", (-739));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-2301));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("sFHUham2Eir", "The Character must not be null", 287);
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 203, 65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 13, 745);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.lastIndexOf((CharSequence) null, charSequenceArray0[1]);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "aV}_jI+I-_2QjU4", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-220));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) ",", (CharSequence) "normalize", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "GK5NVq8912b+5w^Q~", (CharSequence) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "%{", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "C*?[ZDm", (CharSequence) null, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "hRtL^U.u?7>U\"", (CharSequence) "$z-?pNc^DSD2QvvzS", 4096);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "0_TM:>mV`+8tM", (CharSequence) "X");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", Length: ", (CharSequence) ", Length: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "RW1z~`e?O\"!PN", 10);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-961));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "C*?[ZDm", 68);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "$z-?pNc^DSD2QvvzS", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "java.text.Normalizer$Form");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "normalize", (CharSequence) "normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.defaultString("", (String) null);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("normalize", "normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("The Array must not be null", "*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Array and element cannot both be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny((CharSequence) "@KZm^5(lr@nR", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot store ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      int int0 = StringUtils.indexOfAny((CharSequence) "@KZm^5(lr@nR", charArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "S:KX2[!stm4", charArray0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      int int0 = StringUtils.indexOfAny((CharSequence) "u+_ CG]g;H;", charArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "e!");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "The stripAccents(CharSequence) method requires at least Java6, but got: ", "The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "AvJM<E?Siui=6'!uN", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "c+,i", (CharSequence) "UTBz.\"H_V'<eWp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) ", LENGTH: 0", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "; or a Sun JVM: ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "*qd5bT9~M#S-", "*qd5bT9~M#S-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = 'D';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "DyV9/DOnT&LmY", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "?`n9+GT", (CharSequence) "?`n9+Kt]3ppudpfwJ");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "t)d/Ve,P5##%ayeU", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Kt]3ppudpfwJ", (CharSequence) "?`n9+Kt]3ppudpfwJ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) stringBuffer0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "~6fU", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "sun.text.Normalizer is not available", "Z{q)4e}`W*oV>B;{=$W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "", (-739));
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "yT9Lj%slt\"", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\"TB&EcrZsq\"83j2a8", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "FCv<dbtT5c23nt!#!r", "FCv<dbtT5c23nt!#!r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "1E}u8h([5([I", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^^GAL)";
      int int0 = StringUtils.indexOfAny((CharSequence) "^^", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("tHE CHARACTER ", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[0] = (CharSequence) ":n0BAAI}C";
      charSequenceArray0[1] = (CharSequence) ":n0BAAI}C";
      int int0 = StringUtils.lastIndexOfAny(":n0BAAI}C", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.substring("L-", 203);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1436);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.substring("&zk!%o0ZbWZh/V=3+A", (-1));
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1876));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substring("qE)=H<ujy", (-591), 752);
      assertNotNull(string0);
      assertEquals("qE)=H<ujy", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 127, (-1444));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substring("", (-982), (-982));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substring("", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: ", 1230, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.left("", (-12));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.left("IllegalArgumentException occurred", 7);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.left("", 5168);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.right(" ", 24);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.right("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.right("vs", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 1516, 1516);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.mid("", 0, (-861));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.mid("/cYha0#{k/<IDL9L", 2779, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.mid("", (-450), 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.defaultString("\"TB&EcrZsq\"83j2a8", "\"TB&EcrZsq\"83j2a8");
      assertEquals("\"TB&EcrZsq\"83j2a8", string0);
      
      String string1 = StringUtils.mid(string0, 0, 0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "The Character must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBefore("The character must not be null", "The character must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringBefore("IllegalArgumentException occurred", (String) null);
      assertEquals("IllegalArgumentException occurred", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBefore("@nl'vp", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBefore("KCI8T}u~qCn8", " in an array of ");
      assertEquals("KCI8T}u~qCn8", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Threshold must not be negative", "*qd5bT9~M#S-");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" in an array of ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringAfter("l1@Cy:.", "");
      assertEquals("l1@Cy:.", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("};SvA", "};SvA");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("#DPV", "");
      assertEquals("#DPV", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("...", "IllegalArgumentException occurred");
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("normalize", "nHC14Zd?@>v/+i");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "nHC14Zd?@>v/+i");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("]#Y-", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("eDusVt*bb", "eDusVt*bb");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(".Y^X,O'P", "X");
      assertEquals(",O'P", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "4i-IB-jyFUWJ5", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringBetween("'yJowHKtrtZA1e", ">c;I(H6z;or", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Threshold must not be negative", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Array and element cannot both be null", "Array and element cannot both be null");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "NFD", "NFD");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("                                              PPPPPPPP w86_^Nh29", "yT9Lj%slt\"", "                                              PPPPPPPP w86_^Nh29");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("IllegalArgumentException occurred", (String) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("ud=KPyL", "4nx3$m&SB;I5r[<W!3", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "($F", "                                                                                                                                                                                                                                                                                                                                                                                   qE)=H<ujy                                                                                                                                                                                                                                                                                                                                                                                    ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.text.Normalizer", "java.text.Normalizer$Form", ";l");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("sun.text.Normalizer", "sun.text.Normalizer", "A,d1#i");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "g7JX6OQhnl%1v2";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(stringArray0[2], (String) null, 48);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Array and element cannot both be null", "Array and element cannot both be null", (-1444));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("*gz+:7g#V@J 3QJb~a", "7", 4096);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("@6GM=C", "@6GM=C", 0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'g');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("IllegalArgumentException occurred", 'c');
      assertEquals("urredception ocIllegalArgumentEx", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "T:");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("4", "4");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("D[x]F9 ", "O", 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("8", "8");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("l$mBBIM|#E", "l$mBBIM|#E", 0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("GJ{DigDXsmH}", "gBv/.2");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("sun.text.Normalizer is not available", "sun.text.Normalizer is not available");
      assertEquals(37, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("WnM}l0vDYfrf7Q");
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '|');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ',', 273, (-3717));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0, '&');
      assertEquals("&&&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "N", 1697, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 'c';
      String string0 = StringUtils.join(objectArray0, "", 1, 2);
      assertEquals("c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add("");
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      String string0 = StringUtils.join(iterator0, '/');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = new Object();
      arrayDeque0.add("");
      arrayDeque0.add(object0);
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      String string0 = StringUtils.join(iterator0, '/');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      String string0 = StringUtils.join(iterator0, "PPPPPPPP w86_^Nh29");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "T)l&dyhu_{%`XdsPD");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "GhUscX2*c");
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "=uRGG.!B{1~FJ^;(");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "GhUscX2*c");
      arrayList0.add((Object) "");
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "=uRGG.!B{1~FJ^;(");
      assertNotNull(string0);
      assertEquals("GhUscX2*c=uRGG.!B{1~FJ^;(", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stack0.add(locale_Category0);
      stack0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = stack0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("FORMATFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      String string0 = StringUtils.join((Iterable<?>) hashSet0, 'k');
      assertFalse(hashSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '|');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("GK5NVq8912b+5w^Q~");
      assertEquals("GK5NVq8912b+5w^Q~", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Index: ");
      assertEquals("Index:", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, "Index: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeStart("Y&lq", "java.text.Normalizer$Form");
      assertEquals("Y&lq", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.removeStart("B><RY;YBJ", (String) null);
      assertNotNull(string0);
      assertEquals("B><RY;YBJ", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeStart("p)W", "p)W");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("w", "Minimum abbreviation width is 4");
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Y6Qn%cM+6'6\"M", "");
      assertEquals("Y6Qn%cM+6'6\"M", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("IllegalArgumentException occurred", "IllegalArgumentException occurred");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", "MhJ@`5zOZj2", 7);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsMhJ@`5zOZj2org.apache.commons.lang3.StringUtilsMhJ@`5zOZj2org.apache.commons.lang3.StringUtilsMhJ@`5zOZj2org.apache.commons.lang3.StringUtilsMhJ@`5zOZj2org.apache.commons.lang3.StringUtilsMhJ@`5zOZj2org.apache.commons.lang3.StringUtilsMhJ@`5zOZj2org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("!1{Sa|.tYP Gu", "l1@Cy:.");
      assertEquals("!1{Sa|.tYP Gu", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("IllegalArgumentException occurred", "");
      assertEquals("IllegalArgumentException occurred", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("sun.text.Normalizer", "sun.text.Normalizer");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.remove("aM", "GhUscX2*c");
      assertEquals("aM", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.remove("nhM{Jf^R*s33/|st_N", (String) null);
      assertNotNull(string0);
      assertEquals("nhM{Jf^R*s33/|st_N", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.remove("", 'p');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.remove(",]\"n&2B>,LF'e9Nj", '@');
      assertEquals(",]\"n&2B>,LF'e9Nj", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.remove("&zk!%o0ZbWZh/V=3+A", '0');
      assertEquals("&zk!%oZbWZh/V=3+A", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replace("m:", "Yf%ZuVfL]~", (String) null, 1);
      assertEquals("m:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replace("The stripAccents(CharSequence) method requires at least Java6, but got: ", "The stripAccents(CharSequence) method requires at least Java6, but got: ", "The stripAccents(CharSequence) method requires at least Java6, but got: ", 0);
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got: ", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.remove("99n PE'1DqCa6l$Y", "n PE'1DqCa6l$Y");
      assertEquals("99", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replace("The Array must not be null", "The Array must not be null", "*", 1311);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("M", "M", "M");
      assertEquals("M", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replaceEach(", Length: 0", (String[]) null, (String[]) null);
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "n;qH2C^uP$!+%PM&");
      String[] stringArray1 = StringUtils.split("");
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray1);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("Array and element cannot both be null", stringArray0, (String[]) null);
      assertEquals("Array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("z##[", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "c7-%DoD~9Y+";
      String string0 = StringUtils.replaceEachRepeatedly("Minimum abbreviation width is 4", stringArray0, stringArray0);
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a";
      stringArray0[3] = "c7-%DoD~9Y+";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Minimum abbreviation width is 4", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "t*rV[Nw%=B";
      String string0 = StringUtils.replaceEach("t*rV[Nw%=B", stringArray0, stringArray0);
      assertEquals("t*rV[Nw%=B", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      // Undeclared exception!
      StringUtils.replaceEachRepeatedly("Minimum abbreviation width is 4", stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The Array must not be null", 's', 's');
      assertEquals("The Array must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '1', '1');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "java.text.Normalizer is not available", "java.text.Normalizer is not available");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.replaceChars("4", "4", "4");
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Threshold must not be negative", "", (String) null);
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.replaceChars("^!G^[&|ZR;o;fI3*", "Search and Replace array lengths don't match: ", (String) null);
      assertEquals("^!G^[&|Z;;fI3*", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.replaceChars("java.text.Normalizer is not available", "<", "3ps.8&V@p($Y,JV");
      assertEquals("java.text.Normalizer is not available", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.overlay("0_TM:>mV`+8tM", "org.apache.commons.lang3.StringUtils$InitStripAccents", 32, (-1411));
      assertEquals("org.apache.commons.lang3.StringUtils$InitStripAccents", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "w", (-2751), 878);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.overlay("", (String) null, (-3193), (-21));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.overlay(", Length: 0", "iaA]aZHFuD8G*k3q&,", 0, 0);
      assertEquals("iaA]aZHFuD8G*k3q&,, Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.overlay("spTU:n", " ", 256, 256);
      assertEquals("spTU:n ", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.chomp("m:");
      assertEquals("m:", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.chop("0v");
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.repeat("\"TB&EcrZsq\"83j2a8", "", (-12));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.repeat("Array element ", 1);
      assertNotNull(string0);
      assertEquals("Array element ", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.repeat("", 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.repeat("7", 8216);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.repeat("7", 8192);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.repeat("W[", "", 1062);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "LJ<AU@n!r9T", 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.repeat("d]N_B[f", (String) null, 2);
      assertNotNull(string0);
      assertEquals("d]N_B[fd]N_B[f", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.rightPad("*gz+:7g#V@J 3QJb~a", 0);
      assertEquals("*gz+:7g#V@J 3QJb~a", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.rightPad("NFD", 8220, '{');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.rightPad("#4:4b9<", (-990), (String) null);
      assertNotNull(string0);
      assertEquals("#4:4b9<", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center("", 1, "4XD+uxVM[-L^OAg6`w=");
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.rightPad(":pL+,bm/y_cw{*", 696, (String) null);
      assertEquals(":pL+,bm/y_cw{string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.rightPad("Array and element cannot both be nul", 64, "The String must not be empty");
      assertEquals("Array and element cannot both be nulThe String must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 29, ':');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.leftPad("*gz+:7g#V@J 3QJb~a", (-1), '`');
      assertEquals("*gz+:7g#V@J 3QJb~a", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 632, "yi(4/z");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.leftPad("Array element ", 27, "");
      assertEquals("             Array element ", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.center("Minimum abbreviation width with offset is 7", 97, "...");
      assertEquals("...........................Minimum abbreviation width with offset is 7...........................", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.leftPad("L", 16, "DsTx+CKvOAe(}1");
      assertEquals("DsTx+CKvOAe(}1DL", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.leftPad("Kt]3ppudpfwJ", 17, "?`n9+GT");
      assertEquals("?`n9+Kt]3ppudpfwJ", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      int int0 = StringUtils.length("'Oe");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1), ',');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.center("Z[VgR@(-J", 1052, '^');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.center("f86v-C/2:c@\"&=", 1);
      assertEquals("f86v-C/2:c@\"&=", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 603, "8fYxeA");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.center("", 0, "4XD+uxVM[-L^OAg6`w=");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.center("The Array must not be null", 752, "");
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                           The Array must not be null                                                                                                                                                                                                                                                                                                                                                                           ", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.center("Kt]3ppudpfwJ", 5, "na9L!qs6u7");
      assertEquals("Kt]3ppudpfwJ", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.upperCase("xuH");
      assertEquals("XUH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.upperCase(",]\"n&2B>,LF'e9Nj", locale0);
      assertEquals(",]\"N&2B>,LF'E9NJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.defaultString("Array and element cannot both be null");
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertEquals("array and element cannot both be null", string1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.capitalize("($F");
      assertEquals("($F", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("t*rV[Nw%=B");
      assertEquals("t*rV[Nw%=B", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.swapCase("v9@k");
      assertEquals("V9@K", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.swapCase(",]\"N&2B>,LF'E9NJ");
      assertEquals(",]\"n&2b>,lf'e9nj", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, "T:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int int0 = StringUtils.countMatches("*gz+:7g#V@J 3QJb~a", "*gz+:7g#V@J 3QJb~a");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      int int0 = StringUtils.countMatches("]#Y-", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, "The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("AvJM<E?Siui=6'!uN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("RW1z~`e?O\"!PN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Strings must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "\\u0";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("vs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("IllegalArgumentException occurred");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("T<}&]hYVwVx?!~m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("...........................Minimum abbreviation width with offset is 7...........................");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "7";
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("                                              PPPPPPPP w86_^Nh29");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("0eJ:G8r1YA6|Z!XI(y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("v9@k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("ne");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("V9@K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "Cannot store ");
      assertNotNull(string0);
      assertEquals("Cannot store ", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("*qd5bT9~M#S-", "");
      assertEquals("*qd5bT9~M#S-", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("Index: ", "Index: ");
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.reverse("B=%wN[Vr*t");
      assertNotNull(string0);
      assertEquals("t*rV[Nw%=B", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'r');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-1), 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.abbreviate("The character must not be null", (-737), 1522);
      assertEquals("The character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("L@X$\"to A9,", 4096, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.abbreviate("}[mS-T|EOoV?w[nEw", 7, 7);
      assertEquals("...|...", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.rightPad("7{iK^Iq?(D2b", (-1), 'S');
      String string1 = StringUtils.abbreviate(string0, 2284, 9);
      assertEquals("...q?(D2b", string1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", ", Length: 0", 3143);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("gl?", "", 1522);
      assertEquals("gl?", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("IllegalArgumentException occurred", "The character ", 13);
      assertEquals("IllegalArgumentException occurred", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("p{InCombiningDiacriticalMarks}+", ", Length: 0", 16);
      assertEquals("p{I, Length: 0}+", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.difference("UTBz.\"H_V'<eWp", "?Dw");
      assertEquals("?Dw", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "/S3&,rd:-0*D?");
      assertEquals("/S3&,rd:-0*D?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.ArrayUtils", (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "xQ@\"+(u7OUD5.ggO%b");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "4TOU1JMJ", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "*gz+:7g#V@J 3QJb~a", (CharSequence) "*gz+:7g#V@J 3QJb~a");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.difference("6WYn{|lDmPMg @)h", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":n0BAAI}C");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'Oe";
      stringArray0[1] = "'Oe";
      stringArray0[2] = "'Oe";
      stringArray0[3] = "'Oe";
      stringArray0[4] = "'Oe";
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Strings must not be nullStrings";
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^^GAL)";
      stringArray0[1] = "^^GAL)";
      stringArray0[2] = "^^gal)";
      stringArray0[3] = "^^GAL)";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("^^", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "4i-IB-jyFUWJ5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "");
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[4] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[4], charSequenceArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m3m", (CharSequence) "3m");
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "@KZm^5(lr@nR", (CharSequence) "Hj", 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "The Character must not be null", (CharSequence) null, 256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "normalizerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", (CharSequence) "normalize", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "l-", 445);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "L<#p?\"2l<CQ.", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "", 24);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "gY#V1j oJN", (CharSequence) "", 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "*qd5bT9~M#S-", (CharSequence) "*qd5bT9~M#S-", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#4:4b9<", (CharSequence) "Strings must not be null", 20);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      boolean boolean0 = StringUtils.startsWithAny("IllegalArgumentException occurred", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.startsWithAny("InvocationTargetException occurred", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("InvocationTargetException occurred", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "", "XN[");
      boolean boolean0 = StringUtils.endsWith(string0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("", "*qd5bT9~M#S-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("GhUscX2*c");
      assertEquals("GhUscX2*c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.endsWithAny("java.text.Normalizer", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithAny("k@cot4motcu@", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) "Eea#H>wXE=xBd|Dw";
      boolean boolean0 = StringUtils.endsWithAny("Eea#H>wXE=xBd|Dw", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }
}
