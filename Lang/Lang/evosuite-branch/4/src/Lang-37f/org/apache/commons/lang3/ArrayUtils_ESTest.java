/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 06 12:59:57 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1711);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.add(charArray0, '^');
      assertArrayEquals(new char[] {'\u0000', '^'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (int) 'g', (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 103, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)47);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.add(intArray0, 2401);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 2401}, intArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-1601L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[3];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, (Object) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1497, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1497, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)52);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)52}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 124.0F);
      assertArrayEquals(new float[] {124.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2094.76, 1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-550L));
      assertArrayEquals(new long[] {(-550L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-4026.63F));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4834.68668);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      String string0 = ArrayUtils.toString((Object) arrayUtils0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'g');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 1795, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1795, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[8];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-3091));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (short)86);
      assertArrayEquals(new short[] {(short)86}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-65), (byte) (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -65, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (-586));
      assertArrayEquals(new double[] {(-586.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[0]);
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, (-1719));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1719, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte)64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[5];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 895, (short) (-3268));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 895, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(integer0, integer0);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'l';
      longArray0[1] = 409L;
      longArray0[2] = (long) 'l';
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 'l';
      longArray0[5] = (long) 'l';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)86);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)122);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 3210.5F);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, 395.27356F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.subarray((String[]) null, (-2143768277), (-2143768277));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-5333), (-233));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, 0, 3504);
      assertEquals(3, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 2, 2);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1769), (-1769));
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 694, 694);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1016), (int) (short)1);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1549, (int) (short)29129);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 570, (int) (byte) (-48));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-765), 2);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-2808), (-2808));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-529), 3);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3654, 5);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 868, (-6162));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1170, 64);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-462), 2);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-93), (int) (byte)17);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 2, 2);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 570, (-1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 6, 6);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 64, 1966);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-510), (-1));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2146737930), 2145642343);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (byte)5, (int) (byte)2);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-1), 3668);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-2143768277));
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1951, (-109));
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 868, 868);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2629), (int) (short)48);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) byteArray1);
      assertEquals(5, byteArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray0, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[16];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1488, (int) (short)150);
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = new float[7];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray2, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer((-1712));
      boolean boolean0 = ArrayUtils.isSameType(integer0, ")Riz1v]&(ctdFj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(2723.2F);
      floatArray0[0] = float0;
      floatArray0[3] = floatArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(floatArray0[3], (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[9];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1951;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-109));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-2254.4);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[9];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, object0, 2520);
      assertEquals(9, integerArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer(70);
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, (-2145400672));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "\"9(:)q4aJrN8^^\r", (-1962));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-2210.252522617);
      objectArray0[1] = (Object) (-2210.252522617);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Object object0 = new Object();
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, object0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (short)1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], 341);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[9];
      int int0 = ArrayUtils.indexOf(longArray0, 17L, (-602));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-102L), (-495));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-102L), (-1374));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[6];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 2, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[6] = (-458L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-458L));
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = (long) (short) (-2111);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (short) (-2111));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, 1188);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, 0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 132, (-1302));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2146854209), (-2048));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1951;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1951, 1951);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = (-284);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-284));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (-25));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)4700);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1121), (int) (short) (-1121));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-883), 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[3] = (short)64;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)64);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '*');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = ArrayUtils.indexOf(charArray0, 'C', (-2086));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'm';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'm');
      assertArrayEquals(new char[] {'\u0000', 'm', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'W', 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'h', (-1397));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 't', 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '@';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '@');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[1] = 'L';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'L');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-25), (int) (byte) (-25));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)6, 1079);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-115), (int) (byte) (-115));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)64, (int) (byte)4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1L), (-2092));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 688.831, (-4184), 1839.1276492962786);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3004.2561777971905), (-3004.2561777971905));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)4700, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (-1769));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2831.2947), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 64);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 974.72091073, (-2288), (-600.7828537319774));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short)0, 1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-2970.047108546498));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4718.485553843285), 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-3656.086380233249));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (-1869.349702972);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1869.349702972), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.indexOf(floatArray0, 70.4186F, (-811));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1800.2F, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 2202);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 534.6268F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1397));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1042));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('x');
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '8');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '#');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('\"');
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\"');
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      longArray0[0] = (Long) 56L;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {56L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(1L);
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1694L));
      assertArrayEquals(new long[] {1L, (-1694L), (-1694L), (-1694L), (-1694L), (-1694L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-115);
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-115)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4700);
      integerArray0[0] = integer0;
      integerArray0[2] = integerArray0[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {4700, 4700, 4700, 4700}, intArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 500);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2145642343);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = (Short) (short)353;
      shortArray0[1] = (Short) (short)1041;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)353, (short)1041}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-883));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)86);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)0);
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)2);
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byteArray0[1];
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)29);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)21);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1880.293595326);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1L));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1531.034142264));
      assertArrayEquals(new double[] {(-1.0), (-1531.034142264)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-2477.4422));
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2477.4421F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(0.0);
      floatArray0[0] = float0;
      floatArray0[6] = floatArray0[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[6]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf("java.lang.Integer");
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = booleanArray0[1];
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean(false);
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int[] intArray0 = new int[8];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      short[] shortArray0 = new short[7];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Long[] longArray0 = new Long[1];
      longArray0[0] = (Long) 56L;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) characterArray0, (Object[]) longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Long in an array of java.lang.Character
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(16, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(16, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(10, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((byte)38);
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) null);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Integer integer0 = new Integer((byte)51);
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (int) 0, (Object) integer0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(4700);
      integerArray0[0] = integer0;
      integerArray0[3] = integerArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (int) integerArray0[3], integerArray0[3]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4700, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (int) 101, (Object) null);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, (int) (short)0, 'T');
      assertArrayEquals(new char[] {'T'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }
}
