/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 18:40:39 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("xk_e[M?l SMhor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xk_e[M?l SMhor
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("NL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: NL
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("~X@Xd\"DST");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~X@Xd\"DST
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("f/[T5wi[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: f/[T5wi[
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("t{GyYRM3y:h$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: t{GyYRM3y:h$
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("xk_)[M?l Sfhor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xk_)[M?l Sfhor
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("xk_CS");
      assertEquals("xk_CS", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("xk_G0k-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xk_G0k-
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("xk_G[M?l SMhoq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xk_G[M?l SMhoq
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("xk_GY[M?l SMhoq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: xk_GY[M?l SMhoq
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("", "", "org.apache.commons.lang.LocaleUtils");
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.GERMAN;
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocaleUtils.languagesByCountry("gmR@z");
      LocaleUtils.availableLocaleSet();
      LocaleUtils.languagesByCountry("");
      LocaleUtils.availableLocaleSet();
      LocaleUtils localeUtils0 = new LocaleUtils();
      LocaleUtils.languagesByCountry("NI");
      LocaleUtils.availableLocaleSet();
      LocaleUtils.languagesByCountry("TH");
      LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      Locale locale0 = Locale.FRANCE;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LocaleUtils.availableLocaleList();
      Locale locale1 = Locale.JAPANESE;
      LocaleUtils.localeLookupList(locale1, locale1);
      LocaleUtils.isAvailableLocale(locale0);
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("gmR@z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gmR@z
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List list0 = LocaleUtils.languagesByCountry((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocaleUtils.availableLocaleSet();
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayName();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Japanese");
      Locale.lookupTag(linkedList0, linkedList1);
      LocaleUtils.localeLookupList(locale0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      linkedList3.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList3, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0);
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils.isAvailableLocale(locale0);
      locale0.toLanguageTag();
      LocaleUtils.availableLocaleList();
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils.localeLookupList(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
      LocaleUtils.languagesByCountry(")Q@Q5[*>]X? ,!");
      LocaleUtils.localeLookupList(locale0, locale0);
      LocaleUtils.languagesByCountry("");
      LocaleUtils.languagesByCountry("");
      LocaleUtils.localeLookupList(locale0, locale0);
      LocaleUtils.countriesByLanguage((String) null);
      Locale locale1 = LocaleUtils.toLocale("ja");
      assertEquals("ja", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocaleUtils.countriesByLanguage("en");
      LocaleUtils.languagesByCountry("en");
      String string0 = "";
      LocaleUtils.languagesByCountry("");
      LocaleUtils.languagesByCountry("en");
      String string1 = "ko";
      LocaleUtils.languagesByCountry("ko");
      String string2 = "B%";
      LocaleUtils.languagesByCountry("B%");
      String string3 = "ja";
      LocaleUtils.toLocale("ja");
      String string4 = "OUF";
      LocaleUtils.languagesByCountry("OUF");
      LocaleUtils.countriesByLanguage("ko");
      LocaleUtils.languagesByCountry("ja");
      LocaleUtils.countriesByLanguage("ja");
      LocaleUtils.countriesByLanguage("ko");
      LocaleUtils.toLocale("ko");
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
         verifyException("org.apache.commons.lang.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      locale0.hasExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.clone();
      LocaleUtils.localeLookupList(locale0, locale0);
      LocaleUtils.countriesByLanguage((String) null);
      LocaleUtils localeUtils0 = new LocaleUtils();
  }
}
