/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 18:52:38 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.XML;
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("c`'kqW*d}Q.vg*~PAaw", 283);
      int int0 = entities_BinaryEntityMap0.value("c`'kqW*d}Q.vg*~PAaw");
      assertEquals(283, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities_TreeEntityMap0.name(2045);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      entities_LookupEntityMap0.add("", 147);
      int int0 = entities_LookupEntityMap0.value("");
      assertEquals(147, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      entities_HashEntityMap0.add("jY%c&#'v;/", 363);
      int int0 = entities_HashEntityMap0.value("jY%c&#'v;/");
      assertEquals(363, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      int int0 = entities_HashEntityMap0.value("9(%aX1x-\"p!<y[1$");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.HTML40.entityName(1128);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.ensureCapacity(660);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap(1918);
      entities_ArrayEntityMap0.add("{n", 1946);
      String string0 = entities_ArrayEntityMap0.name(1946);
      assertEquals("{n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("", 60);
      int int0 = entities_BinaryEntityMap0.value((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("c`'kqW*d}Q.vg*~PAaw", 283);
      String string0 = entities_BinaryEntityMap0.name(283);
      assertEquals("c`'kqW*d}Q.vg*~PAaw", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("", 60);
      String string0 = entities_BinaryEntityMap0.name(413);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("", 129);
      entities_BinaryEntityMap0.add("", (-1786));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(656);
      entities_BinaryEntityMap0.add((String) null, 771);
      entities_BinaryEntityMap0.add("8839", 1549);
      entities_BinaryEntityMap0.add("r(", 1549);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.escape("4%c&;/");
      assertEquals("4&amp;c&quot;&lt;/", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.escape((Writer) stringWriter0, "Bp3'z[&H4(A/- !q;p~");
      assertEquals("Bp3&apos;z[&amp;H4(A/- !q;p~", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      String string0 = entities0.unescape("c`'kqW*d}Q.vg*~PAaw");
      assertEquals("c`'kqW*d}Q.vg*~PAaw", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("BZ#&3puDm=h");
      assertEquals("BZ#&3puDm=h", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("BZ#&amp;&BZ#&3puDm=h;puDm=h");
      assertEquals("BZ#&&BZ#&3puDm=h;puDm=h", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("4%c&;/");
      assertEquals("4%c&;/", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("jY%c&#'v;/");
      assertEquals("jY%c&#'v;/", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.unescape("4%c&#;/");
      assertEquals("4%c&#;/", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("j,%c&#x9^;");
      assertEquals("j,%c&#x9^;", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Entities entities0 = new Entities();
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "jY%c&#'v;/");
      assertEquals("jY%c&#'v;/", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "%]CT");
      assertEquals("%]CT", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "BZ#&amp;&BZ#&3puDm=h;puDm=h");
      assertEquals("BZ#&&BZ#&3puDm=h;puDm=h", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "4%c&;/");
      assertEquals("4%c&;/", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "4%c&#;/");
      assertEquals("4%c&#;/", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "j,%c&#x9^;");
      assertEquals("j,%c&#x9^;", stringWriter0.toString());
  }
}
