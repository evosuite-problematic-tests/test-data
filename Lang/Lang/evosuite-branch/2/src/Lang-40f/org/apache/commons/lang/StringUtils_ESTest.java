/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 04 18:04:22 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("', is neither of type Map.Entry nor an Array");
      assertEquals(19, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(", Length: 0", "fkZ0#Gx_TW7QjjxvX", ", Length: 0");
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.rightPad("{ab5Qt]E7}", (-1));
      assertEquals("{ab5Qt]E7}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "'K,mHe5UOt");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.strip("OT$=t'v");
      assertEquals("OT$=t'v", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("u=pOSomm=q3u8kbpPKz", "", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("V0d%WN");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("V0d%WN", string0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.replace("xkD[vvx>2Z", "", "]a[3[//");
      assertEquals("xkD[vvx>2Z", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.center("The String must not be empty", 0);
      assertEquals("The String must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("u`h2e!h'<H:4ay'", "org.apache.commons.lang.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("KvI", "M5ue'#Fj <e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, (-1145), (-1145));
      boolean boolean0 = StringUtils.isNotEmpty(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("5m`EA_UDNMqdJ^P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("FOBgCo1i");
      assertEquals("FOBgCo1i", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToNull("The Array must not be null");
      assertEquals("The Array must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("]+V_y(aBc&JT7d>W6");
      assertEquals("]+V_y(aBc&JT7d>W6", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.strip("j\"", "");
      assertEquals("j\"", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.strip(" is less than 0: ", "tK#yj|KP");
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.strip("x,Er*:g=2_", "x,Er*:g=2_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripEnd("                                                                                                                                                                                                                                                                                                                      ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Uj Jf2'}F", "Uj Jf2'}F");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Uj Jf2'}F");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "xkD[vvx>2Z", 16);
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "FOBgCo1i");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("cuZ)9?r", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("Search and Replace array lengths don't match: ", "Dx^{q)vnzq!j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.equalsIgnoreCase(stringArray0[3], "The String must not be empty");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf("j\"", 'B');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 's');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf("                                                                                                                                                                                                                                                                                                                      ", '9', 310);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'i', 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, " vs ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf("~z%mz", "~z%mz");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf("*&Y|**'lrSTTT", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcvmkzbu+i6+hjpqrstuvwxyz{|}~", 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "{}", (-1593));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Vi`0YA:", (String) null, (-736));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("pL62~,w9,~hL05Qs", "", 4096);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("org.apache.commons.lang.ObjectUtils$Null", "org.apache.commons.lang.ObjectUtils$Null", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("The String must not be empty", "The String must not be empty", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.indexOf(stringArray0[0], "org.apache.commons.lang.ObjectUtils", 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf(">F)QSNcm~@T", "", 256);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("", (String) null, 2336);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("_", "uwPi8][2hp", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("TimeToLive of ", 'P');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 'Q');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("z4x[:zj", '2', 122);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", ' ', 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("tOU5eHm,K'", "tOU5eHm,K'");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(" 6S8(^$?v3|", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "", 1624);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", "]+V_y(aBc&JT7d>W6", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`vmkzbu+i6+hjmnopqrstuvwxyz{|}~", 'm');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      boolean boolean0 = StringUtils.contains(string0, ']');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("!*unWcl8w", 'G');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "org.apache.commons.lang.ArrayUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("E'Z8}j l}JE$l 5 w&", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(")`_c]Cf9s", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("                                                                                                                                                                                                                                                                                                                      ", "34h|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "VMKzBu+I6+Hj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("TimeToLive of ", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("', is neither of type Map.Entry nor an Array", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "VMKzBu+I6+Hj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny("'`", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("', is neither of type Map.Entry nor an Array", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, "OT$=t'v");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("Ekj;Kkh#uRpTeo<", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "\\u0";
      boolean boolean0 = StringUtils.containsAny(stringArray0[1], string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("/B", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("Uj Jf2'}F", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("Cannot pad a negative amount: ", "Cannot pad a negative amount: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsAny("|f7{w?2Pby^D@`0u", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("', is neither of type Map.Entry nor an Array", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly("The character ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut("i=ExiRU6O7&", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("{k", "{k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "~");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("TimeToLive of ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("q;2F%x=?[rpQ7# vs ", "q;2F%x=?[rpQ7");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("/1UP9", "/1UP9");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("opqrstuvwxyz", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[8];
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsOnly(stringArray0[5], charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("x,Er*:g=2_", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "j'w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("- <Ogl", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone("h7hP+e@4$U:YQ,L/K;", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone(")Tm+2Y5/", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("\"M1AJc.V5.W.,lg4#", "yl<i'.jE0*N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("q;2F%x=?[rpQ7", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("Cannot pad a negative amount: ", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "pL62~,w9,~hL05Qs";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = "";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", (String) null);
      int int0 = StringUtils.lastIndexOfAny("Minimum abbreviation width is 4", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny(";", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The String must not be empty";
      int int0 = StringUtils.lastIndexOfAny("The String must not be empty", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-659));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1626));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("", 64);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 97, 64);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.substring("%7L`'m_q<A,z&", (-500), (-500));
      String string1 = StringUtils.rightPad(string0, 10, "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t", string1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width with offset is 7", 2273, 2336);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substring("%<", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.left("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.left("PL2k+p`Uq=[", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.left("Index: ", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.right("Ep@W*rqS(Q.z,D#-WM>", (-1631));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.right("qh~8K|N)", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.right("Ca*2{d)ii5sNo2?sUk$", 127);
      assertEquals("Ca*2{d)ii5sNo2?sUk$", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid("x,Er*:g=2_", 16, 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 8192, 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.mid("", (-1), (-1353));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.mid("", (-935), 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.mid(" vs ", 3, 2);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.mid("*4ZV' `:v~", 5, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, "lDkns}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringBefore("2_)jM3", "Ekj;Kkh#uRpTeo<");
      assertEquals("2_)jM3", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.capitalize(string0);
      String string2 = StringUtils.substringBefore(string1, (String) null);
      assertNotNull(string2);
      assertEquals("\\u0", string2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringBefore("W~n", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringBefore("{k", "{k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%<", "U\"WO@H");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", ">`");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringAfter("M]", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Index: ", "");
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("tOU5eHm,K'", "tOU5eHm,K'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(", '", "");
      assertEquals(", '", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("org.apache.commons.lang.ArrayUtils", ")`_c]Cf9s");
      assertEquals("org.apache.commons.lang.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("]'R`KF", "A@IxjjG$e]jq7qJ_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("A&<VE#jMZB`1)9I", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefvmkzbu+i6+hjstuvwxyz{|}~ijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqr", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefvmkzbu+i6+hjstuvwxyz{|}~");
      assertEquals("ijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqrstijklmnopqr", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("2,-,Xd52+:", "2,-,Xd52+:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, (-1145), (-1145));
      String string1 = StringUtils.substringBetween("'XI", string0, "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.substringBetween(string0, "8AB\"D6H");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "TimeToLive of ", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("U(A?T\"QJ/4aPw2(cL3", "U(A?T\"QJ/4aPw2(cL3", "U(A?T\"QJ/4aPw2(cL3");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("/x! |", "Minimum abbreviation width is 4", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("rstuvwxyz{|}", "rstuvwxyz{|}", "h6kF?yu`]C");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(",o;aB&[j#>Rk:BbQp8", "TimeToLive of ", "UMjeiHO}rn\"hz");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.repeat(" is less than 0: ", 2112);
      String[] stringArray0 = StringUtils.substringsBetween(string0, " is less than 0: ", " ");
      assertNotNull(stringArray0);
      assertEquals(1056, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "The String must not be empty", 940);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("', is neither of type Map.Entry nor an Array", (String) null, 3);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("bmR7xV:VE5ZbvBWE7", "Z", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("iV0d%WN", "iV0d%WN", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("bmR7xV:VE5ZbvBWE7", "Z", (-1));
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Ca*2{d)ii5sNo2?sUk$", "Ca*2{d)ii5sNo2?sUk$", 127);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ca*2{d)ii5sNo2?sUk$", "Ca*2{d)ii5sNo2?sUk$", 0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '<');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", '\"');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("TTTTTTTTTT", 'T');
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.reverseDelimited(string0, '\\');
      assertEquals("u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("X9[J;};", ';');
      assertEquals("};X9[J", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("n", "n");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Uj Jf2'}F", "N", 4096);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("iV0d%WN", "iV0d%WN", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":Cg", 'h');
      String string0 = StringUtils.replaceEach("T%9K.&v/J0c9h!6T%9K.&v/J0c9h!6", stringArray1, stringArray0);
      assertEquals("T%9K.&v/J0c9h!6T%9K.&v/J0c9h!6", string0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("5m`EA_UDNMqdJ^P");
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'D');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'R', 0, 200);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = StringUtils.join(objectArray0, '8');
      assertEquals("88888888", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "c`'kqW*d}Q.vg*~PAaw");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, (String) null, 122, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("The Character must not be null");
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "ac; c@~g8EA8", (-1), 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "iV0d%WN", "iV0d%WN");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.center(stringArray0[0], 0, ';');
      String string1 = StringUtils.join((Object[]) stringArray0, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      String string0 = StringUtils.join(iterator0, 'a');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'W');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "q;2F%x=?[rpQ7");
      String string0 = StringUtils.join((Collection<?>) linkedList0, '#');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add((Object) null);
      linkedList0.add(object0);
      String string0 = StringUtils.join((Collection<?>) linkedList0, 'x');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.add((Object) null);
      String string0 = StringUtils.join((Collection<?>) linkedList0, 'l');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.capitalize(string0);
      assertEquals("\\u0", string1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ListIterator<Locale.LanguageRange> listIterator0 = linkedList0.listIterator();
      String string2 = StringUtils.join((Iterator<?>) listIterator0, string1);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "](,h'9");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "org.apache.commons.lang.ArrayUtils");
      String string0 = StringUtils.join((Collection<?>) linkedList0, "B07f`T43eU");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2744));
      linkedList0.add(integer0);
      linkedList0.offerFirst(integer0);
      String string0 = StringUtils.join((Collection<?>) linkedList0, (String) null);
      assertEquals("-2744-2744", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.push((Integer) null);
      linkedList0.addAll(0, (Collection<? extends Integer>) linkedList0);
      String string0 = StringUtils.join((Collection<?>) linkedList0, "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertNotNull(string0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("K2U\"");
      assertEquals("K2U\"", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Index: ");
      assertEquals("Index:", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.removeStart("2]@w", ")gjbFY]D/L(2d");
      assertEquals("2]@w", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.removeStart("Uj Jf2'}F", "");
      assertEquals("Uj Jf2'}F", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeStart("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("+n$", "+n$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("PO5eZux", (String) null);
      assertNotNull(string0);
      assertEquals("PO5eZux", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("<", "The character must not be null");
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeEnd("'K,mHe5UOt", "tOU5eHm,K'");
      assertEquals("'K,mHe5UOt", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation width is 4", "", 2);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is 4Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.repeat("u`h2e!h'<H:4ay'", "Index: ", 65);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("tOU5eHm,K'", "-");
      assertEquals("tOU5eHm,K'", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("\"PaL4R_c", "");
      assertEquals("\"PaL4R_c", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("iV0d%WN", "iV0d%WN");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, "KGtyl*wwy");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.remove("TimeToLive of ", "TimeToLive of ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang.CharUtils", 1483);
      String string1 = StringUtils.remove(string0, "");
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.remove("", 'l');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.remove(" is less than 0: ", 'e');
      assertEquals(" is lss than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.remove("#8", 'q');
      assertEquals("#8", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, "Index: ", "!Nl@p6nkZ-h&`Q$ W9[");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.replace("Index: ", "", (String) null, 495);
      assertEquals("Index: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", " vs ", "qh~8K|N)", 0);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Index: ", "Index: ", "Index: ");
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.replace("/x_[}=&W/Y9K", "/x_[}=&W/Y9K", "/x_[}=&W/Y9K", Integer.MAX_VALUE);
      assertEquals("/x_[}=&W/Y9K", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceEachRepeatedly("gZGC[!|p", stringArray0, (String[]) null);
      assertEquals("gZGC[!|p", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("m8sg7-weG(WIRDXIY.f", (String[]) null, (String[]) null);
      assertEquals("m8sg7-weG(WIRDXIY.f", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":Cg", 'h');
      StringUtils.replaceEach("", (String[]) null, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("c38hi2vf~%`qSnbz", "c38hi2vf~%`qSnbz");
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = new String[6];
      String string0 = StringUtils.replaceEach("A", stringArray0, stringArray1);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("s}VTF/", "^6/SQI6]QK;'yZ,|5;P");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("s}VTF/", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: s}VTF/
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang.CharUtils");
      String string0 = StringUtils.center("org.apache.commons.lang.CharUtils", 1483);
      String[] stringArray1 = StringUtils.split(string0, "org.apache.commons.lang.CharUtils");
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(string0, stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 1
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "...";
      String string0 = StringUtils.replaceEachRepeatedly(">`", stringArray0, stringArray0);
      assertEquals(">`", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "...";
      stringArray0[1] = "...";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("...", stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "4ZF7g";
      stringArray0[2] = "_*v";
      stringArray0[3] = "4ZF7g";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("4ZF7g", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 4ZF7g
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "...";
      stringArray0[1] = "...";
      stringArray0[2] = "...";
      stringArray0[3] = "...";
      String string0 = StringUtils.replaceEach("...", stringArray0, stringArray0);
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", '\"', '\"');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.replaceChars(stringArray0[2], '$', '$');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "wP;(", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceChars("IMBVDh@R$W]X", "", "3>&,]$h");
      assertEquals("IMBVDh@R$W]X", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopvmkzbu+i6+hj}~", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopvmkzbu+i6+hj}~", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceChars(",ef. ", "[FMR`U`M.CC$R", "[FMR`U`M.CC$R");
      assertEquals(",ef. ", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceChars("5Yc", ", '", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_vmkzbu+i6+hjlmnopqrstuvwxyz{|}~");
      assertEquals("5Yc", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.overlay(" vs ", " vs ", Integer.MAX_VALUE, 1640);
      assertEquals(" vs  vs ", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.overlay("", (String) null, (-702), (-3226));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.overlay("j'w", (String) null, 3008, (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.chomp("Index: ");
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.chomp("!");
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.chomp(".C{J^<", (String) null);
      assertNotNull(string0);
      assertEquals(".C{J^<", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.chomp("The Array must not be null", "");
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.chomp("zI}yKl", "sUi}4Y");
      assertEquals("zI}yKl", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.chop("K");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.chop("Index: ");
      assertEquals("Index:", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "Csb8]A|iU{Gv6e7!2[", (-661));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.repeat("java.lang.Object@be0166el-1", "java.lang.Object@be0166el-1", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.repeat("Xd|", 1);
      assertNotNull(string0);
      assertEquals("Xd|", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.repeat("", 2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.repeat("3", 1437);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.repeat("dC", 251);
      assertNotNull(string0);
      assertEquals("dCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdCdC", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.repeat("", stringArray0[0], 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.rightPad("Rl#&(4f1V", 8228, '3');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 3017, "RSW9-<3,%M|`[");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.rightPad("Y@DmBpfy8=l", 447, (String) null);
      assertEquals("Y@DmBpfy8=l                                                                                                                                                                                                                                                                                                                                                                                                                                                   ", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.rightPad("defghijklmnopqrstuvwxyz[]^_`abcdefghijklmno", (-3325), "V(e;uvS`pI\"0jM+");
      assertEquals("defghijklmnopqrstuvwxyz[]^_`abcdefghijklmno", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2, "{}");
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang.ArrayUtils", (-2022));
      assertEquals("org.apache.commons.lang.ArrayUtils", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.leftPad("-kphm&1TfD!?D<0.V)-kphm&1TfD!?D<", 9978, '6');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 1780, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 2, "");
      assertEquals("  ", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.leftPad("P0r6%T", 0, "D@Fp'(0L+?`oK8");
      assertEquals("P0r6%T", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 32, "T%9K.&v/J0c9h!6");
      assertEquals("T%9K.&v/J0c9h!6T%9K.&v/J0c9h!6", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center("", (int) 'U', "Cannot get the toString of a null identity");
      assertEquals("Cannot get the toString of a null identityCannot get the toString of a null identityC", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.center("]KDg1,", (int) 'U', "Cannot get the toString of a null identity");
      assertEquals("Cannot get the toString of a null ident]KDg1,Cannot get the toString of a null identi", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = StringUtils.length("6.LQb9T#1>m>E>");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center("5;&]", 2, 'e');
      assertEquals("5;&]", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.center(stringArray0[1], 0, "Xd|");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.center("Ekj;Kkh#uRpTeo<", (-1631), "Ekj;Kkh#uRpTeo<");
      assertEquals("Ekj;Kkh#uRpTeo<", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.center(" vs ", 808, (String) null);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                   vs                                                                                                                                                                                                                                                                                                                                                                                                                   ", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.center("mv_i5OTp`f)d", 11, "mv_i5OTp`f)d");
      assertEquals("mv_i5OTp`f)d", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.upperCase("Im_w!S22v>Rn<*,N:gu");
      assertNotNull(string0);
      assertEquals("IM_W!S22V>RN<*,N:GU", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = StringUtils.upperCase(" is less than 0: ", locale0);
      assertEquals(" IS LESS THAN 0: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("n>o");
      assertEquals("n>o", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.swapCase("Xmpy(#Fa ");
      assertEquals("xMPY(#fA ", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = StringUtils.countMatches("5m`EA_UDNMqdJ^P", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = StringUtils.countMatches("The Array must not be null", "The Array must not be null");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.repeat("f&/A[x</nXG", 8192);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("cuZ)?r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Strings must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("The character ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("@\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("PI^*6Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Xd|";
      boolean boolean0 = StringUtils.isNumeric(stringArray0[1]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = StringUtils.leftPad(",o;aB&[j#>Rk:BbQp8", 2327, '3');
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("                                                                                                                                                                                                                                                                                                                                                                                                                   vs                                                                                                                                                                                                                                                                                                                                                                                                                   ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("ijklmnopqrst");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("L)7Fl</!jNYt^a~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("LL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "V");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.defaultString(stringArray0[6], "'K,mHe5UOt");
      assertNotNull(string0);
      assertEquals("'K,mHe5UOt", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("The Array must not be null", "The Array must not be null");
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "s$gSO`3%YIaVb");
      assertEquals("s$gSO`3%YIaVb", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.reverse("org.apache.commons.lang.ArrayUtils");
      assertEquals("slitUyarrA.gnal.snommoc.ehcapa.gro", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 13, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", 3, (-463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Cannot get the toString of a null identity", 559, 32);
      assertEquals("...e toString of a null identity", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("abcdefghijkl", 57, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.leftPad("W8%wAE*hCpt:Q@ Zj", 2426, '\\');
      String string1 = StringUtils.abbreviate(string0, 2079, 121);
      assertEquals("...\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\...", string1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.difference("", ",b3ujK+I#xN\"ofC8)");
      assertEquals(",b3ujK+I#xN\"ofC8)", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "k^)Ogc'X0x5'xt{");
      assertNotNull(string0);
      assertEquals("k^)Ogc'X0x5'xt{", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.difference(":UO+|K|w\"}@V%", (String) null);
      assertNotNull(string0);
      assertEquals(":UO+|K|w\"}@V%", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, " vs ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("jj># ht", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("V0d%WN", "V}0}d}%}WN");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.abbreviate("i_}M!p8quAn6q", 10, 15);
      assertEquals("i_}M!p8quAn6q", string0);
      
      int int0 = StringUtils.indexOfDifference(string0, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, "");
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Xd|";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Xd|";
      stringArray0[1] = "Xd|";
      stringArray0[2] = "Xd|";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Xd|", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" is less than 0: ", (String) null);
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "pL62~,w9,~hL05Qs";
      stringArray0[1] = "p";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "xkD[vvx>2Z", 16);
      StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#g*1\"";
      stringArray0[1] = "#g*1\"";
      stringArray0[2] = "#g*1\"";
      stringArray0[3] = "#G*1\"";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "[]a~B)bj]N8gm9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[]^_`abcdefghijklmnopqrsvmkzbu+i6+hj", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("Im_w!S22v>Rn<*,N:gu", "Im_w!S22v>Rn<*,N:gu");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance(" ", "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("cdefghijklmn", " vs ");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.center(stringArray0[0], 0, ';');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "?nX$@V[G|/Rh!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '2');
      boolean boolean0 = StringUtils.startsWithAny("{)", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny("\"g-!3*Go`PmCM(FT7y", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      boolean boolean0 = StringUtils.startsWithAny("\"g-!3*Go`PmCM(FT7y", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "zV@H->&3m_f=x4qJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("The character ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }
}
