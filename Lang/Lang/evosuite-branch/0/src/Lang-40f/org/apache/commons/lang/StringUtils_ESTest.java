/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 11:07:10 GMT 2018
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.JVM)
@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("TimeToLive of ");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "`.Bk4^!8i%^Eu", 1);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.rightPad(" IS NOT IN THE RANGE '0' - '9'", (-3236));
      assertNotNull(string0);
      assertEquals(" IS NOT IN THE RANGE '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.strip(".");
      assertEquals(".", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Cannot pad a negative amount: ", 2238);
      assertEquals("Cannot pad a negative amount: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character ", "Array element ", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/3%V2dX5@Q$Q", '.');
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("[*FD#>-U/23D4", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.replace("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.center("", 2616);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("=oY{E`Z7;!fE", (String) null);
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = StringUtils.countMatches("", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("The character ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("yvR=?(i{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" is less than 0: ");
      assertEquals("is less than 0:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("ONuQGTX9`");
      assertEquals("ONuQGTX9`", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.stripToNull(stringArray0[4]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripToNull("K");
      assertNotNull(string0);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Cannot pad a negative amount: ");
      assertEquals("Cannot pad a negative amount:", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, ";c");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "Na");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.strip("(!Gvn3&eL$W[.g", "giY`T>\"e");
      assertEquals("(!Gvn3&eL$W[.", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("bb");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.strip("#s'e=", "#s'e=");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripEnd("(e\"$(]t7$", "(e\"$(]t7$");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Strings must not be null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "CmFxZ~jt=7");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = StringUtils.equals("@lS%vS>ulF(", "@lS%vS>ulF(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "):E{k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "fgCy%I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = StringUtils.indexOf("@lS%vS>ulF(", 'M');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'T');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOf("org.apache.commons.lang.ArrayUtils", 'a', 2);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'O', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 122, "[n");
      int int0 = StringUtils.indexOf((String) null, string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf("bix6j_Xm]N)4k2),E", "qK}+o");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf("Array element ", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "The Array must not be null", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("{}", "aZnn&(ZSy", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", (String) null, (-645));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("EmZt>,P", "EmZt>,P", 2266);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Dv\"J]0H", "", 607);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("org.apache.commons.lang.charutils", "r", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null, 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", 634);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf("TimeToLive of ", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf("(e\"$(]t7$", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", 29);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("Minimum abbreviation width is 4", "", 10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("(*2TUjJ3b@", '!');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '<');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("`pLt`-n|<r;", 's', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '\\', (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("sRBT", "E");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "fqH4HayY", 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("giY`T>\"e", "?9?@,0", (-1490));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("l%b}{EL,8Env(", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", '@');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("H%%+5<N", '<');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "Index: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("_9I@3xaxK(Fs<\"", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "=oY{E`Z7;!fE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("&A/QkCaFNVs{ej>Bf", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Jc", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("`O/vI`ewm7+GH\"[NE", "{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny(";YHZ<oX~II,m'Wo9)", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'g';
      int int0 = StringUtils.indexOfAny("FgAAW6I", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", "sW{W:");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("{31+v}\"%5", ", Length: 0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("C0s0OfSh", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsAny((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("sRBT", "g}L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny(" ", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("K{?'_V:{`}(r|r%!-=5", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'X';
      boolean boolean0 = StringUtils.containsAny("sX", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = StringUtils.indexOfAnyBut("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("ZLxAKR)1F", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("The character must not be null", "}P VA&FcB1ojAn");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("?uPIW?QW bEV", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("TimeToLive of ", "TimeToLive of ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("(e\"$(]t7$3333", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", ", Length: 0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly(")!^xaKTv-?pxuV", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.overlay("Strings must not be null", "Strings must not be null", 0, 13);
      assertEquals("Strings must not be nullnot be null", string0);
      
      boolean boolean0 = StringUtils.containsOnly(string0, "Z-?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "6799");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("CmFxZ~jt=7", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone(" is not in the range '0' - '9'", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone(")?HBBt", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone(" is not in the range '0' - '9'", " IS NOT IN THE RANGE '0' - '9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "ll'4#u`oRW]+uF:a0Q~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("Nd!l+|", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((String) null, (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = StringUtils.indexOfAny(", '", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cannot pad a negative amount: ";
      stringArray0[1] = "Cannot pad a negative amount: ";
      int int0 = StringUtils.indexOfAny("Cannot pad a negative amount: ", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[3];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"$,1as'}";
      int int0 = StringUtils.lastIndexOfAny("\"$,1as'}", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.leftPad(" is less than 0: ", 2287);
      String[] stringArray0 = new String[2];
      stringArray0[1] = string0;
      int int0 = StringUtils.lastIndexOfAny("\"$,1as'}", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.substring("ZLzku'([YmnQYnMF[", (-37));
      assertEquals("ZLzku'([YmnQYnMF[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.substring(stringArray0[0], 1941);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.substring("7/90hVDgRb/H'`lMf", 1501);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.substring("cc1<'rjJ+ ~E7N?L", 0, 551);
      assertNotNull(string0);
      assertEquals("cc1<'rjJ+ ~E7N?L", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 2, 256);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.substring("=Tffo{D2(T_<eP80V@", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring("...", 19, (-2674));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring("cc1<'rjJ+ ~E7N?L", (-2964), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("v(Afblhb", (-48), (-48));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.left("[v`.g{t<5", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-2495));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.left("bvoD)E`?", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.left("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.right("Cannot pad a negative amount: ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.right("HCUT'd9=k'Ezg|", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.mid("", (-2881), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 1650, (-2310));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.mid("g30nsr?Pfn", (-1764), (-2489));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.mid("", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid("', has a length less than 2", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.substringBefore("TH=)><e6.,S|^_+N0&;", "UNw4][#BR+-'Dm");
      assertEquals("TH=)><e6.,S|^_+N0&;", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Y[B&xZ", (String) null);
      assertNotNull(string0);
      assertEquals("Y[B&xZ", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substringBefore("SSXc'F,$Zj1nb", "SSXc'F,$Zj1nb");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringAfter("q\"rr2OT+|ZN7s<~:", "q\"rr2OT+|ZN7s<~:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[y}A1|!}", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "Strings must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "!");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;", ", Length: 0");
      assertEquals("TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("\"vfZ7#;cFb", (String) null);
      assertEquals("\"vfZ7#;cFb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("W", "W");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("(e\"$(]t7$", "@V08Pe<_T(2D{offT=");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("{}", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("', has a length less than 2", "', has a length less than 2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zZHqXN]7& uSv$wl,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", "zZHqXN]7& uSv$wl");
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" IS NOT IN THE RANGE '0' - '9'", "$}{Jc`qh", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The Array must not be null", "The Array must not be null", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBetween("u", "!1h3wCp", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "UNw4][#BR+-'Dm");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("(e\"$(]t7$", "(e\"$(]t7", "$");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("M~nM\"r`q(lp3Q", "Minimum abbreviation width with offset is 7", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "zv", "zv");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" is less than 0: ", "zv", "zv");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("rXT.6Cg8'A.-An/zRS", "rXT.6Cg8'A.-An/zRS", ":K=;p9NZhxp");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{}", "{}");
      boolean boolean0 = StringUtils.startsWithAny("\"MBkdC`4jnv8~O|", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("o11u+", "o11u+");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, 'E');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("2v=xy43h!jV+eTnp", 'x');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M'lS1:q+@}4Mx", 'x');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("R/.Qb1,", ',');
      assertEquals("R/.Qb1", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" is not in the range '0' - '9'");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ", " ", 34);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(":", " ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("', has a length less than 2", "Search and Replace array lengths don't match: ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("_R5L8v,.7(~]P@6<QQR", "_R5L8v,.7(~]P@6<QQR", 7);
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '0', 1, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'H');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '%', 3, 1603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "u:7W&85E8;%lBiBPZ-", 558, 332);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, "Minimum abbreviation width is 4", 122, 122);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Array element ", "");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Arrayelement", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = StringUtils.join((Collection<?>) linkedList0, '@');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '-');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      String string0 = StringUtils.join((Collection<?>) linkedList0, '@');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      boolean boolean1 = StringUtils.startsWith((String) null, "|PzVdKr[G");
      assertFalse(boolean1);
      
      String string0 = "?D@HIt{)Q+\"dOU-";
      String string1 = StringUtils.leftPad("?D@HIt{)Q+\"dOU-", (-3182));
      assertNotNull(string1);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      StringUtils.join(iterator0, 'y');
      int int0 = StringUtils.getLevenshteinDistance(string0, string0);
      assertEquals(0, int0);
      
      String string2 = "";
      String string3 = null;
      String[] stringArray0 = StringUtils.split(string2, string3);
      assertNotNull(stringArray0);
      
      String string4 = "...";
      boolean boolean2 = StringUtils.contains(string0, string4);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      String string0 = StringUtils.join(iterator0, "F;!@6RZ/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      String string0 = StringUtils.join((Collection<?>) linkedList0, "");
      assertNotNull(string0);
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "3$`(~6t6e`");
      StringUtils.splitByWholeSeparator(stringArray0[0], stringArray0[0]);
      StringUtils.indexOfDifference(stringArray1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      StringUtils.startsWithIgnoreCase(stringArray0[2], "");
      StringUtils.join((Collection<?>) linkedList0, 'G');
      StringUtils.substringBefore("|QkG3G(~;qbEp", "");
      StringUtils.isAlphanumericSpace("");
      StringUtils.join((Collection<?>) linkedList0, "k");
      String string0 = StringUtils.repeat(stringArray0[1], 87);
      StringUtils.startsWith("", "k");
      StringUtils.mid("|QkG3G(~;qbEp", 32, 581);
      StringUtils.contains("5", 'G');
      StringUtils.isAlpha("");
      StringUtils.splitPreserveAllTokens(string0, "T>W^a~n.O_*~", 0);
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      StringUtils.join(iterator0, string0);
      Iterator<String> iterator1 = null;
      String string1 = "pUfg_j_U5";
      String string2 = StringUtils.join(iterator1, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, 'U');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.join((Collection<?>) null, "79rY");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(".4oYt5");
      assertEquals(".4oYt5", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" is not in the range '0' - '9'");
      assertEquals("isnotintherange'0'-'9'", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.removeStart("", ", Length: 0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.removeStart(" is less than 0: ", "Jc");
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.removeStart("3)H+xekj8", (String) null);
      assertEquals("3)H+xekj8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.removeStart(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "F;!@6RZ/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("]a'Do'ltA^lQ", "");
      assertEquals("]a'Do'ltA^lQ", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("<pio", "o11u+");
      assertEquals("<pio", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("n~", "n~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.removeEnd("!U#{J0", "The character must not be null");
      assertEquals("!U#{J0", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.repeat("", "hS?4Gr#", 1536);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("u", "");
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("FO{Y'p\"(@%lq@", "FO{Y'p\"(@%lq@");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("VAjv ", "b");
      assertEquals("VAjv ", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.overlay("szwY}", string0, 2616, 2616);
      assertEquals("szwY}\\u0", string1);
      
      String string2 = StringUtils.remove("szwY}", string1);
      assertEquals("szwY}", string2);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.remove("CmFxZ~jt=7", "");
      assertEquals("CmFxZ~jt=7", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.remove("", 'J');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.remove("VwA1]wFG[0'dC}5'a", '8');
      assertEquals("VwA1]wFG[0'dC}5'a", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.remove("SSXc'F,$Zj1nb", 'b');
      assertEquals("SSXc'F,$Zj1n", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.replace("", "X{LAPf", (String) null, 847);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.replace("bvoD)E`?", "", "{}");
      assertEquals("bvoD)E`?", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("{}", "q\"rr2OT+|ZN7s<~:", (String) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.replace("O6k6dMNth;r9:X;E", "Q\"MBh)nEU/5yUE~l", "U0x:*?<7'T2jb>I<y?%", 0);
      assertEquals("O6k6dMNth;r9:X;E", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.replace("(*2TUjJ3b@", "(*2TUjJ3b@", "4y^9g<vQ?1K8'", (-387));
      assertEquals("4y^9g<vQ?1K8'", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.replace("TimeToLive of ", "TimeToLive of ", "TimeToLive of ", 1061);
      assertEquals("TimeToLive of ", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.replace("Minimum abbreviation width is 4", "Minimum abbreviation width is 4", "Minimum abbreviation width is 4", 4);
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("ptlmvtw", "ptlmvtw", "ptlMvtW");
      assertEquals("ptlMvtW", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "The Character must not be null", 0);
      String string0 = StringUtils.replaceEachRepeatedly("', is neither of type Map.Entry nor an Array", stringArray0, stringArray0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.replaceEach((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.replaceEach(".", (String[]) null, (String[]) null);
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Minimum abbreviation width with offset is 7");
      String string0 = StringUtils.replaceEach(" vs ", stringArray0, (String[]) null);
      assertEquals(" vs ", string0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      stringArray0[7] = "0";
      stringArray0[8] = "0";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 0
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("java.lang.Object@1b7437c5java.lang.Object@6b2c8119java.lang.Object@7729d5edjava.lang.Object@bd44eb1", (String) null, (-1303));
      String[] stringArray1 = StringUtils.split(", Length: ");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("U0YEu6tF`j}Br%VT", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[7];
      stringArray1[2] = "Search and Replace array lengths don't match: ";
      String string0 = StringUtils.replaceEach("Search and Replace array lengths don't match: ", stringArray1, stringArray0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EUES\"!FRJ";
      stringArray0[5] = "EUES\"!FRJ";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[5] = "Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("Search and Replace array lengths don't match: ", stringArray1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Minimum abbreviation width with offset is 7");
      String string0 = StringUtils.replaceEach("Minimum abbreviation width with offset is 7", stringArray0, stringArray0);
      assertEquals(14, stringArray0.length);
      assertEquals("Minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("a$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:la$R#X9s>Jf:l");
      String string0 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(" vs ", string0);
      assertEquals(628, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", 'd', 'd');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'f', 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", (String) null, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars("8A&!\"c!II^)(^R", " vs ", (String) null);
      assertEquals("8A&!\"c!II^)(^R", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replaceChars("(e\"$(]t7$", (String) null, "");
      assertEquals("(e\"$(]t7$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("!a$,!", "j#[J", "!a$,!");
      assertEquals("!a$,!", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.replaceChars("@c.@?-}X", "4y^9g<vQ?1K8'", "Se-+B|$\"`z");
      assertEquals("@c.@`-}X", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Nd!l+|", "teraU!j/H;|iWSM", "");
      assertEquals("Ndl+", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.overlay(stringArray0[4], "-V1z(KYW{U+U@=lAs", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.overlay("Cannot pad a negative amount: ", (String) null, (-2118), 10);
      assertEquals(" a negative amount: ", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.overlay(".4oYt5", ".4oYt5", (-1), (-1));
      assertEquals(".4oYt5.4oYt5", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.overlay("\"$,1as'}", "Rr75Xkv%<~k0y6%", 1763, 1);
      assertEquals("\"Rr75Xkv%<~k0y6%", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.chomp("1hMg!>^9~QY1oJx3P");
      assertEquals("1hMg!>^9~QY1oJx3P", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.chomp("Minimum abbreviation width with offset is 7", "8Wf6Y[mvfvU6WZ2y");
      assertEquals("Minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chomp("7MXiA", (String) null);
      assertEquals("7MXiA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chomp("EmZt>,P", "");
      assertEquals("EmZt>,P", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.chop("he r+nge '0' - '9'");
      assertEquals("he r+nge '0' - '9", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.repeat("", (-1303));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.repeat("', has a length less than 2", "", 1);
      assertEquals("', has a length less than 2", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.repeat("_", 8211);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.repeat(" ", 1536);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.repeat("+g", 122);
      assertEquals("+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g+g", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, (-2650));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, Integer.MAX_VALUE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-2852));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.rightPad("1%gC9", 8226, '1');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.rightPad("%)|I)N)(c!", (-1490), "");
      assertEquals("%)|I)N)(c!", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 560, (String) null);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rightPad(" ", 3, string0);
      assertEquals(" \\u", string1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.center("The character The character ", (int) ';', "The character The character The character The character The character The character The character The character ");
      assertEquals("The character TThe character The character The character Th", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0, 'D');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.leftPad("%)|I)N)(c!", 9976, 'z');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.leftPad(stringArray0[3], 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.leftPad(" is less than 0: ", 873, (String) null);
      assertNotNull(string0);
      assertEqualsis less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang.CharUtils", (-167), (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang.CharUtils", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.leftPad(" Y^$AAQX0A[I>", 27, "re'9Hd :. l<");
      assertEquals("re'9Hd :. l<r Y^$AAQX0A[I>", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1), 'R');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.center(" is not in the range '0' - '9'", (-3236), 'R');
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.center("8hyxw=mtD*A1)rA", 1);
      assertEquals("8hyxw=mtD*A1)rA", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, "WN>Da");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center(".", (-1), "...");
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.center("~cU{dg>K<>5H$Vs@M(", 1, (String) null);
      assertEquals("~cU{dg>K<>5H$Vs@M(", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.upperCase("EUES\"!FRJ");
      assertEquals("EUES\"!FRJ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("vmFCQ");
      assertEquals("vmFCQ", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.swapCase("cL~m,rwvK");
      assertEquals("Cl~M,RWVk", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = StringUtils.countMatches("j*318;tsV", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = StringUtils.countMatches("The String must not be empty", "The String must not be empty");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("BMczws<S1q hQK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("F!b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" vs ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("S*EBgcG*%\u0004A#a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" is not in the range '0' - '9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("j#[J");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("v K=R~sB%Jd6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("613WcU#'Yr1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" is not in the range '0' - '9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("8ex`x1:6hN]b4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" is not in the range '0' - '9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.isAllLowerCase(stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("The character The character ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("NK");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = StringUtils.defaultString("r2B");
      assertEquals("r2B", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("D#e*", "org.apache.commons.lang.StringUtils");
      assertEquals("D#e*", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.reverse("=Tffo{D2(T_<eP80V@");
      assertEquals("@V08Pe<_T(2D{offT=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'd');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("4~6T7Af", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("xns e12'{-C(U", 645, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.leftPad("U%ItpzwTD", 20, '%');
      String string1 = StringUtils.rightPad(string0, 1973, "U%ItpzwTD");
      String string2 = StringUtils.abbreviate(string1, 7, 1493);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width is 4", 28, 28);
      assertEquals("...m abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.difference(".", ".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.difference("VS#R*0amnxP'5g ;", (String) null);
      assertEquals("VS#R*0amnxP'5g ;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.difference("b*:]cN@y6Aw ", "he r+nge '0' - '9");
      assertEquals("he r+nge '0' - '9", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfDifference(stringArray0[3], "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("=0ymt}iVAs*~2h82m", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.difference("", "eM\u0002iXEx?1ure;*7");
      assertEquals("eM\u0002iXEx?1ure;*7", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.difference("b*:]cN@y6Aw ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("2", "2");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "F!b");
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The character The character ", "The character The character ", 0);
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "t+jgPrP3ukuk((";
      stringArray0[1] = "t+jgPrP3ukuk((";
      stringArray0[2] = "t+jgPrP3ukuk((";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'nKfy)}?pMLl", "EaGEiX&W0W4p|T", (-2371));
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pY[GGGGGGGGGGGGGGGGGGGGGGGGGGGG";
      stringArray0[1] = "pY[GGGGGGGGGGGGGGGGGGGGGGGGGGGG";
      stringArray0[2] = "pY[";
      stringArray0[3] = "pY[GGGGGGGGGGGGGGGGGGGGGGGGGGGG";
      stringArray0[4] = "pY[";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("pY[", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Minimum abbreviation width is 4";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "hG=~ PU@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("(Y?5i-trN/M43Ee", "(e\"$(]t7$");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;TAS;", "");
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("u", ",4D|D/CK%wGagVTU-|");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("G=slBX_:rqGkr&BLZq:", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "Gwngc')~0{mnww");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("a$R#X9s>Jf:l", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.upperCase("EUES\"!FRJ");
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", string0);
      assertFalse(boolean0);
  }
}
