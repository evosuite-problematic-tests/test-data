/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 11:11:02 GMT 2018
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.JVM)
@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.unescape("RJ`cD!Y&gt;yVR~BadP");
      assertEquals("RJ`cD!Y>yVR~BadP", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.add("RJ`cD!Y&gt;yVR~BadP", 1969);
      String string0 = entities_ArrayEntityMap0.name(1969);
      assertEquals("RJ`cD!Y&gt;yVR~BadP", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(146);
      entities_BinaryEntityMap0.add("", (-2429));
      int int0 = entities_BinaryEntityMap0.value("");
      assertEquals((-2429), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.ensureCapacity(253);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("OTZ!4o9kkL", 1956);
      int int0 = entities_TreeEntityMap0.value("OTZ!4o9kkL");
      assertEquals(1956, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities_TreeEntityMap0.name(1956);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities0.unescape("RJ`cD!Y&gt;yVRX&quot;~BadP");
      assertEquals("RJ`cD!Y>yVRX\"~BadP", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.HTML32.entityName(2603);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.add("", (-1));
      String string0 = entities_ArrayEntityMap0.name(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities_ArrayEntityMap0.add("", (-1));
      int int0 = entities_ArrayEntityMap0.value("-?vHs-");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(53);
      entities_BinaryEntityMap0.add("j9*ZEK1P/2{", 999);
      entities_BinaryEntityMap0.add("j9*ZEK1P/2{", 22);
      entities_BinaryEntityMap0.add("188", 999);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(53);
      entities_BinaryEntityMap0.add("j9*ZEK1P/2{", 22);
      entities_BinaryEntityMap0.add("8cAXxur+N2R*DhL*", 142);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add("org.apache.commons.lang.UnhandledException", 616);
      String string0 = entities_BinaryEntityMap0.name(616);
      assertEquals("org.apache.commons.lang.UnhandledException", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(53);
      String string0 = entities_BinaryEntityMap0.name((-1412));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.XML;
      String string0 = entities0.HTML32.escape("Er<pg<r[W>7T4Gp#");
      assertEquals("Er&lt;pg&lt;r[W&gt;7T4Gp#", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("RJ`cD!Y>yVR~BadP");
      assertEquals("RJ`cD!Y>yVR~BadP", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "OTZ!4o9kkL");
      assertEquals("OTZ!4o9kkL", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "#o5%h2f)&X:42s.fB");
      assertEquals("#o5%h2f)&X:42s.fB", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.unescape("&RJ`c&<>yVRX\"oadP;J`c&amp;&lt;&gt;yV&RJ`c&<>yVRX\"oadP;X&quot;oadP");
      assertEquals("&RJ`c&<>yVRX\"oadP;J`c&amp;&lt;&gt;yV&RJ`c&<>yVRX\"oadP;X&quot;oadP", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities entities0 = Entities.XML;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "Z&;d*),");
      assertEquals("Z&;d*),", stringWriter0.toString());
  }
}
