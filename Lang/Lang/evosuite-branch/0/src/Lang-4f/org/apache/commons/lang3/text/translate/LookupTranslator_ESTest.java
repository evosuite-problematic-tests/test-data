/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 09:42:11 GMT 2018
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.JVM)
@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LookupTranslator_ESTest extends LookupTranslator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LookupTranslator lookupTranslator0 = new LookupTranslator((CharSequence[][]) null);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[2][7];
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charSequenceArray1[0] = (CharSequence) charBuffer0;
      StringWriter stringWriter0 = new StringWriter();
      charSequenceArray0[0] = charSequenceArray1;
      charSequenceArray0[1] = charSequenceArray0[0];
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      // Undeclared exception!
      try { 
        lookupTranslator0.translate((CharSequence) charBuffer0, (-2265), (Writer) stringWriter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[5][6];
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(1182);
      charSequenceArray1[0] = (CharSequence) charBuffer0;
      StringWriter stringWriter0 = new StringWriter(1182);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      charSequenceArray0[0] = charSequenceArray1;
      charSequenceArray0[1] = charSequenceArray0[0];
      charSequenceArray0[2] = charSequenceArray1;
      CharSequence[] charSequenceArray2 = new CharSequence[2];
      charSequenceArray2[0] = (CharSequence) stringBuffer0;
      charSequenceArray0[3] = charSequenceArray2;
      charSequenceArray0[4] = charSequenceArray0[3];
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      int int0 = lookupTranslator0.translate((CharSequence) charBuffer0, 102, (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[5][6];
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(1182);
      charSequenceArray1[0] = (CharSequence) charBuffer0;
      StringWriter stringWriter0 = new StringWriter(1182);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      charSequenceArray0[0] = charSequenceArray1;
      charSequenceArray0[1] = charSequenceArray0[0];
      charSequenceArray0[2] = charSequenceArray0[1];
      CharSequence[] charSequenceArray2 = new CharSequence[2];
      charSequenceArray2[0] = (CharSequence) stringBuffer0;
      charSequenceArray2[1] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = charSequenceArray2;
      charSequenceArray0[4] = charSequenceArray2;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      int int0 = lookupTranslator0.translate((CharSequence) charBuffer0, 102, (Writer) stringWriter0);
      assertEquals(0, int0);
  }
}
