/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 10:41:33 GMT 2018
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.JVM)
@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("(McU");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("(McU", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: (McU
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = StringUtils.length("7xm,tW_u@S\")WgK");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[2r\\']5");
      String string0 = StringUtils.join((Object[]) stringArray0, "", 0, 0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.center("NO}", 0);
      assertEquals("NO}", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", (String) null, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-105));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '%');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.strip("+4_8=*LHg_td}Ex");
      assertEquals("+4_8=*LHg_td}Ex", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "#5");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", (String) null, 0);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("BT|XL3", "L", 0);
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("1.7", "os.name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.substringBetween("QU5VZ{", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*", 'H');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("H;p&_]:DmyL", "Cannot pad a negative amount: ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.replace("9jdQHH2", (String) null, (String) null);
      assertEquals("9jdQHH2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("NoSuchFieldException occurred during 1.6 backcompat code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("normalize", "");
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.trimToNull("P@");
      assertEquals("P@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToNull("GFn(q7+");
      assertEquals("GFn(q7+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "k!%~)D8x>!^L``&T&c ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "...");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.strip("are'9Hd ;:. l<", "are'9Hd ;:. l<");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 1400);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripStart("FChl\"l /gSoSm))e&<", "");
      assertEquals("FChl\"l /gSoSm))e&<", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^zc1l_&C[)*N%5_B]z";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ")>@rLz-bD2=");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "java.awt.fonts");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = " vs ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripEnd("VR}VP\"9mFn@^ar-=|f", "");
      assertEquals("VR}VP\"9mFn@^ar-=|f", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripEnd("omp", "omp");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "2O4MEy-_,L|ed:");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "50m@40l0)M;", (-156));
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Bg$G[xJ?6^/XMv7?q%");
      assertEquals("Bg$G[xJ?6^/XMv7?q%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("[;tE-xE{|LwY", "[;tE-xE{|LwY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "lan");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf("4.1", 'Y');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'e');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf("The Array must not be null", 'u', 1400);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf("", '&', (-4105));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf("J9", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf("3%j7agWu@CPE", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "\"TVS", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("k@k>1R'", "zJ5|:.\"lN", (-71));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      int int0 = StringUtils.indexOf("Search and Replace array lengths don't match: ", string0, 111);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, "long", (-345));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("1.4", (String) null, (-1917));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", ".Bh]|(iz~;", 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("N`S", "", 16);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("AZYKo[;Ztf~%ciHix'", "AZYKo[;Ztf~%ciHix'", 334);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, (String) null, (-674));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("AIX", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("tG", "IllegalArgumentException occurred during 1.6 backcompat code", (-545));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("7(H=*S-$*(/+", "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("NoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat codejava.lang.Object@6c315f0e", ", '", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("SunOS", "SunOS");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("I", '\"');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '}');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("E,rrN:b@u.a{(vK", '%', 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, '\"', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("R&fJpCK,kS", "HP-UX");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("SecurityException occurred during 1.6 backcompat code", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "Q\"UNaPZ?JC>D=", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejav, 'ang.object@78d4f5f5", "nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejav, 'ang.object@78d4f5f5", (-407));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("=e", (String) null, (-1081));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("\u82F1\u6587 (\u82F1\u56FD)", "*");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "user.region", (-1097));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("HN?u/k]>l/]$FD;Hy+", (String) null, 1972);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("n&RV_0D", "Cloneable type has no clone method", 46);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("\u82F1\u6587 (\u82F1\u56FD)", "");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(" ", 'P');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", '6');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("\"A8a)UzW_=z{2Zs", ')');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, ".ob");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("<d3%4", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", ";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "[;tE-xE{|LwY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("B(8", "B(8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("\u0004Y5aWA>)DTZ|c/", "@_B,f;sWfx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "q*5~m1WHVSG@vnH", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Array element ", "Array element ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAny((CharSequence) "0}", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      int int0 = StringUtils.indexOfAny((CharSequence) "pl", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '0';
      int int0 = StringUtils.indexOfAny((CharSequence) "Q(0~Ji^m-AE=pat6fEQ(0~Ji^m-AE=pa", charArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "N`S", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, "q*5~m1WHVSG@vnH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("*", "q*5~m1WHVSG@vnH");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny("Cannot pad a negative amount: ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("...", "Array element ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "java.lang.Integer@0000000001", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "java.version", "java.version");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = 'c';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "char", charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((String) null, "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("X|}1S`kq}ahV", "java.lang.Integer@0000000001");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut(" vs ", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut(" ", "u04ku T~G f#");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.remove("Array element ", 'T');
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Z", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "TimeToLive of ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "normalize", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.trim("lOS!QkKQ-O:FfWjh0o");
      assertEquals("lOS!QkKQ-O:FfWjh0o", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "NoSuchMethodException occurred during 1.6 backcompat code", "`U +MPV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "m';?'^^n*Xm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "=e", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("d)XK+7%4^50;w7", "");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny("#}:nwH", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("The String must not be empty", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfAny("Xj1HXN9T\"a", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Xj1HXN9T\"a";
      stringArray0[2] = "Xj1HXN9T\"a";
      int int0 = StringUtils.indexOfAny("Xj1HXN9T\"a", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("7(H=*S-$*(/+", "", 0);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("6.1", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0W1#[f5.'yz/MItu1";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substring("JAVA.LANG.iNTEGER@0000000001", (int) 'c');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 57);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substring("", (-10));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substring("N", (-1), 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 892, 6);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substring("short", (-541), (-87));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring("ClassNotFoundException occurred during 1.6 backcompat code", 3654, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring("", (-268), 54);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.left("V3h};0.Ot[IMTD^v:", 3);
      assertNotNull(string0);
      assertEquals("V3h", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-803));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.left("java.specification.version", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.left("L>juo!.)#.Vo.", 513);
      assertEquals("L>juo!.)#.Vo.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.right("ru]PB0#", (-3958));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 983);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.right(" is less than 0: ", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.right("~lQGJ", 1506);
      assertEquals("~lQGJ", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.mid("The String must not be empty", 0, 1306);
      assertNotNull(string0);
      assertEquals("The String must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 64, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.mid("", 3571, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.mid("Y", 32, 32);
      String[] stringArray0 = StringUtils.substringsBetween("Y", "", string0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.mid("", (-149), 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.mid("LVDx+", (-1), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBefore("tLzD}c%H\"<NLz>b&~", "Cnw}88)oT?^obHa-/B%");
      assertEquals("tLzD}c%H\"<NLz>b&~", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Eai=>", (String) null);
      assertEquals("Eai=>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBefore("_", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Q$`(~O` fj$sCM^.", "Q$`(~O` fj$sCM^.");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringAfter("/64q(lJb&", "tvhmth2go[xz");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", " is less than 0: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfter("/64q(lJb&", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("St", "St");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("nagf~.1sbuA1", "yPPA4%P4<9EDli~bv!");
      assertEquals("nagf~.1sbuA1", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(".ob", "B4eX`'<13uEoc");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "X8*]>[>j\b'1277q");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("ZKf_9L8=#;5<[3", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejav, 'ang.object@762da2ad", "da2");
      assertEquals("ad", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Lp'=Xd,fB.v1{2UH(k", "Lp'=Xd,fB.v1{2UH(k");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringBetween("n#Gys", (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringBetween(")9", "J", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Minimum abbreviation width is 4", "0", "1.4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBetween("qp%7kf", "qp%7kf");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "ct@", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("q*5~m1WHVSG@vnH", "InvocationTargetException occurred during 1.6 backcompat code", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejava.lang.object@, 'bb18b", "1~", "7hsEu|BcvpL~k v");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "NFD", "[deq(linuxw!c}9krqb");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Qe-_mZ;n", "Cd',=gZnY<E}0", "L_V$Ie>!A:qrHGq0G");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The Array must not be null", "The Array must not be null", "t");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("J", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("user.country", "user.country", (-464));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, 'm');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("BB", 'B');
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejava.lang.obj, '@3b062e65", '5');
      assertEquals("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejava.lang.obj, '@3b062e6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "Bg$G[xJ?6^/XMv7?q%");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("long                                                                                                                                                                                                                                                                         ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" oG<T|.mM6XQ");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("eng*isch (vereinigtes k\u00F6nigreich)", "r");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*", "*");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("**", "*");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("NoSuchMethodException occurred during 1.6 backcompat code", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals(58, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.rightPad(" &if(nXJd5", (-87), 'm');
      assertEquals(" &if(nXJd5", string0);
      
      String[] stringArray0 = StringUtils.split(" &if(nXJd5", string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y0*ZMQ_b,2rM6", "5u_I '6eD@6t", 2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Search and Replace array lengths don't match: ");
      assertEquals(19, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '6');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ':', 2615, 4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("+4_8=*LHg_td}Ex");
      String string0 = StringUtils.join((Object[]) stringArray0, 'u', Integer.MAX_VALUE, 1306);
      assertEquals(12, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 's');
      assertEquals("ssss", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, (String) null, 13, 256);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "qp%7kf");
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, 'o');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "qp%7kf");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedList0.add((Object) locale_FilteringMode0);
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, 'o');
      assertEquals("qp%7kfoREJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedList0.add((Object) locale_FilteringMode0);
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, 'o');
      assertEquals("oREJECT_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "q*5~m1WHVSG@vnH");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(362);
      arrayDeque0.add(integer0);
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      String string0 = StringUtils.join(iterator0, "3nx8UY(glA,~{C");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(92);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      linkedList0.addAll((Collection<?>) arrayList0);
      linkedList0.add((Object) integer0);
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("MAP_EXTENDED_RANGES92", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) string0);
      linkedList0.add((Object) string0);
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "Y2");
      assertTrue(listIterator0.hasPrevious());
      assertEquals("Y2", string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      String string0 = StringUtils.join((Iterable<?>) vector0, '*');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '.');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      String string0 = StringUtils.join((Iterable<?>) vector0, "+ME");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("ClassNotFoundException occurred during 1.6 backcompat code");
      assertEquals("ClassNotFoundExceptionoccurredduring1.6backcompatcode", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeStart("normalize", "d}-E=U");
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeStart("7(H=*S-$*(/+", "");
      assertEquals("7(H=*S-$*(/+", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeStart("lOS!QkKQ-O:FfWjh0o", "lOS!QkKQ-O:FfWjh0o");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("eng*isch (vereinigtes k\u00F6nigreich)", "r");
      assertEquals("eng*isch (vereinigtes k\u00F6nigreich)", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("The stripAccents(String) method is not supported until Java 1.6", "");
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("The String must not be empty", "The String must not be empty");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.repeat("[", "&kzaWg}L4qeT", (-1976));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.repeat("tyC[2", "QPfnb{*Fiu]H)HZ", 1618);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeEnd("ZKf_9L8=#;5<[3", (String) null);
      assertNotNull(string0);
      assertEquals("ZKf_9L8=#;5<[3", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeEnd("GXqq&ND=*,G^B", "t&upM+{");
      assertEquals("GXqq&ND=*,G^B", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "Cannot pad a negative amount: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("The stripAccents(String) method is not supported until Java 1.6", "");
      assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.trim("1.4");
      String string1 = StringUtils.removeEndIgnoreCase(string0, "g.,");
      assertEquals("1.4", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("ulwNfeEL%auQb5onD", "ulwNfeEL%auQb5onD");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.remove("", "user.country");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.remove("NoSuchMethodException occurred during 1.6 backcompat c...", "NoSuchMethodException occurred during 1.6 backcompat code");
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat c...", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.remove("mqeww+gqF@J", "");
      assertEquals("mqeww+gqF@J", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'N');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.remove(" &if(nXJd5", 'J');
      assertEquals(" &if(nXd5", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replace("HN?u/k]>l/]$FD;Hy+", "HN?u/k]>l/]$FD;Hy+", (String) null);
      assertNotNull(string0);
      assertEquals("HN?u/k]>l/]$FD;Hy+", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.replace("*]VY`0", "J", ")wS|kF!/e@", 0);
      assertEquals("*]VY`0", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replace("tG", "tG", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.replace("path.separator", "path.separator", "path.separator");
      assertEquals("path.separator", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("!j/H", "!j/H", "!j/H");
      assertEquals("!j/H", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replace("<pio", "<pio", "<pio", 256);
      assertEquals("<pio", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "\\u000";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("4V~", (String[]) null, (String[]) null);
      assertEquals("4V~", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      String string0 = StringUtils.replaceEachRepeatedly("4V~", stringArray0, stringArray0);
      assertEquals("4V~", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("N", "rr~f(B]DxE:7<");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("ClassNotFoundException occurred during 1.6 backcompat code", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: ClassNotFoundException occurred during 1.6 backcompat code
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[8];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("P@", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("4V~", "4V~");
      String string0 = StringUtils.replaceEachRepeatedly("4V~", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("4V~", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[4] = "E1k79x";
      String string0 = StringUtils.replaceEach("4.9", stringArray0, stringArray0);
      assertEquals("4.9", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4.9";
      stringArray0[1] = "4.9";
      String string0 = StringUtils.replaceEach("4.9", stringArray0, stringArray0);
      assertEquals("4.9", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4.9";
      stringArray0[4] = "E1k79x";
      String string0 = StringUtils.replaceEach("4.9", stringArray0, stringArray0);
      assertEquals("4.9", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4.9";
      stringArray0[7] = "";
      String string0 = StringUtils.replaceEach("4.9", stringArray0, stringArray0);
      assertEquals("4.9", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", '\"', '\"');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'W', 'm');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2905, '|');
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("", string0, "p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.replaceChars("OXE*0xB@|`", "", "p{InCombiningDiacriticalMarks}+");
      assertEquals("OXE*0xB@|`", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars("normalize", "d}-E=U", (String) null);
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars("InvocationTargetException occurred during 1.6 backcompat code", "InvocationTargetException occurred during 1.6 backcompat code", "R3]al7:9&mZ");
      assertEquals("R3]al7:9a3Z7:l:9a3all937lla7:la", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.overlay(" is less than 0: ", "", 65, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "dQV6fr^y&1'", 178, 178);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.overlay("q6J>.8qCQyL+", (String) null, (-821), 59);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.chomp("qp%7kf");
      assertEquals("qp%7kf", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.chomp("y");
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.chomp("Array element ", "W|]%i");
      assertEquals("Array element ", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chomp("zl^y:EAU:mD'LxCR-o", (String) null);
      assertEquals("zl^y:EAU:mD'LxCR-o", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chomp("b34[e}12QeK_Y:0[", "b34[e}12QeK_Y:0[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chop("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejava.lang.object, 'cf9f64");
      assertNotNull(string0);
      assertEquals("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejava.lang.object, 'cf9f6", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chop("Z");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "NoSuchFieldException occurred during 1.6 backcompat code", 1321);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.repeat(" is not in the range '0' - '9'", 1);
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.repeat("", 4);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.repeat("L", 8192);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.repeat("L", 8209);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.repeat("!b", 238);
      assertEquals("!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b!b", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.repeat("java.text.Normalizer", (String) null, 1164);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 90, '!');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.rightPad("+TFAbB", (-1), (String) null);
      assertEquals("+TFAbB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 2004, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.rightPad("long", 2004, "");
      String string1 = StringUtils.rightPad("", 269, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("long                                                                                                                                                                                                                                                                         ", string1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.center("TvhMTh2O[cz", 32, "50m@40l0)M;");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 543, 'k');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.leftPad("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejav, 'ang.object@78d4f5f5", (-1431), '^');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.leftPad(stringArray0[4], (int) 'I', " ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 1111, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.leftPad("mpompompompo", 9, "java.ext.dirs");
      assertEquals("mpompompompo", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 59, "A|y!m-4U---------------------------------------------------");
      assertEquals("A|y!m-4U---------------------------------------------------", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.center("SunOS", 967, "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace arSunOSSearch and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace ar", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 140, '-');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.center("VR}VP\"9mFn@^ar-=|f", 356, 'Q');
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQVR}VP\"9mFn@^ar-=|fQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.center(",)'K'H", 5);
      assertEquals(",)'K'H", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 269, "|RHjBxMJ~9'?MNp");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.center("I", (-1), string0);
      assertEquals("I", string1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.center("*]VY`0", 3, "");
      assertEquals("*]VY`0", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.upperCase("!5G5H6");
      assertEquals("!5G5H6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.lowerCase("F", locale0);
      assertEquals("f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.capitalize("long");
      assertNotNull(string0);
      assertEquals("Long", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("normalize");
      assertNotNull(string0);
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.swapCase("java.lang.Integer@0000000001");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int int0 = StringUtils.countMatches("|,cb8&?x@iga", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      int int0 = StringUtils.countMatches("yRA)8EgRAr{", "yRA)8EgRAr{");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.rightPad("long", 2004, "");
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("are'9Hd ;:. l<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("zJ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Cannot pad a negative amount: Cannot pad a negative amount: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("U~W=~d$1j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.isNumeric(stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000vt8o&Z Ri[~W1zT+C000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("                                                                                           ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("165");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("tG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.center("1.4", 1111, (String) null);
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("NoSuchMethodException occurred during 1.6 backcompat c...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("long");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("o~7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.defaultString("&~}dw)]w'oeLEIX0@1");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.defaultString("den", "I");
      assertEquals("den", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("3MiC[", "3MiC[");
      assertEquals("3MiC[", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.reverse("'.Y`)");
      assertNotNull(string0);
      assertEquals(")`Y.'", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'u');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 57, 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-4714), 1916);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("nosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codenosuchmethodexception occurred during 1.6 backcompat codejava.lang.object@60, '127", 4426, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "NoSuchMethodException occurred during 1.6 backcompat code";
      objectArray0[1] = (Object) "NoSuchMethodException occurred during 1.6 backcompat code";
      String string0 = StringUtils.join(objectArray0);
      assertEquals("NoSuchMethodException occurred during 1.6 backcompat codeNoSuchMethodException occurred during 1.6 backcompat code", string0);
      
      String string1 = StringUtils.abbreviate(string0, 32, 57);
      assertEquals("...uring 1.6 backcompat codeNoSuchMethodException occu...", string1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.abbreviate("TimeToLive of ", 9, 9);
      assertEquals("...ve of ", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", "Solaris", 0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = "\\u!oonrKPzM~~K";
      String string1 = StringUtils.abbreviateMiddle(string0, "", (-1785));
      assertEquals("\\u!oonrKPzM~~K", string1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("ZKf_9L8=#;5<[3", "The Array must not be null", 1400);
      assertEquals("ZKf_9L8=#;5<[3", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Minimum abbreviation width is 4", "6.1", 9);
      assertEquals("Min6.1s 4", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.difference("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "s_epz>6.I5DD=");
      assertEquals("s_epz>6.I5DD=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.difference("...", "...");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[0], (CharSequence) "&~}dw)]w'oeLEIX0@1");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "NoSuchMethodException occurred during 1.6 backcompat c...", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "d)XK+7%4^50;w7", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.difference("8zBQy=f>q?Zr", " &if(nXJd5");
      assertEquals(" &if(nXJd5", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "_N<z", (CharSequence) "_N<z");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.SystemUtils");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("org.apache.commons.lang3.SystemUtils", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.leftPad(".>jka*[Il(b.ItRI<F", 533, " ");
      assertEqualsjka*[Il(b.ItRI<F", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "bje";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.repeat("bje", 533);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "bje";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "q,cS";
      stringArray0[1] = "q,cS";
      stringArray0[2] = "q,cS";
      stringArray0[3] = "q,cS";
      stringArray0[4] = "q,cS";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("q,cS", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "os.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.name";
      stringArray0[1] = "os.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.nameos.name";
      stringArray0[2] = "os.name";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("os.name", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, ";#r<wX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance(" is less than 0: ", "Q^0vA3");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "z}{ni%_9>|b");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("", string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("evTQ}:e}Ie73B\"<Mw", "");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("The stripAccents(String) method is not supported until Java 1.6", "The stripAccents(String) method is not supported until Java 1.6");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.startsWithAny("p{InCombiningDiacriticalMarks}+", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", (String) null, 0);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("F", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KB>";
      boolean boolean0 = StringUtils.startsWithAny("KB>", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "[2r\\']5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "Can't find a public method for ");
      assertFalse(boolean0);
  }
}
