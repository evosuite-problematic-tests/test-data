/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 18 10:05:15 GMT 2018
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PriorityQueue;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.JVM)
@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.center("IJ`$*-eg9&zZ7T", 2686, "IJ`$*-eg9&zZ7T");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("v5BY>Rx\u0004]X&jAdZ", string0, 3176);
      assertNotNull(stringArray0);
      
      StringUtils.replaceEachRepeatedly(string0, (String[]) null, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Array and element cannot both be null", (int) '7');
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" is not in the range '0' - '9'", "Minimum abbreviation width with offset is 7");
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("on4UlxDqvS+^5@hm6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("', is neither of type Map.Entry nor an Array");
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("'eins6", "R.&FeM->[IdZH", (-1710));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', is neither of type Map.Entry nor an Array", (String) null, 1);
      String string0 = StringUtils.join(stringArray0);
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.center(string0, 2029);
      String string2 = StringUtils.replaceOnce(string1, string1, string1);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rightPad(string0, 2028);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[3] = string0;
      String string2 = StringUtils.replaceOnce(stringArray0[7], string1, stringArray0[7]);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string2, (CharSequence) stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.strip("x3P$*`#!5.");
      assertNotNull(string0);
      assertEquals("x3P$*`#!5.", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rightPad(string0, 2029);
      String string2 = StringUtils.chomp(string1, string0);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" is not in the range '0' - '9'", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("java.text.Normalizer$Form", "Minimum abbreviation width is 4");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("R.&FeM->[IdZH");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("x3P$*`#!5.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "                                                                                                                                        ", (CharSequence) "n:r]PZ/a$x>AX");
      assertEquals("n:r]PZ/a$x>AX", charSequence0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToNull("java.text.Normalizer is not available");
      assertNotNull(string0);
      assertEquals("java.text.Normalizer is not available", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Jsg+h(;qb{e=xm");
      assertNotNull(string0);
      assertEquals("Jsg+h(;qb{e=xm", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "java.lang.String@0000000001|jwq93H9l3<X7-g6~#LB.K");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "=FMnW~Me");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.strip("xTfo7I,=low us+|", ".L?U?");
      assertEquals("xTfo7I,=low us+|", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.center("", 136, "");
      String string1 = StringUtils.strip(string0, "");
      assertEquals("                                                                                                                                        ", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripStart("?5RR4A'g[^jK7tie!", "?5RR4A'g[^jK7tie!");
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "java.lang.String@0000000001|jwq93H9l3<X7-g6~#LB.K");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G{bY;!%zu3R+L4R ");
      assertEquals("G{bY;!%zu3R+L4R", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripEnd("zENo", "zENo");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "kh,NS~#");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`3%fkfD,P");
      String string0 = StringUtils.replaceEach("`", stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals("`", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripAccents("dYW");
      assertNotNull(string0);
      assertEquals("dYW", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "v", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "V", (CharSequence) "V");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "&'V", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = StringUtils.equals((CharSequence) stringBuffer0, (CharSequence) "Minimum abbreviation width is 4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "&'V");
      boolean boolean0 = StringUtils.equals((CharSequence) "7[;", (CharSequence) charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("\"J<", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("java.lang.Integer@0000000001", "{OuW6B\"G)VcyfBF2Q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "~}dw)]w'oeLEIX", 5001);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 238);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "\\u0";
      int int0 = StringUtils.indexOf((CharSequence) string0, 57, 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 202, 2127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) "The stripAccents(CharSequence) method requires at least Java6, but got: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "\\u";
      int int0 = StringUtils.indexOf((CharSequence) "!r]r)z(&7I!l`~", (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "/", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rightPad(string0, 2029);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) string1, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "x3P$*`#!5.", (CharSequence) "]WkK*oP", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("&@MAe@I`X*TF<Z", "&@MAe@I`X*TF<Z", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", '?');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.removeEnd(string0, "G{bY;!%zu3R+L4R ");
      assertEquals("\\u0", string1);
      
      int int0 = StringUtils.ordinalIndexOf(string0, string1, '?');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, (-1334));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "IllegalAccessException occurred", (CharSequence) "IllegalAccessException occurred", (-3957));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7z^Ub*:]cN@", (CharSequence) "", 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "?<M>dd*_eRsm67wT`#", (CharSequence) "k+;");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "', has a length less than 2", (-2077));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "The character The character ", 97, 97);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 16, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", (CharSequence) "])L$6Y0D@~@7");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "Array element java.text.Normalizer$Form", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Minimum abbreviation width is 4", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "InvocationTargetException occurred", (CharSequence) null, (-352));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "]Nn=o", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "grm 0I8BdnU");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "R.&FeM->[IdZH", (CharSequence) "Minimum abbreviation width with offset is 7");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*s*[ddfo", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*318;t", (CharSequence) null, 1648);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequenceharSequence) "Z6g?tBLgiP!Z.G", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (int) '?');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~}dw)]w'oeLEIX", (CharSequence) "~}dw)]w'oeLEIX");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "-UW0m^{vF,S,@B", 134);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "The character The character ", 97);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "java.text.Normalizer$Form");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rightPad(string0, 2029);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (CharSequence) "The String must not be empty");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "\"J<", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("The character ", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("-UW0m^{vF,S,@B", ",QPQr,+D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("qsG5&<4", "qsG5&<");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("~}dw)]w'oeLEIX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("xTfo7I,=low us+|");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = StringUtils.indexOfAny((CharSequence) "mbP}!h=", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Z6g?tBLgiP!Z.G", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      int int0 = StringUtils.indexOfAny((CharSequence) "mbP}!h=", charArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'M';
      int int0 = StringUtils.indexOfAny((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", "N4>,y$,GyM)DcGYe");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "\"G]IVvel~[P_J~Z `=", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "vOiU>ilJ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cloneable type Cloneable type ", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";`Eg", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "^|3", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "^YFz\">$'1H", "^YFz\">$'1H");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH...", charArray0);
      assertEquals(253, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "V");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Array element java.text.Normalizer$Form", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "&'V");
      int int0 = StringUtils.indexOfAnyBut((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.leftPad("*318;t", 847, 'r');
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr*318;t", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is 4", (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "K{?'_V:{`}(r|r%!-=5", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ",>OR", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "<gZaEH", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The character The character ", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "X{IKf3Y +8a+/1S&mFC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ":TSfs", "S[rA.Kc6G~MtE%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "tEj![", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9&OV0#M6bp/", '|');
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfAny((CharSequence) "Array element ", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      int int0 = StringUtils.indexOfAny((CharSequence) "Array element ", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("java.text.Normalizer$Form", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "@@aGoi)0yoSZ@CTu";
      int int0 = StringUtils.lastIndexOfAny("J5f", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substring("|m^tW:cw_\u0005kJ2`t7", 1294);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 122);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substring("1TN)bWV|O[@", (-1400));
      assertEquals("1TN)bWV|O[@", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, 127);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring("", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring("", 8192, 90);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.left(string0, '?');
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 527);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.left(string0, (-1913));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.center("", 136, "");
      assertEquals("                                                                                                                                        ", string0);
      
      String string1 = StringUtils.left(string0, '?');
      assertNotNull(string1);
      assertEquals("                                                               ", string1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.right("XgN:Ze{1*3$8", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.right("The character ", (-1323));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.right("", 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.mid(")i?#Qi~u_E[tU6", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 16, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.mid("', is neither of type Map.Entry nor an Array", 127, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.mid("Index: ", 2, 2);
      assertEquals("de", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.mid("", (-37), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "^|3");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBefore("v?DrG-pO!7H$R%6~07", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBefore("The Array must not be null", (String) null);
      assertNotNull(string0);
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBefore("v?DrG-pO!7H$R%6~07", "wHZ/d2CLwk{fix0$!/");
      assertEquals("v?DrG-pO!7H$R%6~07", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBefore("java.text.Normalizer is not available", "java.text.Normalizer is not available");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.substringAfter(string0, "6Ab");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "&@MAe@I`X*TF<Z");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringAfter("V\"1C ap%Z2mS8f", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfter("4yz9I2;B[{LM,", "");
      assertEquals("4yz9I2;B[{LM,", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "W>#Nl\"pUoo1v?|B7v");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Wk/YB$Y&%VIGW", (String) null);
      assertEquals("Wk/YB$Y&%VIGW", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(";`Eg", "2CV&}");
      assertEquals(";`Eg", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("tG", "tG");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("4w7Ws/q1=MHNU", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("7[;", "Strings must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(";y`[j=pOoQ", ";y`[j=pOoQ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("cLA@emA@f%9kAf-T", "f");
      assertEquals("-T", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "h1*x");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringBetween("9*wDIZ6p6", "9*wDIZ6p6", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBetween("xOeE;|e}", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "The String must not be empty", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringBetween("xOeE;|e}", "|");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "uk", ".4oYt5");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The chracter 4", "h", "h");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("?mGs:qvwzA+By5[?", (String) null, "German (Germany)");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("InvocationTargetException occurred", "J7", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "java.text.Normalizer$Form", "yP;gihmcc1<'rjJ+");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(",;$/{(dws2", "F<_", "Cannot clone Cloneable type ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("cLA@emA@f%9kAf-T", "cLA@emA@f%9kAf-T", "f");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "6F4Xwcw-(0xt5,Xtq g", 0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("zQ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("vr]<7J|%^mKbs7d", "vr]<7J|%^mKbs7d", 0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("^YFz\">$'1H", "^YFz\">$'1H", 57);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, '|');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.text.Normalizer$Form", 2874, '?');
      String[] stringArray0 = StringUtils.split(string0, '?');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'vpO.F~<C A@m?", '?');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.rightPad("XM", 3777, 'H');
      String string1 = StringUtils.reverseDelimited(string0, 'H');
      assertEquals("XM", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "", 97);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rightPad(string0, 2029);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1);
      assertEquals(2028, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" e0LB", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f", "f");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("cLA@emA@f%9kAf-T", "f");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("f", "f");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("cLA@emA@f%9kAf-T", "cLA@emA@f%9kAf-T");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Arguments cannot both be null", " is not in the range '0' - '9'");
      assertEquals(21, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.repeat(string0, 57);
      assertEquals("\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0\\u0", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, "{4}w+ b.3GSnu", 57);
      assertNotNull(stringArray0);
      assertEquals(57, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("WZb)1dw9Z2");
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '1');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'V', (-1), Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'u');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("6Ab");
      String string0 = StringUtils.join((Object[]) stringArray0, '$');
      assertEquals("6$A$b", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, (String) null, (-1), 33);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.join((Object[]) stringArray0, "K{?'_V:{`}(r|r%!-=5");
      assertEquals("K{?'_V:{`}(r|r%!-=5K{?'_V:{`}(r|r%!-=5K{?'_V:{`}(r|r%!-=5", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, (String) null, 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      String string0 = StringUtils.join(iterator0, 'D');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'r');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(360);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("Index: ");
      linkedHashSet0.addAll(priorityQueue0);
      linkedHashSet0.add("j[WaPz");
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, 's');
      assertNotNull(string0);
      assertEquals("Index: sj[WaPz", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "UnQqZk^ruK)5mNd-e0";
      char[] charArray0 = null;
      StringUtils.leftPad("!r]r)z(&7I!l`~", 382, 'T');
      StringUtils.repeat("Minimum abbreviation width is 4", 382);
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string1 = StringUtils.join(iterator0, 'T');
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      String string0 = StringUtils.join(iterator0, "cH9}G@C");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "normalize");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object object0 = new Object();
      arrayDeque0.offerFirst(object0);
      arrayDeque0.add("|jwq93H9l3<X7-g6~#");
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, "|jwq93H9l3<X7-g6~#");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = 37;
      char char0 = 'F';
      StringUtils.rightPad("vOiU>ilJ", 37, 'F');
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'y');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Z6g?tBLgiP!Z.G");
      assertEquals("Z6g?tBLgiP!Z.G", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("^Qy1K@F K");
      assertEquals("^Qy1K@FK", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeStart("$Zr(jur%H?(z%;dmIM", "K{?'_V:{`}(r|r%!-=5");
      assertEquals("$Zr(jur%H?(z%;dmIM", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeStart(";`Eg", "");
      assertEquals(";`Eg", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeStart("4z", "4z");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "G{bY;!%zu3R+L4R");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("%#=UGg{l:pv@LY", (String) null);
      assertNotNull(string0);
      assertEquals("%#=UGg{l:pv@LY", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.repeat("The character The character ", "The character The character ", 168);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "n#'vjcQ&");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("The character The character ", "The character The character ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rightPad(string0, 2028);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("The String must not be empty", string1);
      assertEquals("The String must not be empty", string2);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.remove("i?^J4i?^J4", (String) null);
      assertNotNull(string0);
      assertEquals("i?^J4i?^J4", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'F');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.remove("|m^tW:cw_\u0005kJ2`t7", 'U');
      assertEquals("|m^tW:cw_\u0005kJ2`t7", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("S{ld]yccY*e/UOY", 'U');
      assertEquals("S{ld]yccY*e/OY", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replace("Jsg+h(;qb{e=xm", (String) null, "java.text.Normalizer$Form", 2874);
      assertEquals("Jsg+h(;qb{e=xm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("nPM~", "u*Ant+>H&oUP&d_", (String) null);
      assertEquals("nPM~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.replace("decompose", string0, "", 0);
      assertEquals("decompose", string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.remove("|jwq93H9l3<X7-g6~#", "|jwq93H9l3<X7-g6~#");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replace("Threshold must not be negative", "Threshold must not be negative", "Minimum abbreviation width with offset is 7", 97);
      assertEquals("Minimum abbreviation width with offset is 7", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', is neither of type Map.Entry nor an Array", (String) null, 1);
      assertNotNull(stringArray0);
      
      StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEachRepeatedly("3QC\tXmD&;Inzo", stringArray0, (String[]) null);
      assertEquals("3QC\tXmD&;Inzo", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("* ub[:aYeGMkPH&'3");
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("|jwq93H9l3<X7-g6~#");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("java.lang.String@0000000001", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 15 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', is neither of type Map.Entry nor an Array", (String) null, 1);
      assertNotNull(stringArray0);
      
      StringUtils.replaceEach("bv!xN_E?d:h&U*", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.center(string0, 2029);
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("* ub[:aYeGMkPH&'3");
      String string0 = StringUtils.replaceEach("}hJk+0f%8?R%}*y", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("}hJk+0f%8?R%}*y", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "&`Q";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("&`Q", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("|jwq93H9l3<X7-g6~#");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("java.lang.Object@3c6da73e|jwq93H9l3<X7-g6~#|jwq93H9l3<X7-g6~#", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", '2', '2');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '`', '4');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "java.text.Normalizer is not available");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The character ", (String) null, "...");
      assertEquals("The character ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars("0Q*)B", "The stripAccents(CharSequence) method requires at least Java6, but got: ", (String) null);
      assertEquals("0Q*B", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.replaceChars(",>or", ",>OR", "normalize");
      assertEquals("noror", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.removeEnd(string0, "G{bY;!%zu3R+L4R ");
      assertEquals("\\u0", string1);
      
      String string2 = StringUtils.replaceChars("'vpO.F~<C A@m?", string1, "l0wXy.Hse]$2(");
      assertEquals("'vpO.F~<C A@m?", string2);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "DZrV`ebJ", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.overlay("Array element ", (String) null, (-2273), (-2273));
      assertEquals("Array element ", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.overlay("The Array must not be null", "java.text.Normalizer$Form", 48, 2361);
      assertEquals("The Array must not be nulljava.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.reverse("*y)hMXLj!oBplmno}io");
      String string1 = StringUtils.overlay("*y)hMXLj!oBplmno}io", string0, 1, 0);
      assertEquals("oi}onmlpBo!jLXMh)y*y)hMXLj!oBplmno}io", string1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.chomp(string0);
      assertEquals("\\u", string1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chomp("h");
      assertEquals("h", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chop("Array element ");
      assertEquals("Array element", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.repeat("4", 1);
      assertNotNull(string0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, 2209);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.repeat("<", 95);
      assertEquals("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.repeat("!{", "", 2457);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "Array element ", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 13);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.rightPad("(a", (-846), 'n');
      assertEquals("(a", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 5600, "mbP}!h=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.rightPad("^|cK]*fq", 2089, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.rightPad("java.lang.String@0000000001", (-1), "1X[");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.rightPad("*", 32, "Minimum abbreviation width is 4");
      assertEquals("*Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.rightPad("<~m-bs<ouG!", 14, "]wKk*Op");
      assertEquals("<~m-bs<ouG!]wK", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.leftPad("Elv}G+G<Z&(", 0, '4');
      assertEquals("Elv}G+G<Z&(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 5600, "mbP}!h=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.leftPad("Minimum abbreviation width is 4", (-1), (String) null);
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.center("?|44j#?o", 13, string0);
      assertEquals("\\u?|44j#?o\\u\\", string1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.rightPad("<gZaEH", 136, '?');
      assertEquals("<gZaEH??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string0);
      
      String string1 = StringUtils.leftPad("Java.text.Normalizer$Form", 136, string0);
      assertEquals("<gZaEH?????????????????????????????????????????????????????????????????????????????????????????????????????????Java.text.Normalizer$Form", string1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int int0 = StringUtils.length("Jsg+h(;qb{e=xm");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-6219), '|');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.center(string0, 0);
      assertEquals("\\u000", string1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.center("Search and Replace array lengths don't match: ", 32);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1), "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.center("x", 0, "j[WaPz");
      assertEquals("x", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.center("Array element java.text.Normalizer$Form", 22, "Array element java.text.Normalizer$Form");
      assertEquals("Array element java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Locale locale0 = new Locale("\"J<", "\"J<");
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.lowerCase("*318;t");
      assertEquals("*318;t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("The stripAccents(CharSequence) method requires at least Java6, but got: ", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.capitalize("java.text.Normalizer$Form");
      assertEquals("Java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.uncapitalize(stringArray0[5]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("])L$6Y0D@~@7");
      assertEquals("])L$6Y0D@~@7", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.swapCase(".~<K=>V>*]XYw/E%");
      assertEquals(".~<k=>v>*]xyW/e%", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = "\\u0";
      int int0 = StringUtils.countMatches("", string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int int0 = StringUtils.countMatches(".~<K=>V>*]XYw/E%", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int int0 = StringUtils.countMatches("Z6g?tBLgiP!Z.G", "Z6g?tBLgiP!Z.G");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("R.&FeM->[IdZH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      boolean boolean0 = StringUtils.isAlpha(stringBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("java.lang.String@0000000001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.center("", 136, "");
      assertEquals("                                                                                                                                        ", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("'lS#85A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("decompose");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("The String must not be empty");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("un.text.Normalizer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Iqkq,+5oD%e^LiQKQ,+5Od%E^lIqkq,+5oD%e^LiQKQ,+5Od%E^ljava.lang.Object@39c439abiQKQ,+5Od%E^l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("&'V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[2] = (CharSequence) "7";
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[2]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("3t`b2y=2-$W>96ELm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.leftPad("DCf+3L,\"0h\"ut", 3553);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.leftPad("DCf+3L,\"0h\"ut", 3553);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("x3P$*`#!5.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("v");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("qsG5&<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.defaultString("Cloneable type Cloneable type ");
      assertEquals("Cloneable type Cloneable type ", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.defaultString("R.&FeM->[IdZH", "R.&FeM->[IdZH");
      assertEquals("R.&FeM->[IdZH", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "\"J<");
      assertNotNull(string0);
      assertEquals("\"J<", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("{}", "");
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("AT", "");
      assertEquals("AT", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, "java.text.Normalizer$Form");
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'A');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-1), 4658);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("`KYqq6GFEfI6k1^wxhw", 1829, (-323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.abbreviate("The character The character ", 664, 12);
      assertEquals("...haracter ", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.repeat("]:)wvx'?Rt05bx]'s", 1022);
      String string1 = StringUtils.abbreviate(string0, 114, 1022);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The character ", 37, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "]1cc^vuF", 4096);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Minimum abbreviation width is 4", "-)E09Vh", (-441));
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("`s", "", 881);
      assertEquals("`s", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.stripEnd("sun.text.Normalizer is not available", "i?^J4i?^J4");
      assertEquals("sun.text.Normalizer is not available", string0);
      
      String string1 = StringUtils.abbreviateMiddle("(%}Cxf=", string0, 127);
      assertEquals("(%}Cxf=", string1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(" is not in the range '0' - '9'", "q1", 14);
      assertEquals(" is noq1 - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.difference("', is neither of type Map.Entry nor an Array", "x3P$*`#!5.");
      assertEquals("x3P$*`#!5.", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.replace("Xp;4dkZsRTmT UM|", "s+", "J+(D i/k]", (-2535));
      String string1 = StringUtils.leftPad((String) null, (-1), 'g');
      String string2 = StringUtils.difference(string1, string0);
      assertNotNull(string2);
      assertEquals("Xp;4dkZsRTmT UM|", string2);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.difference("The character ", (String) null);
      assertEquals("The character ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.difference("java.lang.Integer@0000000001", "java.lang.Integer@0000000001");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) ";nvL");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "java.lang.String@0000000001|jwq93H9l3<X7-g6~#LB.K", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "K{?'_V:{`}(r|r%!-=5", (CharSequence) "K{?'_V:{`}(r|r%!-=5");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.difference("Wk/YB$Y&%VIGW", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(",>OR", "German (Germany)");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(",>OR", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "&@MAe@I`X*TF<Z";
      charSequenceArray0[1] = (CharSequence) "java.text.Normalizer is not available";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "pDva";
      stringArray0[1] = "pDva";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("pDva", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "q#jNTv|KQ#JntV|Kq#jNTv|KQ#JntV|Kq#jNTv|KQ#JntV|KQ#JntV|Kjava.lang.Object@1318d88cKQ#JntV|";
      stringArray0[1] = "q#jNTv|";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("q#jNTv|", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oi}onmlpBo!jLXMh)y*";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "java.lang.String@0000000001", (CharSequence) "}hJk+0f%8?R%}*y");
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "T", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "German (Germany)");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "$Zr(jur%H?(z%;dmIM", (CharSequence) "");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "WZb)1dw9Z2", (CharSequence) "Y3&5d2TGCyE");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "pG&MwXz?b0*/S", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cloneable type Cloneable type ", (CharSequence) "pG&MwXz?b0*/S", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "4w7Ws/q1=MHNU", (CharSequence) "", (-2100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (int) '}');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\"G]IVvel~[P_J~Z `=", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("n:r]PZ/a$x>AX", "");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "", 16);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.rightPad("<gZaEH", 136, '?');
      assertEquals("<gZaEH??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "&'V");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "&'V", (CharSequence) charBuffer0, 165);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "m1d52zr*1J@e", (CharSequence) "/", 11);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "HZ<oX~II,m'Wo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.startsWithAny("s+", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      boolean boolean0 = StringUtils.startsWithAny("RSUa.j'9lM*l", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "s+";
      boolean boolean0 = StringUtils.startsWithAny("s+", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.endsWithAny("Z6g?tBLgiP!Z.G", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "The String must not be empty");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("'eins6");
      assertEquals("'eins6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '5');
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '5');
      boolean boolean0 = StringUtils.endsWithAny("VtDs$J>nTuheGZ<", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("Z6g?tBLgiP!Z.G", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("", string0);
  }
}
